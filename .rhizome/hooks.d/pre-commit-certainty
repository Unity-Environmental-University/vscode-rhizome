#!/usr/bin/env python3
"""
Rhizome pre-commit hook: Detect uncertain diffs and prompt for certainty.

When you commit, this hook:
1. Analyzes staged diffs
2. Identifies patterns that suggest uncertainty (rewrites, large deletions, etc.)
3. Generates context-aware prompts
4. Records certainty as inline comment in commit message

Design principle: Friction at choosing. Not at typing.
"""

import subprocess
import sys
import re
from pathlib import Path
from typing import List, Tuple

def get_staged_diff() -> str:
    """Get staged changes as unified diff."""
    try:
        result = subprocess.run(
            ["git", "diff", "--cached"],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout
    except subprocess.CalledProcessError:
        return ""

def analyze_diff(diff: str) -> Tuple[str, List[str]]:
    """
    Analyze diff for uncertainty patterns.

    Returns: (risk_level: str, patterns: List[str])
    risk_level: "low" | "medium" | "high"
    patterns: ["deletion", "rewrite", "new_file", ...]
    """
    patterns = []
    lines = diff.split("\n")

    # Count additions/deletions
    adds = sum(1 for line in lines if line.startswith("+") and not line.startswith("+++"))
    dels = sum(1 for line in lines if line.startswith("-") and not line.startswith("---"))

    # Detect patterns
    if dels > adds * 1.5:  # More deletions than additions
        patterns.append("large_deletion")

    if adds > dels * 2:  # Many new lines
        patterns.append("new_code")

    if re.search(r"\n-.*\n\+.*", diff):  # Line rewrites
        patterns.append("rewrite")

    if "diff --git a/dev/null" in diff or "new file mode" in diff:
        patterns.append("new_file")

    if any(re.search(rf"^\-.*{kw}.*$", line) for kw in ["TODO", "FIXME", "HACK"] for line in lines):
        patterns.append("removed_comment")

    # Determine risk
    risk = "high" if len(patterns) >= 2 else "medium" if patterns else "low"

    return risk, patterns

def generate_prompt(risk: str, patterns: List[str]) -> str:
    """Generate context-aware prompt for certainty."""
    if risk == "low":
        return "Low uncertainty detected. Certainty: [0-1]? (quick assessment)"

    if "large_deletion" in patterns:
        return "Deleting more than adding. Certain this is intended? [0-1]"

    if "rewrite" in patterns:
        return "Rewriting existing logic. Confident in new approach? [0-1]"

    if "new_file" in patterns:
        return "New file. Clear intent and scope? [0-1]"

    if "new_code" in patterns:
        return "New code added. Tested sufficiently? [0-1]"

    return "Review changes. Certainty: [0-1]? (basis, gaps)"

def record_certainty_prompt():
    """
    Non-interactive: Write template file for user to fill in.
    Do NOT use input() â€” Claude Code cannot interact with interactive prompts.
    """
    diff = get_staged_diff()
    if not diff:
        return  # Nothing staged, no prompt

    risk, patterns = analyze_diff(diff)

    if risk == "low":
        return  # Don't bother for low-risk commits

    prompt = generate_prompt(risk, patterns)

    # Write template file (non-interactive)
    hook_tmp = Path(".rhizome/.git-hook-certainty-template")
    hook_tmp.parent.mkdir(exist_ok=True)

    with open(hook_tmp, "w") as f:
        f.write(f"# Rhizome Certainty Template\n")
        f.write(f"# Detected: {prompt}\n")
        f.write(f"# Risk level: {risk}\n")
        f.write(f"# Patterns: {', '.join(patterns)}\n")
        f.write(f"\n")
        f.write(f"# Fill in below, then: git add <files> && git commit\n")
        f.write(f"# Certainty (0-1): \n")
        f.write(f"# Basis: \n")
        f.write(f"# Gaps: \n")

    # Write to stderr so user sees template path (if run interactively)
    print(f"[Rhizome] {prompt}", file=sys.stderr)
    print(f"[Rhizome] Template: {hook_tmp}", file=sys.stderr)

if __name__ == "__main__":
    record_certainty_prompt()
    sys.exit(0)
