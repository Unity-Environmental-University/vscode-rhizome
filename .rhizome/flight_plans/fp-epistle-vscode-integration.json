{
  "id": "fp-epistle-vscode-integration",
  "title": "Integrate Epistle System into vscode-rhizome",
  "requester": "As a developer using vscode-rhizome, I want to generate epistles directly from the editor—recording multi-persona dialogs about code changes so I can audit design decisions and teach team members.",
  "workflow": "1. Research epistle system (DONE). 2. Design extension integration points. 3. Add epistle scaffolding commands. 4. Implement epistle creation from selection. 5. Add epistle registry UI. 6. Test end-to-end.",
  "targets": [
    "Enable three epistle formats: letter (file-based), inline (comment-embedded), dynamic (file-derived persona)",
    "Make epistle creation accessible from right-click menu",
    "Show epistle registry in sidebar or panel",
    "Link epistles to flight plans",
    "Support persona advocates for extension files",
    "Generate dynamic personas that represent a source file's 'voice' and architectural philosophy"
  ],
  "stories": [],
  "created_at": "2025-10-28T23:00:00Z",
  "status": "active",
  "require_approval": false,
  "approval": {
    "state": "approved",
    "by": null,
    "at": null,
    "notes": null
  },
  "steps": [
    {
      "id": 1,
      "title": "Research & Design: Epistle System Architecture",
      "description": "Understand epistles (letter-based persona dialogs) and design integration points for vscode-rhizome. What should the extension's epistle workflow be?",
      "status": "completed"
    },
    {
      "id": 2,
      "title": "Scaffold: Epistle Plugin Integration Path",
      "description": "Create vscode-rhizome epistle scaffolding directory & basic structure. Copy epistle plugin templates, set up registry, prepare for CLI integration.",
      "status": "completed"
    },
    {
      "id": 3,
      "title": "Feature: 'Record Epistle' Right-Click Command (Letter Format)",
      "description": "Add right-click menu item: 'Record epistle about this code'. Opens dialog to choose personas, topic, context. Generates letter-style epistle template and saves to .rhizome/plugins/epistles/.",
      "status": "completed"
    },
    {
      "id": 3.5,
      "title": "Feature: Inline Epistle Comment Insertion",
      "description": "Add right-click option: 'Create inline epistle'. Inserts multi-persona comment block directly above selection (// [persona]: response format). Supports dynamic persona selection.",
      "status": "completed"
    },
    {
      "id": 3.75,
      "title": "Feature: Dynamic Persona from Source File",
      "description": "Analyze a source file's coding patterns, style, concerns (error handling, architectural decisions, naming conventions). Call rhizome CLI to synthesize a temporary persona that represents the file's perspective. Use in epistles.",
      "status": "completed"
    },
    {
      "id": 4,
      "title": "Feature: Epistle Registry Sidebar",
      "description": "Create sidebar view showing all epistles for this project. Filter by persona, date, topic. Click to open epistle file.",
      "status": "completed"
    },
    {
      "id": 5,
      "title": "Feature: Link Epistles to Flight Plans",
      "description": "When recording an epistle, optionally link it to active flight plan. Show related epistles in flight plan view.",
      "status": "completed"
    },
    {
      "id": 6,
      "title": "Integration: Persona Advocates for Extension Files",
      "description": "Allow personas to 'advocate' for extension files (e.g., code-reviewer advocates for extension.ts). Shows file header + generates advocate epistles on refactor.",
      "status": "completed"
    },
    {
      "id": 7,
      "title": "Test: End-to-End Epistle Workflow",
      "description": "Test complete workflow: select code → record epistle → choose personas → edit dialog → save → see in registry. Verify file creation & registry update.",
      "status": "pending"
    },
    {
      "id": 8,
      "title": "Document: Epistle Workflow Guide for Users",
      "description": "Write guide: how to use epistles in extension, when to record, how to search & link. Include teaching moments about epistles.",
      "status": "pending"
    }
  ],
  "log": [
    {
      "ts": "2025-10-28T23:45:00Z",
      "type": "action",
      "data": {
        "actor": "claude-code",
        "action": "document",
        "object": "epistle-sidebar-completion",
        "qualifiers": [],
        "confidence": 0.95,
        "evidence": {
          "repo": "vscode-rhizome",
          "branch": "feature/utilities",
          "commit": "d611653",
          "path": null,
          "lines": null,
          "note": "Implemented Epistle Registry Sidebar (Step 4): VSCode tree view with multi-mode filtering (by type/persona/date/flight-plan), search capability, and integration with right-click menus. Added 15 tests covering categorization, navigation, and filtering. All tests passing."
        },
        "agent": {
          "name": null,
          "prompt": null
        },
        "act": null,
        "intent": null,
        "what": "Completed Step 4: Epistle Registry Sidebar",
        "timestamp": "2025-10-28T23:45:00Z"
      }
    },
    {
      "ts": "2025-10-28T23:55:00Z",
      "type": "action",
      "data": {
        "actor": "claude-code",
        "action": "document",
        "object": "flight-plan-linking-completion",
        "qualifiers": [],
        "confidence": 0.95,
        "evidence": {
          "repo": "vscode-rhizome",
          "branch": "feature/utilities",
          "commit": "8f802ac",
          "path": null,
          "lines": null,
          "note": "Implemented Flight Plan Linking (Step 5): Smart linking dialog that suggests active flight plan as default, browse other flight plans, or skip. New module flightPlanIntegration.ts provides helpers for reading active FP, querying all FPs, and formatting summary. Command 'showFlightPlanEpistles' reveals all epistles linked to active work. Epistles now track their associated flight plan for audit trail."
        },
        "agent": {
          "name": null,
          "prompt": null
        },
        "act": null,
        "intent": null,
        "what": "Completed Step 5: Flight Plan Linking",
        "timestamp": "2025-10-28T23:55:00Z"
      }
    },
    {
      "ts": "2025-10-29T00:15:00Z",
      "type": "action",
      "data": {
        "actor": "claude-code",
        "action": "document",
        "object": "file-advocate-completion",
        "qualifiers": [],
        "confidence": 0.95,
        "evidence": {
          "repo": "vscode-rhizome",
          "branch": "feature/utilities",
          "commit": "7eb6fb1",
          "path": null,
          "lines": null,
          "note": "Implemented Persona Advocates for Files (Step 6): New fileAdvocate.ts module analyzes file structure (imports, exports, complexity, role). Two command handlers: recordFileAdvocateEpistle creates letter epistle with persona's file perspective, addFileAdvocateComment inserts header comment. File roles detected: entry-point, utility, generator, registry, ui-provider. Concerns analyzed: error handling, complexity, documentation density. 20+ tests covering all code paths. Integration with epistleCommands.ts and extension.ts. Right-click menus in editor and file explorer. All 114 tests passing."
        },
        "agent": {
          "name": null,
          "prompt": null
        },
        "act": null,
        "intent": null,
        "what": "Completed Step 6: Persona Advocates for Files",
        "timestamp": "2025-10-29T00:15:00Z"
      }
    }
  ],
  "personas": {
    "active": [
      "rhizome"
    ],
    "conducting": "rhizome",
    "voices": {
      "una": {
        "active": true,
        "mode": "guide",
        "archive": []
      },
      "bro": {
        "active": true,
        "mode": "executor",
        "archive": []
      },
      "root": {
        "active": true,
        "mode": "reasoner",
        "archive": []
      }
    }
  },
  "phase": {
    "current": "kitchen_table",
    "entered_at": "2025-10-28T23:00:00Z",
    "transitions": []
  },
  "sprouts": [],
  "design_decisions": {
    "epistle_formats": "Three formats: (1) Letter - file-based .md epistles in .rhizome/plugins/epistles/, (2) Inline - comment blocks embedded in code, (3) Dynamic - generated personas from source files",
    "epistle_storage": "Letter epistles in .rhizome/plugins/epistles/ (shared with rhizome CLI); Inline epistles stored as comments in source files; Dynamic personas cached/temporary",
    "registry_format": "Same as rhizome: registry.ndjson (line-delimited JSON); tracks all three epistle types",
    "cli_integration": "Use rhizome epistle commands when available; fallback to extension CLI; use rhizome persona commands for dynamic persona synthesis",
    "ui_location": "Right-click context menu (with submenu for format choice) + sidebar view tree",
    "persona_selection": "Quick picker with curated personas + 'All Personas' option + 'Create from file' option for dynamic personas",
    "context_linking": "Epistles can reference flight plans, personas, docs, code selections; dynamic personas linked to source file analysis",
    "dynamic_persona_approach": "Analyze file using AST or heuristics (imports, error patterns, naming, structure); feed analysis to rhizome persona command to synthesize temporary persona"
  },
  "learning_objectives": [
    "Understand epistle system as multi-persona recording medium",
    "Learn three epistle formats: letter (file), inline (comment), dynamic (file-derived persona)",
    "Discover when to record an epistle (design decisions, refactors, architecture questions)",
    "Practice linking epistles to flight plans and personas",
    "See epistles as audit trail + teaching tool",
    "Understand how to synthesize personas that represent a file's architectural voice",
    "Learn when to use dynamic personas (code review, architecture discussions, file advocacy)"
  ],
  "success_criteria": [
    "✓ Can record letter epistle from code selection via right-click",
    "✓ Can insert inline epistle (comment block) directly in code",
    "✓ Can generate dynamic persona from source file analysis",
    "✓ Letter epistles created with correct format & metadata",
    "✓ Inline epistles formatted with language-aware comments",
    "✓ Dynamic personas named and cached for reuse",
    "✓ Registry updated for all three epistle types",
    "✓ Can browse epistles in sidebar (filterable by type)",
    "✓ Can filter epistles by persona, date, topic, format",
    "✓ Epistles link to flight plans and source files",
    "✓ Persona advocates work for extension files",
    "✓ Dynamic personas appear in persona picker",
    "✓ Documentation explains all three workflow + teaching moments"
  ]
}
