"use strict";var Z=Object.create;var b=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var ee=Object.getPrototypeOf,te=Object.prototype.hasOwnProperty;var oe=(e,o)=>{for(var t in o)b(e,t,{get:o[t],enumerable:!0})},j=(e,o,t,n)=>{if(o&&typeof o=="object"||typeof o=="function")for(let i of X(o))!te.call(e,i)&&i!==t&&b(e,i,{get:()=>o[i],enumerable:!(n=Q(o,i))||n.enumerable});return e};var f=(e,o,t)=>(t=e!=null?Z(ee(e)):{},j(o||!e||!e.__esModule?b(t,"default",{value:e,enumerable:!0}):t,e)),ne=e=>j(b({},"__esModule",{value:!0}),e);var he={};oe(he,{activate:()=>ue,deactivate:()=>pe});module.exports=ne(he);var P=f(require("vscode"));var s=f(require("vscode"));var k=f(require("vscode"));var N=f(require("vscode")),{execSync:O}=require("child_process");async function q(e,o,t=3e4,n){let i=n||N.workspace.workspaceFolders?.[0]?.uri.fsPath,l=new Promise((d,c)=>{try{let m=O(`rhizome query --persona ${o}`,{input:e,encoding:"utf-8",timeout:t,cwd:i,stdio:["pipe","pipe","pipe"],maxBuffer:10485760});d(m)}catch(m){c(m)}}),a=new Promise((d,c)=>{setTimeout(()=>{c(new Error(`${o} timed out after ${t}ms`))},t+1e3)});return Promise.race([l,a])}async function $(){let e=N.workspace.workspaceFolders?.[0]?.uri.fsPath;try{try{let o=O("rhizome persona list --json",{encoding:"utf-8",timeout:5e3,stdio:"pipe",cwd:e}),t=JSON.parse(o),n=new Map;for(let[i,l]of Object.entries(t)){let a=l.role||"-";n.set(i,a)}return n}catch{let t=O("rhizome persona list",{encoding:"utf-8",timeout:5e3,stdio:"pipe",cwd:e}),n=new Map,i=t.split(`
`);for(let l of i){if(!l.trim())continue;let a=l.match(/^\s*(\S+)\s+\|\s+role:\s+(.+?)\s+\|\s+source:/);if(a){let d=a[1].trim(),c=a[2].trim();n.set(d,c)}}return n}}catch{return new Map([["don-socratic","Socratic questioning"],["dev-guide","Mentor: What were you trying to accomplish?"],["code-reviewer","Skeptic: What's your evidence?"],["ux-advocate","Curator: Have we watched someone use this?"],["dev-advocate","Strategist: What trade-off are we making?"]])}}var r=f(require("vscode"));var U=f(require("fs")),E=f(require("os")),u=f(require("path")),H=require("child_process"),T="rhizome",se=[u.join(E.homedir(),".local","bin",T),u.join(E.homedir(),"bin",T),u.join(E.homedir(),".rhizome","bin",T),"/usr/local/bin/rhizome","/usr/bin/rhizome"];function ie(){let e=process.env.RHIZOME_CUSTOM_PATHS;return e?e.split(u.delimiter).map(o=>o.trim()).filter(o=>o.length>0):[]}function re(){let e=[...ie(),...se],o=new Set,t=[];for(let n of e){let i=u.normalize(n);o.has(i)||(o.add(i),t.push(i))}return t}function ae(e=U.existsSync){for(let o of re())if(e(o))return o;return null}function R(){if(ae())return!0;try{return(0,H.execSync)(`${T} --version`,{encoding:"utf-8",timeout:2e3,stdio:"pipe"}),!0}catch{return!1}}function D(){let e=u.join(E.homedir(),".local","bin"),o=process.env.PATH??"",t=o.length>0?o.split(u.delimiter):[];t.includes(e)||(t.unshift(e),process.env.PATH=t.join(u.delimiter))}var{execSync:I}=require("child_process"),Ee=require("fs"),Ie=require("path");async function S(e){if(!R())if(await le()){let n=await r.window.showErrorMessage("rhizome CLI not found. You are a member of Unity-Environmental-University. Install rhizome now?","Install rhizome","View Guide");if(n==="Install rhizome")try{return r.window.showInformationMessage("Installing rhizome..."),I("npm install -g @rhizome/cli",{encoding:"utf-8",timeout:6e4,stdio:"inherit"}),r.window.showInformationMessage("rhizome installed successfully!"),R()?await S(e):(r.window.showWarningMessage("Installation completed but rhizome still not found in PATH. You may need to restart VSCode."),!1)}catch(i){return r.window.showErrorMessage(`Failed to install rhizome: ${i.message}`),!1}else n==="View Guide"&&r.env.openExternal(r.Uri.parse("https://github.com/your-rhizome-repo#installation"));return!1}else return await r.window.showWarningMessage("rhizome CLI not found. Please install it to use vscode-rhizome.","View Installation Guide")==="View Installation Guide"&&r.env.openExternal(r.Uri.parse("https://github.com/your-rhizome-repo#installation")),!1;let o=r.Uri.joinPath(r.Uri.file(e),".rhizome");try{return await r.workspace.fs.stat(o),await K(e)}catch{try{return r.window.showInformationMessage("Initializing rhizome in workspace..."),I("rhizome init --force",{cwd:e,encoding:"utf-8",timeout:1e4}),r.window.showInformationMessage("Rhizome initialized in workspace"),await K(e)}catch(t){return r.window.showErrorMessage(`Failed to initialize rhizome: ${t.message}`),!1}}}async function K(e){let o=r.Uri.joinPath(r.Uri.file(e),".rhizome","config.json");try{if(process.env.OPENAI_API_KEY)return!0;if(await r.workspace.fs.stat(o)){let d=await r.workspace.fs.readFile(o),c=JSON.parse(new TextDecoder().decode(d));if(c.ai?.openai_key)return process.env.OPENAI_API_KEY=c.ai.openai_key,!0}}catch{}let t=await r.window.showInputBox({prompt:"Enter your OpenAI API key (stored locally in .rhizome/config.json)",password:!0,ignoreFocusOut:!0});if(!t)return r.window.showWarningMessage("OpenAI API key is required for don-socratic"),!1;let n=t.trim();if(/^\s*OPENAI_API_KEY\s*=/i.test(n)||n.includes("="))return r.window.showErrorMessage('Please enter only the OpenAI secret value (omit any "OPENAI_API_KEY=" prefix).'),!1;if(!/^sk-(proj-)?[A-Za-z0-9_-]{20,}$/.test(n))return r.window.showErrorMessage(`That doesn't look like an OpenAI API key (expected to start with "sk-" and contain letters, numbers, "-" or "_").`),!1;if(!await ce(n))return!1;try{let a=r.Uri.joinPath(r.Uri.file(e),".rhizome"),d=r.Uri.joinPath(a,"config.json"),c={};try{let p=await r.workspace.fs.readFile(d);c=JSON.parse(new TextDecoder().decode(p))}catch{}c.ai||(c.ai={}),c.ai.openai_key=n;let m=new TextEncoder().encode(JSON.stringify(c,null,2));return await r.workspace.fs.writeFile(d,m),process.env.OPENAI_API_KEY=n,await de(e,".rhizome/config.json"),r.window.showInformationMessage("OpenAI API key configured and stored securely"),!0}catch(a){return r.window.showErrorMessage(`Failed to save API key: ${a.message}`),!1}}async function ce(e){try{let o=await fetch("https://api.openai.com/v1/models",{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(o.ok)return!0;let t=await o.text(),n="OpenAI rejected the provided API key.";try{let i=JSON.parse(t);i?.error?.message&&(n+=` ${i.error.message}`)}catch{t&&(n+=` ${t}`)}return r.window.showErrorMessage(n.trim()),!1}catch(o){return r.window.showErrorMessage(`Failed to validate OpenAI API key: ${o.message}`),!1}}async function de(e,o){let t=r.Uri.joinPath(r.Uri.file(e),".gitignore"),n="";try{let i=await r.workspace.fs.readFile(t);n=new TextDecoder().decode(i)}catch{}if(!n.includes(o)){n+=(n.endsWith(`
`)?"":`
`)+o+`
`;let i=new TextEncoder().encode(n);await r.workspace.fs.writeFile(t,i)}}async function le(){try{I("gh auth status",{encoding:"utf-8",timeout:2e3,stdio:"pipe"})}catch{return!1}try{if(I("git config user.organization",{encoding:"utf-8",timeout:2e3,stdio:"pipe"}).trim()==="Unity-Environmental-University")return!0}catch{}try{return I("gh org list",{encoding:"utf-8",timeout:5e3}).split(`
`).map(o=>o.trim()).filter(o=>o.length>0).includes("Unity-Environmental-University")}catch{return!1}}async function C(e,o,t,n){let i=k.workspace.workspaceFolders?.[0]?.uri.fsPath;if(!i)throw k.window.showErrorMessage("No workspace folder open"),new Error("No workspace folder");if(!await S(i))throw k.window.showErrorMessage("Could not initialize rhizome. Check workspace permissions."),new Error("Rhizome initialization failed");return await q(t,e,3e4,i)}var me=f(require("vscode"));function M(e){return e==="typescript"||e==="javascript"?"typescript":e==="python"?"python":null}function W(e,o,t="//"){let n=[],i=/(?:line|lines?)\s*(\d+)(?:-(\d+))?:?\s*(.+?)(?=line|\n|$)/gi,l;for(;(l=i.exec(e))!==null;){let a=parseInt(l[1],10)-1,d=l[2]?parseInt(l[2],10)-1:a,c=l[3].trim(),m=o.slice(Math.max(0,a),Math.min(o.length,d+1)).join(`
`);a>=0&&a<o.length&&n.push({lineNumber:a,comment:`${t} ${c}`,context:m})}return n.length===0&&n.push({lineNumber:0,comment:`${t}
${t} REVIEW:
${e.split(`
`).map(a=>`${t} ${a}`).join(`
`)}`}),n}function F(e,o){return e.map((t,n)=>{let i=t.lineNumber+1,l=o[t.lineNumber]||"";return`[${n+1}] Line ${i}:
${t.comment}

${l}
`}).join(`
---

`)}var Y=async()=>{let e=s.window.activeTextEditor;if(!e||e.selection.isEmpty){s.window.showErrorMessage("Please select code");return}let o=e.document.getText(e.selection).trim(),t=await $();if(t.size===0){s.window.showErrorMessage("No personas available");return}let n=Array.from(t.entries()).map(([a,d])=>({label:a,description:d})),i=await s.window.showQuickPick(n,{placeHolder:"Choose a persona"});if(!i)return;let l=await s.window.showInputBox({title:`Ask ${i.label}`,prompt:"What would you like to ask?",ignoreFocusOut:!0});if(l)try{await s.window.withProgress({location:s.ProgressLocation.Notification,title:`${i.label} is thinking...`,cancellable:!1},async a=>{a.report({message:"Waiting for response..."});let d=`${l}

${o}`,c=await C(i.label,i.label,d),p=M(e.document.languageId)==="python"?"#":"//",x=c.split(`
`).map(v=>`${p} ${v}`).join(`
`),y=e.selection.start,h=new s.TextEdit(new s.Range(y,y),`${p} === ${i.label} says:
${x}
`),w=new s.WorkspaceEdit;w.set(e.document.uri,[h]),await s.workspace.applyEdit(w),a.report({message:"Response inserted! \u2713"})})}catch(a){s.window.showErrorMessage(`Failed: ${a.message}`)}};var V=async()=>{let e=s.window.activeTextEditor;if(!e||e.selection.isEmpty){s.window.showErrorMessage("Please select code to review");return}let o=e.document.getText(e.selection);try{let t=M(e.document.languageId),n=t==="python"?"#":"//";await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Red pen review (don-socratic)...",cancellable:!1},async i=>{i.report({message:"Analyzing code..."});let l=`You are the don-socratic. Read this. What questions does it raise?

For each place that invites questioning, write a comment (in ${n} syntax):

Format: "${n} Line X: [observation]. [question]?"

Examples:
${n} Line 5: User could be undefined. What happens then?
${n} Lines 12-15: Checking membership in an array. Have you measured the cost?

Here:

${o}`,a=await C("don-socratic","don-socratic",l),d=e.document.getText().split(`
`),c=W(a,d,n),m=F(c,d),p=await s.window.showInformationMessage(`Found ${c.length} suggested comments. Insert them?`,"Show Preview","Insert All","Cancel");if(p==="Cancel")return;if(p==="Show Preview"){let h=await s.workspace.openTextDocument({language:t==="python"?"python":"typescript",content:m});await s.window.showTextDocument(h);return}let x=[...c].sort((h,w)=>w.lineNumber-h.lineNumber).map(h=>{let w=new s.Position(h.lineNumber,0);return new s.TextEdit(new s.Range(w,w),`${n} \u{1F534} ${h.comment}
`)}),y=new s.WorkspaceEdit;y.set(e.document.uri,x),await s.workspace.applyEdit(y),i.report({message:`${c.length} reviews inserted! \u2713`})})}catch(t){s.window.showErrorMessage(`Failed: ${t.message}`)}},B=async e=>{let o=e,t;if(o)t=s.window.visibleTextEditors.find(n=>n.document.uri.fsPath===o.fsPath);else{if(t=s.window.activeTextEditor,!t){s.window.showErrorMessage("No file open");return}o=t.document.uri}try{let n=await s.workspace.fs.readFile(o),i=new TextDecoder().decode(n),l=await s.workspace.openTextDocument(o),a=M(l.languageId),d=a==="python"?"#":"//",c=i,m=0,p=i.split(`
`).length;t&&!t.selection.isEmpty&&(c=t.document.getText(t.selection),m=t.selection.start.line,p=t.selection.end.line),await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Red pen review...",cancellable:!1},async z=>{let x=t&&!t.selection.isEmpty?"Analyzing selection...":"Analyzing entire file...";z.report({message:x});let y=`You are the don-socratic. Read this. What questions does it raise?

For each place that invites questioning, write a comment (in ${d} syntax):

Format: "${d} Line X: [observation]. [question]?"

Examples:
${d} Line 12: Function imports from three places. Why those three?
${d} Lines 45-50: Happy path handled. What about the sad one?

Here:

${c}`,h=await C("don-socratic","don-socratic",y),w=i.split(`
`),v=W(h,w,d);t&&!t.selection.isEmpty&&(v=v.filter(g=>g.lineNumber>=m&&g.lineNumber<=p));let G=F(v,w),_=await s.window.showInformationMessage(`Found ${v.length} suggested comments. Insert them?`,"Show Preview","Insert All","Cancel");if(_==="Cancel")return;if(_==="Show Preview"){let g=await s.workspace.openTextDocument({language:a==="python"?"python":"typescript",content:G});await s.window.showTextDocument(g);return}let we=await s.window.showTextDocument(l),J=[...v].sort((g,A)=>A.lineNumber-g.lineNumber).map(g=>{let A=new s.Position(g.lineNumber,0);return new s.TextEdit(new s.Range(A,A),`${d} \u{1F534} ${g.comment}
`)}),L=new s.WorkspaceEdit;L.set(o,J),await s.workspace.applyEdit(L),z.report({message:`${v.length} reviews inserted! \u2713`})})}catch(n){s.window.showErrorMessage(`Failed: ${n.message}`)}};function ue(e){console.log("[vscode-rhizome] ACTIVATION START"),D(),e.subscriptions.push(new P.Disposable(()=>{})),(async()=>{try{let o=await $();console.log(`[vscode-rhizome] ${o.size} personas available`)}catch(o){console.log("[vscode-rhizome] ERROR fetching personas:",o.message)}})(),e.subscriptions.push(P.commands.registerCommand("vscode-rhizome.askPersona",Y)),e.subscriptions.push(P.commands.registerCommand("vscode-rhizome.redPenReview",V)),e.subscriptions.push(P.commands.registerCommand("vscode-rhizome.redPenReviewFile",B)),console.log("[vscode-rhizome] ACTIVATION COMPLETE")}function pe(){console.log("[vscode-rhizome] DEACTIVATION")}0&&(module.exports={activate,deactivate});
