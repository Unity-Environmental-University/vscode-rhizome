{
  "version": 3,
  "sources": ["../node_modules/@babel/parser/src/util/location.ts", "../node_modules/@babel/parser/src/parse-error/module-errors.ts", "../node_modules/@babel/parser/src/parse-error/to-node-description.ts", "../node_modules/@babel/parser/src/parse-error/standard-errors.ts", "../node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts", "../node_modules/@babel/parser/src/parse-error/parse-expression-errors.ts", "../node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../node_modules/@babel/parser/src/parse-error.ts", "../node_modules/@babel/parser/src/options.ts", "../node_modules/@babel/parser/src/plugins/estree.ts", "../node_modules/@babel/parser/src/tokenizer/context.ts", "../node_modules/@babel/parser/src/tokenizer/types.ts", "../node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts", "../node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts", "../node_modules/@babel/parser/src/util/identifier.ts", "../node_modules/@babel/parser/src/util/scope.ts", "../node_modules/@babel/parser/src/plugins/flow/scope.ts", "../node_modules/@babel/parser/src/plugins/flow/index.ts", "../node_modules/@babel/parser/src/plugins/jsx/xhtml.ts", "../node_modules/@babel/parser/src/util/whitespace.ts", "../node_modules/@babel/parser/src/plugins/jsx/index.ts", "../node_modules/@babel/parser/src/plugins/typescript/scope.ts", "../node_modules/@babel/parser/src/util/production-parameter.ts", "../node_modules/@babel/parser/src/parser/base.ts", "../node_modules/@babel/parser/src/parser/comments.ts", "../node_modules/@babel/parser/src/tokenizer/state.ts", "../node_modules/@babel/babel-helper-string-parser/src/index.ts", "../node_modules/@babel/parser/src/tokenizer/index.ts", "../node_modules/@babel/parser/src/util/class-scope.ts", "../node_modules/@babel/parser/src/util/expression-scope.ts", "../node_modules/@babel/parser/src/parser/util.ts", "../node_modules/@babel/parser/src/parser/node.ts", "../node_modules/@babel/parser/src/parser/lval.ts", "../node_modules/@babel/parser/src/plugins/typescript/index.ts", "../node_modules/@babel/parser/src/plugins/placeholders.ts", "../node_modules/@babel/parser/src/plugins/v8intrinsic.ts", "../node_modules/@babel/parser/src/plugin-utils.ts", "../node_modules/@babel/parser/src/parser/expression.ts", "../node_modules/@babel/parser/src/parser/statement.ts", "../node_modules/@babel/parser/src/parser/index.ts", "../node_modules/@babel/parser/src/index.ts", "../src/extension.ts", "../src/stubGenerator.ts", "../src/voice/voiceControlPanel.ts", "../src/voice/openaiSpeechClient.ts", "../src/voice/voiceTranscriber.ts", "../src/voice/voiceUsageTracker.ts", "../src/utils/rhizomePath.ts"],
  "sourcesContent": ["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string | undefined;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end!;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverDiscardElement:\n    \"'void' must be followed by an expression when not used in a binding position.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script` or in the bare case statement.\",\n  UnexpectedVoidPattern: \"Unexpected void binding.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  VoidPatternCatchClauseParam:\n    \"A void binding can not be the catch clause parameter. Use `try { ... } catch { ... }` if you want to discard the caught error.\",\n  VoidPatternInitializer: \"A void binding may not have an initializer.\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction:\n    \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nexport default {\n  ParseExpressionEmptyInput:\n    \"Unexpected parseExpression() input: The input is empty or contains only comments.\",\n  ParseExpressionExpectsEOF: ({ unexpected }: { unexpected: number }) =>\n    `Unexpected parseExpression() input: The input should contain exactly one expression, but the first expression is followed by the unexpected character \\`${String.fromCodePoint(unexpected)}\\`.`,\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: process.env.BABEL_8_BREAKING\n    ? 'Topic references are only supported when using the `\"proposal\": \"hack\"` version of the pipeline proposal.'\n    : 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  ...(process.env.BABEL_8_BREAKING\n    ? {}\n    : {\n        // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n        // are retained for backwards compatibility\n        // with the deprecated smart-mix pipe operator proposal plugin.\n        // They are subject to removal in a future major version.\n        PipelineBodyNoArrow:\n          'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n        PipelineBodySequenceExpression:\n          \"Pipeline body may not be a comma-separated sequence expression.\",\n        PipelineHeadSequenceExpression:\n          \"Pipeline head should not be a comma-separated sequence expression.\",\n        PipelineTopicUnused:\n          \"Pipeline is in topic style but does not use topic reference.\",\n        PrimaryTopicNotAllowed:\n          \"Topic reference was used in a lexical context without topic binding.\",\n        PrimaryTopicRequiresSmartPipeline:\n          'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n      }),\n} satisfies ParseErrorTemplates;\n", "import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport ParseExpressionErrors from \"./parse-error/parse-expression-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum(ParseExpressionErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n", "import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"commonjs\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  /**\n   * By default, super calls are not allowed outside of a method.\n   * Set this to true to accept such code.\n   */\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, yield use is not allowed outside of a generator function.\n   * Set this to true to accept such code.\n   */\n\n  allowYieldOutsideFunction?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"commonjs\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   *\n   * Use \"commonjs\" to parse code that is intended to be run in a CommonJS environment such as Node.js.\n   */\n  sourceType?: SourceType;\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowYieldOutsideFunction = 1 << 5,\n  AllowUndeclaredExports = 1 << 6,\n  Ranges = 1 << 7,\n  Tokens = 1 << 8,\n  CreateImportExpressions = 1 << 9,\n  CreateParenthesizedExpressions = 1 << 10,\n  ErrorRecovery = 1 << 11,\n  AttachComment = 1 << 12,\n  AnnexB = 1 << 13,\n}\n\ntype KeepOptionalKeys = \"sourceFilename\" | \"strictMode\";\nexport type OptionsWithDefaults = Omit<Required<Options>, KeepOptionalKeys> &\n  Pick<Options, KeepOptionalKeys>;\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, super outside a method is not considered an error.\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: undefined,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  if (options.sourceType === \"commonjs\") {\n    if (opts.allowAwaitOutsideFunction != null) {\n      throw new Error(\n        \"The `allowAwaitOutsideFunction` option cannot be used with `sourceType: 'commonjs'`.\",\n      );\n    }\n    if (opts.allowReturnOutsideFunction != null) {\n      throw new Error(\n        \"`sourceType: 'commonjs'` implies `allowReturnOutsideFunction: true`, please remove the `allowReturnOutsideFunction` option or use `sourceType: 'script'`.\",\n      );\n    }\n    if (opts.allowNewTargetOutsideFunction != null) {\n      throw new Error(\n        \"`sourceType: 'commonjs'` implies `allowNewTargetOutsideFunction: true`, please remove the `allowNewTargetOutsideFunction` option or use `sourceType: 'script'`.\",\n      );\n    }\n  }\n\n  return options;\n}\n", "import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { ParseResult, File } from \"../index.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): ParseResult<File> {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n    estreeParseChainExpression(\n      node: N.Expression,\n      endLoc: Position,\n    ): N.EstreeChainExpression {\n      const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n      chain.expression = node;\n      return this.finishNodeAt(chain, \"ChainExpression\", endLoc);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      // @ts-expect-error delete non-optional properties\n      delete directive.value;\n\n      this.castNodeTo(expression, \"Literal\");\n      expression.raw = expression.extra!.raw;\n      expression.value = expression.extra!.expressionValue;\n\n      const stmt = this.castNodeTo(directive, \"ExpressionStatement\");\n      stmt.expression = expression;\n      stmt.directive = expression.extra!.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    /**\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     * This hook will be implemented by the typescript plugin.\n     *\n     * Note: This hook should be manually invoked when we change the `type` of a given AST\n     * node, to ensure that the optional properties are correctly filled.\n     * @param node The AST node finished by finishNode\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillOptionalPropertiesForTSESLint(node: NodeType) {}\n\n    cloneEstreeStringLiteral(node: N.EstreeLiteral): N.EstreeLiteral {\n      const { start, end, loc, range, raw, value } = node;\n      const cloned = Object.create(node.constructor.prototype);\n      cloned.type = \"Literal\";\n      cloned.start = start;\n      cloned.end = end;\n      cloned.loc = loc;\n      cloned.range = range;\n      cloned.raw = raw;\n      cloned.value = value;\n      return cloned;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      // @ts-expect-error delete non-optional properties\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      // @ts-expect-error delete non-optional properties\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      return this.castNodeTo(node, \"PrivateIdentifier\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ):\n      | N.EstreeProperty\n      | N.EstreeMethodDefinition\n      | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error delete non-optional properties\n      delete funcNode.kind;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(funcNode, typeParameters);\n      }\n      const valueNode = this.castNodeTo(\n        funcNode as N.MethodLike,\n        process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"typescript\") &&\n          !funcNode.body\n          ? \"TSEmptyBodyFunctionExpression\"\n          : \"FunctionExpression\",\n      );\n      (\n        node as unknown as Undone<\n          | N.EstreeProperty\n          | N.EstreeMethodDefinition\n          | N.EstreeTSAbstractMethodDefinition\n        >\n      ).value = valueNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (process.env.BABEL_8_BREAKING && this.hasPlugin(\"typescript\")) {\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        if (node.abstract) {\n          // @ts-expect-error remove abstract from TSAbstractMethodDefinition\n          delete node.abstract;\n          return this.finishNode(\n            // @ts-expect-error cast methods to estree types\n            node as Undone<N.EstreeTSAbstractMethodDefinition>,\n            \"TSAbstractMethodDefinition\",\n          );\n        }\n      }\n      if (type === \"ObjectMethod\") {\n        if ((node as any as N.ObjectMethod).kind === \"method\") {\n          (node as any as N.EstreeProperty).kind = \"init\";\n        }\n        (node as any as N.EstreeProperty).shorthand = false;\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeProperty>,\n          \"Property\",\n        );\n      } else {\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeMethodDefinition>,\n          \"MethodDefinition\",\n        );\n      }\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        delete propertyNode.abstract;\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseClassAccessorProperty(\n      this: Parser,\n      node: N.ClassAccessorProperty,\n    ): any {\n      const accessorPropertyNode = super.parseClassAccessorProperty(node);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return accessorPropertyNode;\n        }\n      }\n      if (accessorPropertyNode.abstract && this.hasPlugin(\"typescript\")) {\n        delete accessorPropertyNode.abstract;\n        this.castNodeTo(accessorPropertyNode, \"TSAbstractAccessorProperty\");\n      } else {\n        this.castNodeTo(accessorPropertyNode, \"AccessorProperty\");\n      }\n      return accessorPropertyNode;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        this.castNodeTo(node, \"Property\");\n      }\n\n      return node as any;\n    }\n\n    finishObjectProperty(node: Undone<N.ObjectProperty>): N.ObjectProperty {\n      (node as unknown as Undone<N.EstreeProperty>).kind = \"init\";\n      return this.finishNode(\n        node as unknown as Undone<N.EstreeProperty>,\n        \"Property\",\n      ) as any;\n    }\n\n    isValidLVal(\n      type: string,\n      disallowCallExpression: boolean,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(\n            type,\n            disallowCallExpression,\n            isUnparenthesizedInAssign,\n            binding,\n          );\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        this.castNodeTo(node, \"ImportExpression\");\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        if (!process.env.BABEL_8_BREAKING) {\n          // compatibility with previous ESTree AST\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            (node.arguments[1] as N.Expression) ?? null;\n        }\n        // arguments isn't optional in the type definition\n        // @ts-expect-error delete non-optional properties\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        // @ts-expect-error delete non-optional properties\n        delete node.callee;\n      } else if (node.type === \"OptionalCallExpression\") {\n        this.castNodeTo(node, \"CallExpression\");\n      } else {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc!;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            this.castNodeTo(node, \"ExportAllDeclaration\");\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            // @ts-expect-error The ESTree AST shape differs from the Babel AST\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              // @ts-expect-error comparing undefined and number\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    stopParseSubscript(base: N.Expression, state: N.ParseSubscriptState) {\n      const node = super.stopParseSubscript(base, state);\n      if (state.optionalChainMember) {\n        return this.estreeParseChainExpression(node, base.loc.end);\n      }\n      return node;\n    }\n\n    parseMember(\n      base: N.Expression,\n      startLoc: Position,\n      state: N.ParseSubscriptState,\n      computed: boolean,\n      optional: boolean,\n    ) {\n      const node = super.parseMember(base, startLoc, state, computed, optional);\n      if (node.type === \"OptionalMemberExpression\") {\n        this.castNodeTo(node, \"MemberExpression\");\n      } else {\n        node.optional = false;\n      }\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    castNodeTo<T extends N.Node[\"type\"]>(\n      node: N.Node,\n      type: T,\n    ): Extract<N.Node, { type: T }> {\n      const result = super.castNodeTo(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      this.fillOptionalPropertiesForTSESLint(cloned);\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Literal\") {\n        return this.cloneEstreeStringLiteral(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    // Override for TS-ESLint that does not allow optional AST properties\n    finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n      const result = super.finishNode(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc!,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  // TODO: Remove this in Babel 8\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088f\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5c\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdc-\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7dc\\ua7f1-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1add\\u1ae0-\\u1aeb\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,7,25,39,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,5,57,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,24,43,261,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,33,24,3,24,45,74,6,0,67,12,65,1,2,0,15,4,10,7381,42,31,98,114,8702,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,208,30,2,2,2,1,2,6,3,4,10,1,225,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4381,3,5773,3,7472,16,621,2467,541,1507,4938,6,8489];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,78,5,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,199,7,137,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,55,9,266,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,233,0,3,0,8,1,6,0,475,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION_BASE) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get allowNewTarget() {\n    return (this.currentThisScopeFlags() & ScopeFlag.NEW_TARGET) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS_BASE) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (\n      (flags & ScopeFlag.CLASS_BASE) > 0 &&\n      (flags & ScopeFlag.FUNCTION_BASE) === 0\n    );\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS_BASE)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION_BASE) > 0;\n  }\n  get inBareCaseStatement() {\n    return (this.currentScope().flags & ScopeFlag.SWITCH) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop()!;\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION_BASE | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name) || 0;\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS_BASE) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name)!;\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc!.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | null,\n      N.FlowPredicate | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc!,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      }\n      throw this.unexpected();\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      const body: N.Statement[] = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        const bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc!,\n            );\n          }\n          body.push(super.parseImport(bodyNode));\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          body.push(this.flowParseDeclare(bodyNode, true));\n        }\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.default = false;\n            delete node.exportKind;\n            return this.castNodeTo(\n              node as N.ExportNamedDeclaration,\n              \"DeclareExportDeclaration\",\n            );\n          } else {\n            return this.castNodeTo(\n              node as N.ExportAllDeclaration,\n              \"DeclareExportAllDeclaration\",\n            );\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareTypeAlias\");\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareOpaqueType\");\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation | null {\n      if (this.reScan_lt() !== tt.lt) return null;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc!,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc!,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc!,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser() as [\n          N.FlowType,\n          N.FlowPredicate,\n        ];\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors!);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop()!;\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement | null>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement | null>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(close, isTuple, refExpressionErrors);\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (refExpressionErrors != null && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(\n      type: string,\n      disallowCallExpression: boolean,\n      isParenthesized: boolean,\n      binding: BindingFlag,\n    ) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(\n          type,\n          disallowCallExpression,\n          isParenthesized,\n          binding,\n        )\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault<P extends N.Pattern>(\n      startLoc?: Position | null,\n      left?: P | null,\n    ): P | N.AssignmentPattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = this.cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = this.cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node!;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters!,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState!;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters!,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser() as [\n            N.FlowType,\n            N.FlowPredicate,\n          ];\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node!, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments();\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState!;\n          return result.node;\n        }\n\n        throw arrow.error || result.error!;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments();\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments();\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              // @ts-expect-error NodeAny not supported\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              // @ts-expect-error NodeAny not supported\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              // @ts-expect-error NodeAny not supported\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  // @ts-expect-error NodeAny not supported\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: { [name: string]: string } = {\n  // @ts-expect-error __proto__ is not an actual property: https://github.com/microsoft/TypeScript/issues/38385\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc!);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name)!;\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name)! & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name)!;\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n", "import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node | null>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const node = commentWS.containingNode!;\n      const commentStart = commentWS.start;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"ImportExpression\":\n            adjustInnerComments(\n              node,\n              [node.source, node.options ?? null],\n              commentWS,\n            );\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members!, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import type { OptionsWithDefaults } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number = 0;\n\n  @bit accessor strict = false;\n\n  startIndex!: number;\n  curLine!: number;\n  lineStart!: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc!: Position;\n  endLoc!: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: OptionsWithDefaults): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position | null = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position | null = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position | null;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport type { OptionsWithDefaults } from \"../options.ts\";\nimport { OptionFlags } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: OptionsWithDefaults, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.lookaheadCharCodeSince(this.state.pos);\n  }\n\n  lookaheadCharCodeSince(pos: number): number {\n    return this.input.charCodeAt(this.nextTokenStartSince(pos));\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      loc: new SourceLocation(startLoc!, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      loc: new SourceLocation(startLoc!, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] | null =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    // @ts-expect-error comparing undefined and number\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments: comments!,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      (next === charCodes.leftCurlyBrace ||\n        (next === charCodes.leftSquareBracket &&\n          this.hasPlugin(\"recordAndTuple\")))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal!) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): any {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): any {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n", "import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop()!;\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\nimport type { Undone } from \"../parser/node.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M | V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Undone<Node>,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    if (this.input.startsWith(name, nameStart)) {\n      const nextCh = this.input.charCodeAt(nameStart + name.length);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc!.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc!);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node> | null>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null as T) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node: node!,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n      voidPatternLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc ||\n      !!voidPatternLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n\n    if (voidPatternLoc != null) {\n      this.raise(Errors.InvalidCoverDiscardElement, voidPatternLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (\n      this.inModule ||\n      this.optionFlags & OptionFlags.AllowAwaitOutsideFunction\n    ) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    if (this.optionFlags & OptionFlags.AllowYieldOutsideFunction) {\n      paramFlags |= ParamKind.PARAM_YIELD;\n    }\n    // The inModule flag ensures that the module block within a CommonJS source\n    // will be treated as an ES module.\n    const isCommonJS = !this.inModule && this.options.sourceType === \"commonjs\";\n    if (\n      isCommonJS ||\n      this.optionFlags & OptionFlags.AllowReturnOutsideFunction\n    ) {\n      paramFlags |= ParamKind.PARAM_RETURN;\n    }\n    this.prodParam.enter(paramFlags);\n    let scopeFlags = isCommonJS ? ScopeFlag.FUNCTION : ScopeFlag.PROGRAM;\n    if (this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction) {\n      scopeFlags |= ScopeFlag.NEW_TARGET;\n    }\n    if (process.env.BABEL_8_BREAKING) {\n      if (this.optionFlags & OptionFlags.AllowSuperOutsideMethod) {\n        scopeFlags |= ScopeFlag.SUPER | ScopeFlag.DIRECT_SUPER;\n      }\n    }\n    this.scope.enter(scopeFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to null\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKeyLoc**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n *   It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n  voidPatternLoc: Position | undefined | null = null;\n}\n", "import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type {\n  Comment,\n  Node as NodeType,\n  NodeBase,\n  EstreeLiteral,\n  Identifier,\n  Placeholder,\n  StringLiteral,\n} from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined!, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc!);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range![1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range![0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc!,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range![1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n\n  castNodeTo<T extends NodeType[\"type\"]>(\n    node: NodeType,\n    type: T,\n  ): Extract<NodeType, { type: T }> {\n    node.type = type;\n    return node as Extract<NodeType, { type: T }>;\n  }\n\n  cloneIdentifier<T extends Identifier | Placeholder>(node: T): T {\n    // We don't need to clone `typeAnnotations` and `optional`: because\n    // cloneIdentifier is only used in object shorthand and named import/export.\n    // Neither of them allow type annotations after the identifier or optional identifier\n    const { type, start, end, loc, range, name } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.name = name;\n    if (node.extra) cloned.extra = node.extra;\n    return cloned;\n  }\n\n  cloneStringLiteral<T extends StringLiteral | EstreeLiteral | Placeholder>(\n    node: T,\n  ): T {\n    const { type, start, end, loc, range, extra } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.extra = extra;\n    cloned.value = (node as StringLiteral).value;\n    return cloned;\n  }\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n  VoidPattern,\n} from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"CallExpression\" &&\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n      case \"VoidPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        this.castNodeTo(node, \"ObjectPattern\");\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        this.castNodeTo(node, \"ArrayPattern\");\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        this.castNodeTo(node, \"AssignmentPattern\");\n        // @ts-expect-error delete non-optional properties\n        delete node.operator;\n        if (node.left.type === \"VoidPattern\") {\n          this.raise(Errors.VoidPatternInitializer, node.left);\n        }\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        this.toAssignable(parenthesized!, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      this.castNodeTo(prop, \"RestElement\");\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (\n      | Expression\n      | SpreadElement\n      | RestElement\n      | VoidPattern\n      | AssignmentPattern\n      | null\n    )[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      this.toAssignableListItem(\n        exprList as (\n          | Expression\n          | SpreadElement\n          | RestElement\n          | VoidPattern\n          | AssignmentPattern\n        )[],\n        i,\n        isLHS,\n      );\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  toAssignableListItem(\n    exprList: (\n      | Expression\n      | SpreadElement\n      | RestElement\n      | VoidPattern\n      | AssignmentPattern\n    )[],\n    index: number,\n    isLHS: boolean,\n  ): void {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      this.castNodeTo(node, \"RestElement\");\n      const arg = node.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n      case \"VoidPattern\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<\n          Expression | SpreadElement | VoidPattern | AssignmentPattern | null\n        >\n      | ReadonlyArray<\n          Expression | RestElement | VoidPattern | AssignmentPattern | null\n        >,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<\n        Expression | SpreadElement | VoidPattern | AssignmentPattern | null\n      >\n    | ReadonlyArray<\n        Expression | RestElement | VoidPattern | AssignmentPattern | null\n      > {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<\n          Expression | SpreadElement | VoidPattern | AssignmentPattern | null\n        >\n      | ReadonlyArray<\n          Expression | RestElement | VoidPattern | AssignmentPattern | null\n        >,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    const argument = this.parseBindingAtom();\n    if (argument.type === \"VoidPattern\") {\n      this.raise(Errors.UnexpectedVoidPattern, argument);\n    }\n    node.argument = argument;\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n\n      case tt._void:\n        return this.parseVoidPattern(null);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags.ALLOW_EMPTY,\n  ): Array<Pattern | null>;\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags.IS_FUNCTION_PARAMS,\n  ): Array<Pattern | TSParameterProperty>;\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty | null> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty | null> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n          if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(\n              Errors.UnsupportedParameterDecorator,\n              this.state.startLoc,\n            );\n          }\n          // invariant: hasPlugin(\"decorators-legacy\")\n          while (this.match(tt.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    if (this.hasPlugin(\"discardBinding\") && this.match(tt._void)) {\n      prop.argument = this.parseVoidPattern(null);\n      this.raise(Errors.UnexpectedVoidPattern, prop.argument);\n    } else {\n      // Don't use parseRestBinding() as we only allow Identifier here.\n      prop.argument = this.parseIdentifier();\n    }\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseBindingElement(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n      this.resetStartLocationFromNode(left, decorators[0]);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault<P extends Pattern>(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: P | null,\n  ): P | AssignmentPattern;\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    if (left.type === \"VoidPattern\") {\n      this.raise(Errors.VoidPatternInitializer, left);\n    }\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param disallowCallExpression Whether to disallow `CallExpression` as an LVal.\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    disallowCallExpression: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n      case \"VoidPattern\":\n        return true;\n      case \"CallExpression\":\n        if (\n          !disallowCallExpression &&\n          !this.state.strict &&\n          this.optionFlags & OptionFlags.AnnexB\n        ) {\n          return true;\n        }\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @param disallowCallExpression Whether to disallow `CallExpression` as an LVal.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n    disallowCallExpression: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    } else if (type === \"VoidPattern\" && ancestor.type === \"CatchClause\") {\n      this.raise(Errors.VoidPatternCatchClauseParam, expression);\n    }\n\n    const unwrappedExpression = unwrapParenthesizedExpression(expression);\n    disallowCallExpression ||=\n      unwrappedExpression.type === \"CallExpression\" &&\n      (unwrappedExpression.callee.type === \"Import\" ||\n        unwrappedExpression.callee.type === \"Super\");\n    const validity = this.isValidLVal(\n      type,\n      disallowCallExpression,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n            true,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n        disallowCallExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n", "import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\n\nconst keywordAndTSRelationalOperator = /in(?:stanceof)?|as|satisfies/y;\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) => `Accessibility modifier already seen: '${modifier}'.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnAwaitUsingDeclaration: (modifier: TsModifier) =>\n    `'${modifier}' modifier cannot appear on an await using declaration.`,\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n\n  InvalidModifierOnUsingDeclaration: (modifier: TsModifier) =>\n    `'${modifier}' modifier cannot appear on a using declaration.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifier:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  UsingDeclarationInAmbientContext: (kind: \"using\" | \"await using\") =>\n    `'${kind}' declarations are not allowed in ambient contexts.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nfunction tsIsEntityName(\n  node: N.Expression,\n): node is N.MemberExpression | N.Identifier | N.TsInstantiationExpression {\n  if (node.extra?.parenthesized) {\n    return false;\n  }\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return !node.computed && tsIsEntityName(node.object);\n    case \"TSInstantiationExpression\":\n      return tsIsEntityName(node.expression);\n    default:\n      return false;\n  }\n}\n\nexport const enum tsParseEntityNameFlags {\n  NONE = 0b00,\n  ALLOW_RESERVED_WORDS = 0b01,\n  LEADING_THIS_AS_IDENTIFIER = 0b10,\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n      hasSeenStaticModifier?: boolean | null,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (hasSeenStaticModifier && this.match(tt._static)) {\n          return undefined;\n        }\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n          modified.static,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc!.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma)) {\n        node.options = this.tsParseImportTypeOptions();\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName(\n          tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n            tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n        );\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseImportTypeOptions(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      this.expect(tt.braceL);\n      const withProperty = this.startNode<N.ObjectProperty>();\n      if (this.isContextual(tt._with)) {\n        withProperty.method = false;\n        withProperty.key = this.parseIdentifier(true);\n        withProperty.computed = false;\n        withProperty.shorthand = false;\n      } else {\n        this.unexpected(null, tt._with);\n      }\n      this.expect(tt.colon);\n      withProperty.value = this.tsParseImportTypeWithPropertyValue();\n      node.properties = [this.finishObjectProperty(withProperty)];\n      this.eat(tt.comma);\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseImportTypeWithPropertyValue(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      const properties = [];\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        const type = this.state.type;\n        if (tokenIsIdentifier(type) || type === tt.string) {\n          properties.push(super.parsePropertyDefinition(null));\n        } else {\n          this.unexpected();\n        }\n        this.eat(tt.comma);\n      }\n      node.properties = properties;\n      this.next(); // eat }\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseEntityName(flags: tsParseEntityNameFlags): N.TsEntityName {\n      let entity: N.TsEntityName;\n      if (\n        flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS &&\n        this.match(tt._this)\n      ) {\n        if (flags & tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER) {\n          entity = this.parseIdentifier(true);\n        } else {\n          const node = this.startNode<N.ThisExpression>();\n          this.next();\n          entity = this.finishNode(node, \"ThisExpression\");\n        }\n      } else {\n        entity = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n      }\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName(\n        tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n      );\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n          );\n        } else {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n              tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n          );\n        }\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      | N.Identifier\n      | N.RestElement\n      | N.ObjectPattern\n      | N.ArrayPattern\n      | N.VoidPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: Undone<N.TsPropertySignature | N.TsMethodSignature>,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method = node as Undone<N.TsMethodSignature>;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property = node as Undone<N.TsPropertySignature>;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n        // Allow < here so that we can recover from get key<T> later\n        if (!this.match(tt.parenL) && !this.match(tt.lt)) {\n          this.unexpected(null, tt.parenL);\n        }\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const restStartLoc = this.state.startLoc;\n\n      const rest = this.eat(tt.ellipsis);\n      const { startLoc } = this.state;\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label!) {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc!,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAt<N.TsOptionalType>(startLoc);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(restStartLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsTemplateLiteralType | N.TsLiteralType {\n      if (process.env.BABEL_8_BREAKING) {\n        const startLoc = this.state.startLoc;\n        let curElt = this.parseTemplateElement(false);\n        const quasis = [curElt];\n        if (curElt.tail) {\n          const node = this.startNodeAt<N.TsLiteralType>(startLoc);\n          const literal = this.startNodeAt<N.TemplateLiteral>(startLoc);\n          literal.expressions = [];\n          literal.quasis = quasis;\n          node.literal = this.finishNode(literal, \"TemplateLiteral\");\n          return this.finishNode(node, \"TSLiteralType\");\n        } else {\n          const substitutions: N.TsType[] = [];\n          while (!curElt.tail) {\n            substitutions.push(this.tsParseType());\n            this.readTemplateContinuation();\n            quasis.push((curElt = this.parseTemplateElement(false)));\n          }\n          const node = this.startNodeAt<N.TsTemplateLiteralType>(startLoc);\n          node.types = substitutions;\n          node.quasis = quasis;\n          return this.finishNode(node, \"TSTemplateLiteralType\");\n        }\n      } else {\n        const node = this.startNode<N.TsLiteralType>();\n        node.literal = super.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary() as N.UnaryExpression;\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      const { startLoc } = this.state;\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAt<N.TsArrayType>(startLoc);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAt<N.TsIndexedAccessType>(startLoc);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc!,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.isLookaheadContextual(\"new\")\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          if (process.env.BABEL_8_BREAKING) {\n            const expression = super.parseExprSubscripts();\n            if (!tsIsEntityName(expression)) {\n              this.raise(\n                TSErrors.InvalidHeritageClauseType,\n                expression.loc.start,\n                { token },\n              );\n            }\n            const nodeType =\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\";\n            if (expression.type === \"TSInstantiationExpression\") {\n              // @ts-expect-error cast TSInstantiationExpression to TSInterfaceHeritage/TSClassImplements\n              expression.type = nodeType;\n              return expression;\n            }\n            const node = this.startNodeAtNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >(expression);\n            node.expression = expression;\n            // The last element can not form a TSInstantiationExpression because of the bail condition in\n            // `parseSubscript`, in this case we have to parse type arguments again\n            if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n              node.typeArguments = this.tsParseTypeArgumentsInExpression();\n            }\n            return this.finishNode(node, nodeType);\n          } else {\n            const node = this.startNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >();\n            // @ts-expect-error Babel 7 vs Babel 8\n            node.expression = this.tsParseEntityName(\n              tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n                tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n            );\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: Undone<N.TsTypeAliasDeclaration>,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookaheadCharCode() !== charCodes.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName(tsParseEntityNameFlags.ALLOW_RESERVED_WORDS)\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      if (!process.env.BABEL_8_BREAKING) {\n        node.isExport = isExport || false;\n      }\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(tsParseEntityNameFlags.NONE);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(node: any) {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      const startType = this.state.type;\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            node.declare = true;\n            return super.parseFunctionStatement(\n              node,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsTryParseDeclare, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            node.declare = true;\n            return this.parseClass(\n              node as Undone<N.ClassDeclaration>,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(node, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          case tt._let:\n            if (this.state.containsEsc) {\n              return;\n            }\n          // fallthrough\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              node.declare = true;\n              return this.parseVarStatement(node, this.state.value, true);\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(node, {\n              const: true,\n              declare: true,\n            });\n          case tt._using:\n            if (this.isUsing()) {\n              this.raise(\n                TSErrors.InvalidModifierOnUsingDeclaration,\n                this.state.startLoc,\n                \"declare\",\n              );\n              node.declare = true;\n              return this.parseVarStatement(node, \"using\", true);\n            }\n            break;\n          case tt._await:\n            if (this.isAwaitUsing()) {\n              this.raise(\n                TSErrors.InvalidModifierOnAwaitUsingDeclaration,\n                this.state.startLoc,\n                \"declare\",\n              );\n              node.declare = true;\n              this.next(); // eat 'await'\n              return this.parseVarStatement(node, \"await using\", true);\n            }\n            break;\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(node, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                node,\n                this.state.type,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | null | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.type,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    // Common to tsTryParseDeclare and tsTryParseExportDeclaration.\n    tsParseDeclaration(\n      node: any,\n      type: number,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ):\n      | N.ClassDeclaration\n      | N.TsInterfaceDeclaration\n      | N.TsTypeAliasDeclaration\n      | N.TsModuleDeclaration\n      | null\n      | undefined {\n      // no declaration apart from enum can be followed by a line break.\n      switch (type) {\n        case tt._abstract:\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case tt._module:\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case tt._namespace:\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case tt._type:\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseBindingElement(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include decorators/modifiers in range\n      const startLoc = decorators.length\n        ? decorators[0].loc.start\n        : this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(\n      items: Array<N.Expression | N.SpreadElement | null>,\n    ) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(close, isTuple, refExpressionErrors);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              state.stop = true;\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            node.arguments = this.parseCallExpressionArguments();\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (result.type === \"TSInstantiationExpression\") {\n            if (\n              this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis)\n            ) {\n              this.raise(\n                TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n                this.state.startLoc,\n              );\n            }\n            if (!this.match(tt.dot) && !this.match(tt.questionDot)) {\n              // If TSInstantiationExpression is not followed by . / ?.,\n              // it must be the end of a subscript chain. Note that `(` already forms\n              // call expression arguments\n              result.expression = super.stopParseSubscript(base, state);\n            }\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies! ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        const nodeImportEquals = process.env.BABEL_8_BREAKING\n          ? this.startNode<N.TsImportEqualsDeclaration>()\n          : (node as Undone<N.TsImportEqualsDeclaration>);\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        const declaration = this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n        if (process.env.BABEL_8_BREAKING) {\n          (node as Undone<N.ExportNamedDeclaration>).attributes = [];\n          (node as Undone<N.ExportNamedDeclaration>).declaration = declaration;\n          (node as Undone<N.ExportNamedDeclaration>).exportKind = \"value\";\n          (node as Undone<N.ExportNamedDeclaration>).source = null;\n          (node as Undone<N.ExportNamedDeclaration>).specifiers = [];\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        } else {\n          return declaration;\n        }\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.isLookaheadContextual(\"class\")\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      // If node.declare is true, the error has already been raised in tsTryParseDeclare.\n      if (!node.declare && (kind === \"using\" || kind === \"await using\")) {\n        this.raiseOverwrite(\n          TSErrors.UsingDeclarationInAmbientContext,\n          node,\n          kind,\n        );\n        return declaration;\n      }\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind === \"var\" || kind === \"let\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      if (!this.state.containsEsc) {\n        switch (this.state.type) {\n          case tt._const: {\n            if (this.isLookaheadContextual(\"enum\")) {\n              const node = this.startNode<N.TsEnumDeclaration>();\n              this.expect(tt._const); // eat 'const'\n              return this.tsParseEnumDeclaration(node, { const: true });\n            }\n            break;\n          }\n          case tt._abstract:\n          case tt._declare: {\n            if (\n              this.nextTokenIsIdentifierAndNotTSRelationalOperatorOnSameLine()\n            ) {\n              const token = this.state.type;\n              const node = this.startNode<N.ExpressionStatement>();\n              this.next(); // eat 'abstract' or 'declare'\n              const declaration =\n                token === tt._declare\n                  ? this.tsTryParseDeclare(node)\n                  : this.tsParseAbstractDeclaration(node, decorators);\n              if (declaration) {\n                if (token === tt._declare) {\n                  declaration.declare = true;\n                }\n                return declaration;\n              } else {\n                // The production is invalid. Construct AST for error recovery.\n                node.expression = this.createIdentifier(\n                  this.startNodeAt<N.Identifier>(node.loc.start),\n                  token === tt._declare ? \"declare\" : \"abstract\",\n                );\n                this.semicolon(false);\n                return this.finishNode(node, \"ExpressionStatement\");\n              }\n            }\n            break;\n          }\n          case tt._enum:\n            return this.tsParseEnumDeclaration(\n              this.startNode<N.TsEnumDeclaration>(),\n            );\n          case tt._global: {\n            const nextCh = this.lookaheadCharCode();\n            if (nextCh === charCodes.leftCurlyBrace) {\n              const node = this.startNode<N.TsModuleDeclaration>();\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            }\n            break;\n          }\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(this.startNode());\n            if (result) return result;\n            break;\n          }\n          case tt._module: {\n            if (this.nextTokenIsIdentifierOrStringLiteralOnSameLine()) {\n              const node = this.startNode<N.TsModuleDeclaration>();\n              this.next(); // eat 'module'\n              return this.tsParseDeclaration(\n                node,\n                tt._module,\n                false,\n                decorators,\n              ) as N.TsModuleDeclaration;\n            }\n            break;\n          }\n          case tt._namespace: {\n            if (this.nextTokenIsIdentifierOnSameLine()) {\n              const node = this.startNode<N.TsModuleDeclaration>();\n              this.next(); // eat 'namespace'\n              return this.tsParseDeclaration(\n                node,\n                tt._namespace,\n                false,\n                decorators,\n              ) as N.TsModuleDeclaration;\n            }\n            break;\n          }\n          case tt._type: {\n            if (this.nextTokenIsIdentifierOnSameLine()) {\n              const node = this.startNode<N.TsTypeAliasDeclaration>();\n              this.next(); // eat 'type'\n              return this.tsParseTypeAliasDeclaration(node);\n            }\n            break;\n          }\n        }\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors!);\n          return expr;\n        }\n      }\n\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        (node as unknown as N.EstreeMethodDefinition).value.body == null\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node!;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node!;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | null | undefined {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      disallowCallExpression: boolean,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(\n            type,\n            disallowCallExpression,\n            isUnparenthesizedInAssign,\n            binding,\n          );\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault<P extends N.Pattern>(\n      startLoc?: Position | null,\n      left?: P | null,\n    ): P | N.AssignmentPattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableListItem(\n      exprList: (N.Expression | N.SpreadElement | N.RestElement)[],\n      index: number,\n      isLHS: boolean,\n    ): void {\n      const node = exprList[index];\n      if (node.type === \"TSTypeCastExpression\") {\n        exprList[index] = this.typeCastToParameter(node);\n      }\n      super.toAssignableListItem(exprList, index, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifier, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        } else {\n          return null;\n        }\n      }\n      throw this.unexpected(null, tt._class);\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract || method.type === \"TSAbstractMethodDefinition\") {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = this.cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n\n    /**\n     * This hook is defined in the ESTree plugin.\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     *\n     * @param node The AST node finished by finishNode\n     * @returns\n     */\n    fillOptionalPropertiesForTSESLint(node: N.Node): void {\n      switch (node.type) {\n        case \"ExpressionStatement\":\n          node.directive ??= undefined;\n          return;\n        case \"RestElement\":\n          node.value = undefined;\n        /* fallthrough */\n        case \"Identifier\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"ObjectPattern\":\n          node.decorators ??= [];\n          node.optional ??= false;\n          node.typeAnnotation ??= undefined;\n          return;\n        case \"TSParameterProperty\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSEmptyBodyFunctionExpression\":\n          node.body = null;\n        /* fallthrough */\n        case \"TSDeclareFunction\":\n        case \"FunctionDeclaration\":\n        case \"FunctionExpression\":\n        case \"ClassMethod\":\n        case \"ClassPrivateMethod\":\n          node.declare ??= false;\n          node.returnType ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"Property\":\n          node.optional ??= false;\n          return;\n        case \"TSMethodSignature\":\n        case \"TSPropertySignature\":\n          node.optional ??= false;\n        /* fallthrough */\n        case \"TSIndexSignature\":\n          node.accessibility ??= undefined;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSAbstractPropertyDefinition\":\n        case \"PropertyDefinition\":\n        case \"TSAbstractAccessorProperty\":\n        case \"AccessorProperty\":\n          node.declare ??= false;\n          node.definite ??= false;\n          node.readonly ??= false;\n          node.typeAnnotation ??= undefined;\n        /* fallthrough */\n        case \"TSAbstractMethodDefinition\":\n        case \"MethodDefinition\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.optional ??= false;\n          return;\n        case \"ClassExpression\":\n          node.id ??= null;\n        /* fallthrough */\n        case \"ClassDeclaration\":\n          node.abstract ??= false;\n          node.declare ??= false;\n          node.decorators ??= [];\n          node.implements ??= [];\n          node.superTypeArguments ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"TSTypeAliasDeclaration\":\n        case \"VariableDeclaration\":\n          node.declare ??= false;\n          return;\n        case \"VariableDeclarator\":\n          node.definite ??= false;\n          return;\n        case \"TSEnumDeclaration\":\n          node.const ??= false;\n          node.declare ??= false;\n          return;\n        case \"TSEnumMember\":\n          node.computed ??= false;\n          return;\n        case \"TSImportType\":\n          node.qualifier ??= null;\n          node.options ??= null;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments ??= null;\n          }\n          return;\n        case \"TSInterfaceDeclaration\":\n          node.declare ??= false;\n          node.extends ??= [];\n          return;\n        case \"TSMappedType\":\n          node.optional ??= false;\n          node.readonly ??= undefined;\n          return;\n        case \"TSModuleDeclaration\":\n          node.declare ??= false;\n          node.global ??= node.kind === \"global\";\n          return;\n        case \"TSTypeParameter\":\n          node.const ??= false;\n          node.in ??= false;\n          node.out ??= false;\n          return;\n      }\n    }\n\n    chStartsBindingIdentifierAndNotRelationalOperator(ch: number, pos: number) {\n      if (isIdentifierStart(ch)) {\n        keywordAndTSRelationalOperator.lastIndex = pos;\n        if (keywordAndTSRelationalOperator.test(this.input)) {\n          // We have seen as/in/instanceof/satisfies so far, now check if the identifier\n          // ends here\n          const endCh = this.codePointAtPos(\n            keywordAndTSRelationalOperator.lastIndex,\n          );\n          if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n            return false;\n          }\n        }\n        return true;\n      } else if (ch === charCodes.backslash) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    nextTokenIsIdentifierAndNotTSRelationalOperatorOnSameLine(): boolean {\n      const next = this.nextTokenInLineStart();\n      const nextCh = this.codePointAtPos(next);\n      return this.chStartsBindingIdentifierAndNotRelationalOperator(\n        nextCh,\n        next,\n      );\n    }\n\n    nextTokenIsIdentifierOrStringLiteralOnSameLine(): boolean {\n      const next = this.nextTokenInLineStart();\n      const nextCh = this.codePointAtPos(next);\n      return (\n        this.chStartsBindingIdentifier(nextCh, next) ||\n        nextCh === charCodes.quotationMark ||\n        nextCh === charCodes.apostrophe\n      );\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.ts                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.ts                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      if (cloned.type === \"Placeholder\") {\n        cloned.expectedNode = (node as N.Placeholder).expectedNode;\n      }\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Placeholder\") {\n        return this.cloneIdentifier(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    /* ============================================================ *\n     * parser/lval.ts                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(\n      type: string,\n      disallowCallExpression: boolean,\n      isParenthesized: boolean,\n      binding: BindingFlag,\n    ) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(\n          type,\n          disallowCallExpression,\n          isParenthesized,\n          binding,\n        )\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.ts                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const next = this.nextTokenStart();\n      if (\n        this.input.charCodeAt(next) === charCodes.percentSign &&\n        this.input.charCodeAt(next + 1) === charCodes.percentSign\n      ) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc!.index)\n      ) {\n        this.raise(\n          PlaceholderErrors.UnexpectedSpace,\n          this.state.lastTokEndLoc!,\n        );\n      }\n    }\n  };\n", "import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression | undefined {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          this.castNodeTo(identifier, \"V8IntrinsicIdentifier\");\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (\n          topicToken === \"#\" &&\n          pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n        ) {\n          throw new Error(\n            `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n          );\n        }\n      }\n    } else if (\n      !process.env.BABEL_8_BREAKING &&\n      proposal === \"smart\" &&\n      pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n    ) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'recordAndTuple' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    } else {\n      const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n      if (syntaxType != null) {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (\n    pluginsMap.has(\"discardBinding\") &&\n    pluginsMap.get(\"discardBinding\").syntaxType !== \"void\"\n  ) {\n    throw new Error(\n      \"The 'discardBinding' plugin requires a 'syntaxType' option. Currently the only supported value is 'void'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    sawProto: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): boolean {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return sawProto;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      return true;\n    }\n\n    return sawProto;\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    if (this.match(tt.eof)) {\n      throw this.raise(Errors.ParseExpressionEmptyInput, this.state.startLoc);\n    }\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      throw this.raise(Errors.ParseExpressionExpectsEOF, this.state.startLoc, {\n        unexpected: this.input.codePointAt(this.state.start),\n      });\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(refExpressionErrors: ExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(tt._yield);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value as N.AssignmentOperator;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n        if (\n          refExpressionErrors.voidPatternLoc != null &&\n          refExpressionErrors.voidPatternLoc.index >= startIndex\n        ) {\n          refExpressionErrors.voidPatternLoc = null;\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(\n        left,\n        this.finishNode(node, \"AssignmentExpression\"),\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        operator === \"||=\" || operator === \"&&=\" || operator === \"??=\",\n      );\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (isYield) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          op === tt.pipeline &&\n          // @ts-expect-error: Only in Babel 7\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          // @ts-expect-error: Babel 7 only\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n        ) {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(\n              this.parseExprOpBaseRightExpr(op, prec),\n              startLoc,\n            );\n          });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          return this.stopParseSubscript(base, state);\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        return this.stopParseSubscript(base, state);\n      }\n    }\n  }\n\n  stopParseSubscript(\n    this: Parser,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n  ) {\n    state.stop = true;\n    return base;\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as Undone<N.OptionalMemberExpression>).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      (node as Undone<N.OptionalCallExpression>).optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments();\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors!);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc!.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(tt.parenR)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          tt.parenR,\n          false,\n          refExpressionErrors,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaPropertyOrPhaseCall(\n            node as Undone<N.MetaProperty | N.ImportExpression>,\n          );\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc!);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        throw this.unexpected();\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart())!;\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          // None of these plugins is enabled, otherwise they would have\n          // handled `<` by themselves.\n          throw this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        }\n        throw this.unexpected();\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING) {\n          if (type === tt.decimal) {\n            return this.parseDecimalLiteral(this.state.value);\n          } else if (type === tt.bracketBarL || type === tt.bracketHashL) {\n            return this.parseArrayLike(\n              this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n              /* isTuple */ true,\n            );\n          } else if (type === tt.braceBarL || type === tt.braceHashL) {\n            return this.parseObjectLike(\n              this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n              /* isPattern */ false,\n              /* isRecord */ true,\n            );\n          }\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    }\n    throw this.unexpected();\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      if (process.env.BABEL_8_BREAKING || pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n\n        // Register the topic reference so that its pipe body knows\n        // that its topic was used at least once.\n        this.registerTopicReference();\n\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        // pipeProposal is \"smart\"\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed!, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\"(Babel 7) or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (this.match(tt.parenL) && !this.scope.allowDirectSuper) {\n      if (process.env.BABEL_8_BREAKING) {\n        this.raise(Errors.SuperNotAllowed, node);\n      } else {\n        if (!(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)) {\n          this.raise(Errors.SuperNotAllowed, node);\n        }\n      }\n    } else if (!this.scope.allowSuper) {\n      if (process.env.BABEL_8_BREAKING) {\n        this.raise(Errors.UnexpectedSuper, node);\n      } else {\n        if (!(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)) {\n          this.raise(Errors.UnexpectedSuper, node);\n        }\n      }\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  // https://tc39.es/proposal-source-phase-imports/\n  parseImportMetaPropertyOrPhaseCall(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    } else {\n      const id = this.createIdentifierAt(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"import\",\n        this.state.lastTokStartLoc!,\n      );\n      if (this.isContextual(tt._meta)) {\n        if (!this.inModule) {\n          this.raise(Errors.ImportMetaOutsideModule, id);\n        }\n        this.sawUnambiguousESM = true;\n      }\n      return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n    }\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    if (process.env.BABEL_8_BREAKING) {\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        // parser supports invalid bigints like `1.0n` or `1e1n` such that it\n        // can throw a recoverable error, but BigInt constructor does not\n        // support them.\n        bigInt = null;\n      }\n      const node = this.parseLiteral<N.BigIntLiteral>(bigInt, \"BigIntLiteral\");\n      return node;\n    } else {\n      return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n    }\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (\n      | N.Expression\n      | N.RestElement\n      | N.VoidPattern\n      | N.AssignmentPattern\n    )[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowInOrVoidPattern(\n            tt.parenR,\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc!;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode: Undone<N.ArrowFunctionExpression> | null | undefined =\n      this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc!.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined | null {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.allowNewTarget) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args as N.Expression[];\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos!,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc!, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(\n          prop,\n          isRecord,\n          sawProto,\n          refExpressionErrors,\n        );\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc!.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowInOrVoidPattern(\n            tt.braceR,\n            refExpressionErrors,\n          );\n\n      return this.finishObjectProperty(prop);\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = this.cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishObjectProperty(prop);\n    }\n  }\n\n  finishObjectProperty(node: Undone<N.ObjectProperty>) {\n    return this.finishNode(node, \"ObjectProperty\");\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<\n          N.Expression | N.SpreadElement | N.VoidPattern | N.AssignmentPattern\n        >\n      | Array<\n          N.Expression | N.RestElement | N.VoidPattern | N.AssignmentPattern\n        >\n      | null\n      | undefined,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<\n          N.Expression | N.SpreadElement | N.VoidPattern | N.AssignmentPattern\n        >\n      | Array<\n          N.Expression | N.RestElement | N.VoidPattern | N.AssignmentPattern\n        >,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n  // https://tc39.es/ecma262/#prod-ElementList\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: Undone<N.Node> | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(close, allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ):\n    | N.Expression\n    | N.SpreadElement\n    | N.ArgumentPlaceholder\n    | N.VoidPattern\n    | N.AssignmentPattern\n    | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowInOrVoidPattern(\n        close,\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: Undone<N.Identifier>, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  createIdentifierAt(\n    node: Undone<N.Identifier>,\n    name: string,\n    endLoc: Position,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNodeAt(node, \"Identifier\", endLoc);\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name!, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name!;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns whether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed = this.prodParam.hasAwait;\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousPrefixOrIdentifier(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser, startLoc: Position): N.YieldExpression {\n    const node = this.startNodeAt<N.YieldExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      node,\n    );\n\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        if (this.eat(tt.comma)) {\n          this.addTrailingCommaExtraToNode(node.options);\n          if (!this.match(tt.parenR)) {\n            // keep consuming arguments, to then throw ImportCallArity\n            // instead of \"expected )\"\n            do {\n              this.parseMaybeAssignAllowIn();\n            } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n            this.raise(Errors.ImportCallArity, node);\n          }\n        }\n      } else {\n        this.addTrailingCommaExtraToNode(node.source);\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression!, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow!, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused!, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // TODO(Babel 8): Remove this method\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      // @ts-expect-error Babel 7 only\n      this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])\n    ) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\"(Babel 7), \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  parseVoidPattern(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors | null,\n  ): N.VoidPattern {\n    this.expectPlugin(\"discardBinding\");\n    const node = this.startNode<N.VoidPattern>();\n    if (refExpressionErrors != null) {\n      refExpressionErrors.voidPatternLoc = this.state.startLoc;\n    }\n    this.next();\n    return this.finishNode(node, \"VoidPattern\");\n  }\n\n  parseMaybeAssignAllowInOrVoidPattern(\n    this: Parser,\n    close: TokenType,\n    refExpressionErrors: ExpressionErrors | null | undefined,\n    afterLeftParse?: Function,\n  ) {\n    if (refExpressionErrors != null && this.match(tt._void)) {\n      const nextCode = this.lookaheadCharCode();\n      if (\n        nextCode === charCodes.comma ||\n        nextCode ===\n          (close === tt.bracketR\n            ? charCodes.rightSquareBracket\n            : close === tt.braceR\n              ? charCodes.rightCurlyBrace\n              : charCodes.rightParenthesis) ||\n        nextCode === charCodes.equalsTo\n      ) {\n        // `void = Initializer` is not allowed, here we parse the production as an assignment pattern\n        // so that we can recover from this error\n        return this.parseMaybeDefault(\n          this.state.startLoc,\n          this.parseVoidPattern(refExpressionErrors),\n        );\n      }\n    }\n    return this.parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse);\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(\n      program,\n      tt.eof,\n      this.options.sourceType === \"module\" ? \"module\" : \"script\",\n    );\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType,\n    sourceType: SourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.ExpressionStatement): N.Directive {\n    const directive = this.castNodeTo(stmt, \"Directive\");\n\n    const directiveLiteral = this.castNodeTo(\n      stmt.expression,\n      \"DirectiveLiteral\",\n    );\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directive.value = directiveLiteral;\n    // @ts-expect-error delete non-optional properties\n    delete stmt.expression;\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  isUsing(): boolean {\n    if (!this.isContextual(tt._using)) {\n      return false;\n    }\n    return this.nextTokenIsIdentifierOnSameLine();\n  }\n\n  isForUsing(): boolean {\n    if (!this.isContextual(tt._using)) {\n      return false;\n    }\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    if (this.isUnparsedContextual(next, \"of\")) {\n      const nextCharAfterOf = this.lookaheadCharCodeSince(next + 2);\n      // `for( using of` must start either a for-lhs-of statement\n      // or a for lexical declaration\n      if (\n        nextCharAfterOf !== charCodes.equalsTo &&\n        nextCharAfterOf !== charCodes.colon &&\n        // recover from `for(using of;...);`\n        nextCharAfterOf !== charCodes.semicolon\n      ) {\n        return false;\n      }\n    }\n    if (\n      this.chStartsBindingIdentifier(nextCh, next) ||\n      this.isUnparsedContextual(next, \"void\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  nextTokenIsIdentifierOnSameLine(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  isAwaitUsing(): boolean {\n    if (!this.isContextual(tt._await)) {\n      return false;\n    }\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  allowsUsing(): boolean {\n    return (\n      (this.scope.inModule || !this.scope.inTopLevel) &&\n      !this.scope.inBareCaseStatement\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (this.isAwaitUsing()) {\n          if (!this.allowsUsing()) {\n            this.raise(Errors.UnexpectedUsingDeclaration, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          } else if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        if (!this.allowsUsing()) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportNamedDeclaration\n            >,\n            decorators,\n          );\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null | undefined,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments();\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing = this.isAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing || this.isForUsing();\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.SWITCH);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc!,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc!);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : ScopeFlag.OTHER,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null | undefined,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra!.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc!,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc!,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    } else {\n      if (id.type === \"VoidPattern\") {\n        this.raise(Errors.UnexpectedVoidPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    ) as Array<N.Pattern>;\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc!,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null | undefined,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      this.sawUnambiguousESM = true;\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc!,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (\n      this.match(tt._const) ||\n      this.match(tt._var) ||\n      this.isLet() ||\n      this.isUsing() ||\n      this.isAwaitUsing()\n    ) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        const next = this.nextTokenStart();\n        const nextChar = this.input.charCodeAt(next);\n        if (\n          nextChar === charCodes.leftCurlyBrace ||\n          (this.chStartsBindingIdentifier(nextChar, next) &&\n            !this.input.startsWith(\"from\", next))\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration!;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = this.cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = this.cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      // @ts-expect-error comparing undefined and number\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.startNode<N.Identifier>();\n    const phaseIdentifierName = this.parseIdentifierName(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifierName,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return this.createIdentifier(phaseIdentifier, phaseIdentifierName);\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith! &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = this.cloneIdentifier(imported as N.Identifier);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\nimport type { ParserOptions, ParseResult, File } from \"@babel/parser\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  constructor(\n    options: ParserOptions | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    const normalizedOptions = getOptions(options);\n    super(normalizedOptions, input);\n\n    this.options = normalizedOptions;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = normalizedOptions.sourceFilename;\n    this.startIndex = normalizedOptions.startIndex;\n\n    let optionFlags = 0;\n    if (normalizedOptions.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (normalizedOptions.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (normalizedOptions.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (normalizedOptions.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (normalizedOptions.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (normalizedOptions.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (normalizedOptions.allowYieldOutsideFunction) {\n      optionFlags |= OptionFlags.AllowYieldOutsideFunction;\n    }\n    if (normalizedOptions.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (normalizedOptions.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (normalizedOptions.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (normalizedOptions.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (normalizedOptions.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (normalizedOptions.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (normalizedOptions.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): ParseResult<File> {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    // @ts-expect-error define later\n    file.errors = null;\n    const result = this.parseTopLevel(file, program);\n    result.errors = this.state.errors;\n    result.comments.length = this.state.commentsLen;\n    return result as ParseResult<File>;\n  }\n}\n", "import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nexport type {\n  PluginConfig as ParserPlugin,\n  DecoratorsPluginOptions,\n  FlowPluginOptions,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n  TypeScriptPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\nimport type { ParseError as ParseErrorGeneric } from \"./parse-error.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\n// TODO: Rather than type-casting the internal AST definitions to the\n// @babel/types one, we should actually unify them.\nimport type { Expression, File } from \"@babel/types\";\nexport type { Expression, File };\n\nexport type ParserOptions = Partial<Options>;\n\nexport type ParseError = ParseErrorGeneric<object>;\nexport type ParseResult<Result extends File | Expression = File> = Result & {\n  comments: File[\"comments\"];\n  errors: null | ParseError[];\n  tokens?: File[\"tokens\"];\n};\n\n/**\n * Parse the provided code as an entire ECMAScript program.\n */\nexport function parse(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<File> {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<Expression> {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression() as ParseResult<Expression>;\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(\n  options: ParserOptions | undefined | null,\n  input: string,\n): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key)!;\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n", "\nimport * as vscode from 'vscode';\nimport { generateStub, findStubComments, insertStub } from './stubGenerator';\nimport { registerVoiceControlCommand, VoiceTranscriptPayload, VoicePanelHandlerTools } from './voice/voiceControlPanel';\nimport { ensureLocalBinOnPath, getCandidateLocations, isRhizomeInstalled } from './utils/rhizomePath';\n\n/**\n * @rhizome: how do libraries work here?\n *\n * In VSCode extensions, local TypeScript files are bundled with the extension.\n * We import from ./stubGenerator (same directory, same bundle).\n * esbuild will tree-shake unused code and bundle everything into dist/extension.js.\n *\n * Path aliases (@rhizome/lib) come later if we extract to separate package.\n * For now: relative imports within src/ work fine.\n */\n\n/**\n * Helper: Query a persona via rhizome CLI\n *\n * don-socratic asks:\n * When you call out to an external service (rhizome CLI), what should\n * you encapsulate? What belongs in a helper, and what stays in the command handler?\n *\n * ANSWER:\n * The rhizome call itself is pure I/O. It takes text, sends it to rhizome,\n * gets back text. That's a perfect candidate for extraction.\n * The command handler stays focused: get selection, call helper, show result.\n * The helper stays focused: I/O with rhizome, error handling, nothing else.\n */\nasync function queryPersona(\n\ttext: string,\n\tpersona: string,\n\ttimeoutMs: number = 30000,\n\tworkspaceRoot?: string\n): Promise<string> {\n\ttry {\n\t\tconst { execSync } = require('child_process');\n\t\tconst cwd = workspaceRoot || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\t\tconst response = execSync(`rhizome query --persona ${persona}`, {\n\t\t\tinput: text,\n\t\t\tencoding: 'utf-8',\n\t\t\ttimeout: timeoutMs,\n\t\t\tcwd: cwd, // Ensure rhizome runs in workspace to find .rhizome folder\n\t\t});\n\t\treturn response;\n\t} catch (error: any) {\n\t\tthrow new Error(`Rhizome query failed: ${(error as Error).message}`);\n\t}\n}\n\n/**\n * Helper: Get list of available personas from rhizome\n *\n * Queries rhizome for available personas (both system and custom).\n * Returns a map of persona name to description for quick picker.\n */\nasync function getAvailablePersonas(): Promise<Map<string, string>> {\n\ttry {\n\t\tconst { execSync } = require('child_process');\n\t\tconst output = execSync('rhizome persona list', {\n\t\t\tencoding: 'utf-8',\n\t\t\ttimeout: 5000,\n\t\t\tstdio: 'pipe',\n\t\t});\n\n\t\tconst personas = new Map<string, string>();\n\n\t\t// Parse rhizome persona list output\n\t\t// Format: \"persona_name | role: description | source: ...\"\n\t\tconst lines = output.split('\\n');\n\t\tfor (const line of lines) {\n\t\t\tconst match = line.match(/^(\\S+)\\s+\\|\\s+role:\\s+(.+?)\\s+\\|\\s+source:/);\n\t\t\tif (match) {\n\t\t\t\tconst name = match[1].trim();\n\t\t\t\tconst role = match[2].trim();\n\t\t\t\tpersonas.set(name, role);\n\t\t\t}\n\t\t}\n\n\t\treturn personas;\n\t} catch {\n\t\t// If rhizome persona list fails, return curated set of main personas\n\t\treturn new Map([\n\t\t\t['don-socratic', 'Socratic questioning'],\n\t\t\t['dev-guide', 'Mentor: What were you trying to accomplish?'],\n\t\t\t['code-reviewer', 'Skeptic: What\\'s your evidence?'],\n\t\t\t['ux-advocate', 'Curator: Have we watched someone use this?'],\n\t\t\t['dev-advocate', 'Strategist: What trade-off are we making?'],\n\t\t]);\n\t}\n}\n\n/**\n * Helper: Format output channel for persona responses\n *\n * don-socratic asks:\n * Those eight appendLine() calls... what pattern do you see?\n * Are they structural (header, content, footer)? Could you name that pattern?\n * What would happen if you extracted it?\n */\nfunction formatPersonaOutput(channel: vscode.OutputChannel, personaName: string, selectedCode: string, response: string) {\n\tchannel.appendLine('='.repeat(60));\n\tchannel.appendLine(personaName);\n\tchannel.appendLine('='.repeat(60));\n\tchannel.appendLine('Selected code:');\n\tchannel.appendLine('');\n\tchannel.appendLine(selectedCode);\n\tchannel.appendLine('');\n\tchannel.appendLine('--- Waiting for persona response ---');\n\tchannel.appendLine('');\n\tchannel.appendLine('');\n\tchannel.appendLine(`Response from ${personaName}:`);\n\tchannel.appendLine('');\n\tchannel.appendLine(response);\n}\n\n/**\n * Helper: Get active selection, validate it exists\n *\n * don-socratic asks:\n * Both don-socratic and inline-question handlers need the same thing: editor + selection.\n * What if you extracted that validation into a helper?\n * What would you call it?\n */\nfunction getActiveSelection(): { editor: vscode.TextEditor; selectedText: string } | null {\n\tconst editor = vscode.window.activeTextEditor;\n\tif (!editor) {\n\t\tvscode.window.showErrorMessage('No active editor');\n\t\treturn null;\n\t}\n\n\tconst selectedText = editor.document.getText(editor.selection);\n\tif (!selectedText) {\n\t\tvscode.window.showErrorMessage('Please select code to question');\n\t\treturn null;\n\t}\n\n\treturn { editor, selectedText };\n}\n\n/**\n * Helper: Detect language from VSCode languageId\n *\n * Both stub generation and inline questioning need this.\n * Extract it once, use it everywhere.\n */\nfunction detectLanguage(languageId: string): 'typescript' | 'javascript' | 'python' | null {\n\tif (languageId === 'typescript' || languageId === 'javascript') {\n\t\treturn 'typescript';\n\t}\n\tif (languageId === 'python') {\n\t\treturn 'python';\n\t}\n\treturn null;\n}\n/**\n * Helper: Check if user is member of Unity-Environmental-University\n *\n * don-socratic asks:\n * How do you know who a user is? What signals indicate org membership?\n * GitHub auth + git config are stronger signals than assumptions.\n *\n * Checks:\n * 1. `gh auth status` to confirm logged in\n * 2. `git config user.organization` for explicit org setting\n * 3. Falls back to checking GitHub orgs if gh CLI available\n */\nasync function isUEUMember(): Promise<boolean> {\n\tconst { execSync } = require('child_process');\n\n\ttry {\n\t\t// First, check if user is authenticated with GitHub CLI\n\t\ttry {\n\t\t\texecSync('gh auth status', {\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 2000,\n\t\t\t\tstdio: 'pipe',\n\t\t\t});\n\t\t} catch {\n\t\t\t// Not authenticated with gh, can't verify org membership\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check git config for explicit org setting\n\t\ttry {\n\t\t\tconst org = execSync('git config user.organization', {\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 2000,\n\t\t\t\tstdio: 'pipe',\n\t\t\t})\n\t\t\t\t.trim();\n\t\t\tif (org === 'Unity-Environmental-University') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch {\n\t\t\t// Config value not set, continue to check GitHub orgs\n\t\t}\n\n\t\t// Check GitHub orgs via gh CLI\n\t\ttry {\n\t\t\tconst orgs = execSync('gh org list', {\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 5000,\n\t\t\t})\n\t\t\t\t.split('\\n')\n\t\t\t\t.map((line: string) => line.trim())\n\t\t\t\t.filter((line: string) => line.length > 0);\n\n\t\t\treturn orgs.includes('Unity-Environmental-University');\n\t\t} catch {\n\t\t\t// gh org list failed or not available\n\t\t\treturn false;\n\t\t}\n\t} catch {\n\t\treturn false;\n\t}\n}\n\n/**\n * Helper: Run diagnostics when rhizome not found\n *\n * don-socratic asks:\n * When a tool is missing, what should you check?\n * - Is it in PATH?\n * - Did the installation fail silently?\n * - Is it on the disk but not in PATH?\n *\n * Gather evidence before offering help.\n */\nasync function diagnosticRhizomeMissing(): Promise<string[]> {\n\tconst { execSync } = require('child_process');\n\tconst fs = require('fs');\n\tconst diagnostics: string[] = [];\n\n\t// Check installation paths that we probe proactively (see getCandidateLocations)\n\tfor (const candidate of getCandidateLocations()) {\n\t\tif (fs.existsSync(candidate)) {\n\t\t\tdiagnostics.push(`Found rhizome at: ${candidate}`);\n\t\t} else {\n\t\t\tdiagnostics.push(`Checked path (missing): ${candidate}`);\n\t\t}\n\t}\n\n\t// Check PATH environment variable\n\tdiagnostics.push(`Current PATH: ${process.env.PATH}`);\n\n\t// Check if installation tools are available\n\ttry {\n\t\texecSync('which npm', { stdio: 'pipe', timeout: 2000 });\n\t\tdiagnostics.push('npm is available');\n\t} catch {\n\t\tdiagnostics.push('npm NOT found (required for rhizome installation)');\n\t}\n\n\ttry {\n\t\texecSync('which brew', { stdio: 'pipe', timeout: 2000 });\n\t\tdiagnostics.push('brew is available (macOS)');\n\t} catch {\n\t\t// brew not required on all systems\n\t}\n\n\treturn diagnostics;\n}\n\n/**\n * Helper: Offer to collect and store OpenAI key\n *\n * don-socratic asks:\n * Where should secrets live? In code? In env? In config files?\n * How do you keep them secure while making them accessible?\n * What happens the first time a tool needs a secret?\n */\nasync function ensureOpenAIKeyConfigured(workspaceRoot: string): Promise<boolean> {\n\tconst configPath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.rhizome', 'config.json');\n\n\ttry {\n\t\t// Check if key is already configured (env var or config file)\n\t\tif (process.env.OPENAI_API_KEY) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst configExists = await vscode.workspace.fs.stat(configPath);\n\t\tif (configExists) {\n\t\t\tconst configContent = await vscode.workspace.fs.readFile(configPath);\n\t\t\tconst config = JSON.parse(new TextDecoder().decode(configContent));\n\t\t\tif (config.ai?.openai_key) {\n\t\t\t\t// Load key from config into env for this session\n\t\t\t\tprocess.env.OPENAI_API_KEY = config.ai.openai_key;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch {\n\t\t// Config file doesn't exist or can't be read, that's fine\n\t}\n\n\t// No key found, ask user\n\tconst key = await vscode.window.showInputBox({\n\t\tprompt: 'Enter your OpenAI API key (stored locally in .rhizome/config.json)',\n\t\tpassword: true,\n\t\tignoreFocusOut: true,\n\t});\n\n\tif (!key) {\n\t\tvscode.window.showWarningMessage('OpenAI API key is required for don-socratic');\n\t\treturn false;\n\t}\n\n\t// Save key to local config\n\ttry {\n\t\tconst rhizomePath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.rhizome');\n\t\tconst configPath = vscode.Uri.joinPath(rhizomePath, 'config.json');\n\n\t\tlet config: any = {};\n\t\ttry {\n\t\t\tconst existing = await vscode.workspace.fs.readFile(configPath);\n\t\t\tconfig = JSON.parse(new TextDecoder().decode(existing));\n\t\t} catch {\n\t\t\t// File doesn't exist, start fresh\n\t\t}\n\n\t\t// Ensure nested structure exists\n\t\tif (!config.ai) config.ai = {};\n\t\tconfig.ai.openai_key = key;\n\n\t\t// Write config\n\t\tconst configContent = new TextEncoder().encode(JSON.stringify(config, null, 2));\n\t\tawait vscode.workspace.fs.writeFile(configPath, configContent);\n\n\t\t// Set env var for this session\n\t\tprocess.env.OPENAI_API_KEY = key;\n\n\t\t// Add .rhizome/config.json to .gitignore\n\t\tawait addToGitignore(workspaceRoot, '.rhizome/config.json');\n\n\t\tvscode.window.showInformationMessage('OpenAI API key configured and stored securely');\n\t\treturn true;\n\t} catch (error: any) {\n\t\tvscode.window.showErrorMessage(`Failed to save API key: ${(error as Error).message}`);\n\t\treturn false;\n\t}\n}\n\n/**\n * Helper: Add entry to .gitignore if not already there\n */\nasync function addToGitignore(workspaceRoot: string, entry: string): Promise<void> {\n\tconst gitignorePath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.gitignore');\n\n\tlet content = '';\n\ttry {\n\t\tconst existing = await vscode.workspace.fs.readFile(gitignorePath);\n\t\tcontent = new TextDecoder().decode(existing);\n\t} catch {\n\t\t// .gitignore doesn't exist, we'll create it\n\t}\n\n\tif (!content.includes(entry)) {\n\t\tcontent += (content.endsWith('\\n') ? '' : '\\n') + entry + '\\n';\n\t\tconst encoded = new TextEncoder().encode(content);\n\t\tawait vscode.workspace.fs.writeFile(gitignorePath, encoded);\n\t}\n}\n\n/**\n * Helper: Initialize rhizome context in workspace root\n *\n * don-socratic asks:\n * What does it mean for a tool to be \"initialized\"?\n * What state needs to exist before it can work?\n * How should the tool handle missing initialization?\n *\n * If .rhizome doesn't exist in workspace root, run `rhizome init`\n * to set up the local context directory.\n */\nasync function initializeRhizomeIfNeeded(workspaceRoot: string): Promise<boolean> {\n\t// Check if rhizome is installed\n\tif (!isRhizomeInstalled()) {\n\t\t// Run initial diagnostics to understand why\n\t\tconst diagnosticsBefore = await diagnosticRhizomeMissing();\n\t\tconst isMember = await isUEUMember();\n\n\t\tif (isMember) {\n\t\t\t// User is UEU member, offer to install with diagnostics\n\t\t\tvscode.window.showInformationMessage('Diagnostics before installation:\\n' + diagnosticsBefore.join('\\n'));\n\n\t\t\tconst response = await vscode.window.showErrorMessage(\n\t\t\t\t'rhizome CLI not found. You are a member of Unity-Environmental-University. Install rhizome now?',\n\t\t\t\t'Install rhizome',\n\t\t\t\t'View Guide'\n\t\t\t);\n\n\t\t\tif (response === 'Install rhizome') {\n\t\t\t\ttry {\n\t\t\t\t\tvscode.window.showInformationMessage('Installing rhizome...');\n\t\t\t\t\tconst { execSync } = require('child_process');\n\n\t\t\t\t\t// Try npm install globally\n\t\t\t\t\texecSync('npm install -g @rhizome/cli', {\n\t\t\t\t\t\tencoding: 'utf-8',\n\t\t\t\t\t\ttimeout: 60000,\n\t\t\t\t\t\tstdio: 'inherit',\n\t\t\t\t\t});\n\n\t\t\t\t\tvscode.window.showInformationMessage('rhizome installed successfully!');\n\n\t\t\t\t\t// Run diagnostics after installation\n\t\t\t\t\tconst diagnosticsAfter = await diagnosticRhizomeMissing();\n\t\t\t\t\tvscode.window.showInformationMessage(\n\t\t\t\t\t\t'Diagnostics after installation:\\n' + diagnosticsAfter.join('\\n')\n\t\t\t\t\t);\n\n\t\t\t\t\t// Verify installation\n\t\t\t\t\tif (!isRhizomeInstalled()) {\n\t\t\t\t\t\tvscode.window.showWarningMessage(\n\t\t\t\t\t\t\t'Installation completed but rhizome still not found in PATH. You may need to restart VSCode.'\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Continue with workspace initialization\n\t\t\t\t\treturn await initializeRhizomeIfNeeded(workspaceRoot);\n\t\t\t\t} catch (error: any) {\n\t\t\t\t\tvscode.window.showErrorMessage(`Failed to install rhizome: ${(error as Error).message}`);\n\t\t\t\t\tconst diagnosticsFailure = await diagnosticRhizomeMissing();\n\t\t\t\t\tvscode.window.showInformationMessage(\n\t\t\t\t\t\t'Diagnostics after failed installation:\\n' + diagnosticsFailure.join('\\n')\n\t\t\t\t\t);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (response === 'View Guide') {\n\t\t\t\tvscode.env.openExternal(vscode.Uri.parse('https://github.com/your-rhizome-repo#installation'));\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// Not a UEU member, direct them to install themselves\n\t\t\tconst response = await vscode.window.showWarningMessage(\n\t\t\t\t'rhizome CLI not found. Please install it to use vscode-rhizome.',\n\t\t\t\t'View Installation Guide'\n\t\t\t);\n\t\t\tif (response === 'View Installation Guide') {\n\t\t\t\tvscode.env.openExternal(vscode.Uri.parse('https://github.com/your-rhizome-repo#installation'));\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tconst rhizomePath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.rhizome');\n\ttry {\n\t\tawait vscode.workspace.fs.stat(rhizomePath);\n\t\t// .rhizome exists, check for key config\n\t\tconst keyConfigured = await ensureOpenAIKeyConfigured(workspaceRoot);\n\t\treturn keyConfigured;\n\t} catch {\n\t\t// .rhizome doesn't exist, try to initialize\n\t\t// NOTE: --force flag auto-resolves conflicts from epistles plugin context sync\n\t\ttry {\n\t\t\tvscode.window.showInformationMessage('Initializing rhizome in workspace...');\n\t\t\tconst { execSync } = require('child_process');\n\t\t\texecSync('rhizome init --force', {\n\t\t\t\tcwd: workspaceRoot,\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 10000,\n\t\t\t});\n\t\t\tvscode.window.showInformationMessage('Rhizome initialized in workspace');\n\n\t\t\t// Now ask for key\n\t\t\tconst keyConfigured = await ensureOpenAIKeyConfigured(workspaceRoot);\n\t\t\treturn keyConfigured;\n\t\t} catch (error: any) {\n\t\t\tvscode.window.showErrorMessage(`Failed to initialize rhizome: ${(error as Error).message}`);\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Helper: Handle don-socratic response workflow\n *\n * Given selected code + persona, query rhizome and display in output channel.\n * Extracted so both \"ask don-socratic\" and \"ask inline question\" can use it.\n */\nasync function askPersonaAboutSelection(persona: string, personaDisplayName: string) {\n\tconst selection = getActiveSelection();\n\tif (!selection) return;\n\n\tconst { selectedText } = selection;\n\n\t// Ensure rhizome is initialized before querying\n\tconst workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\tif (!workspaceRoot) {\n\t\tvscode.window.showErrorMessage('No workspace folder open');\n\t\treturn;\n\t}\n\n\tconst initialized = await initializeRhizomeIfNeeded(workspaceRoot);\n\tif (!initialized) {\n\t\tvscode.window.showErrorMessage('Could not initialize rhizome. Check workspace permissions.');\n\t\treturn;\n\t}\n\n\tawait vscode.window.showInformationMessage(`Asking ${personaDisplayName}...`);\n\n\tconst outputChannel = vscode.window.createOutputChannel('vscode-rhizome');\n\toutputChannel.show(true);\n\n\ttry {\n\t\tconst response = await queryPersona(selectedText, persona, 30000, workspaceRoot);\n\t\tformatPersonaOutput(outputChannel, personaDisplayName, selectedText, response);\n\t} catch (error: any) {\n\t\toutputChannel.appendLine('');\n\t\toutputChannel.appendLine('Error calling rhizome CLI:');\n\t\toutputChannel.appendLine((error as Error).message);\n\t\toutputChannel.appendLine('');\n\t\toutputChannel.appendLine('Make sure rhizome is installed and in your PATH.');\n\t}\n}\n\n/**\n * Activate extension on startup\n */\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('vscode-rhizome activated');\n\tensureLocalBinOnPath();\n\n\t// ======================================\n\t// COMMAND: initialize rhizome in workspace\n\t// ======================================\n\tlet initDisposable = vscode.commands.registerCommand('vscode-rhizome.init', async () => {\n\t\tconst workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\t\tif (!workspaceRoot) {\n\t\t\tvscode.window.showErrorMessage('No workspace folder open');\n\t\t\treturn;\n\t\t}\n\n\t\tconst initialized = await initializeRhizomeIfNeeded(workspaceRoot);\n\t\tif (initialized) {\n\t\t\tvscode.window.showInformationMessage('Rhizome is ready in this workspace');\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(initDisposable);\n\n\t// ======================================\n\t// AUTOCOMPLETE: @rhizome ask <persona>\n\t// ======================================\n\t// Register a completion provider for @rhizome ask\n\tconst completionProvider = vscode.languages.registerCompletionItemProvider(\n\t\t{ scheme: 'file' }, // Apply to all files\n\t\t{\n\t\t\tasync provideCompletionItems(document, position) {\n\t\t\t\t// Get the line text up to the cursor\n\t\t\t\tconst lineText = document.lineAt(position).text.substring(0, position.character);\n\n\t\t\t\t// Check if we're in a @rhizome ask context\n\t\t\t\tif (!lineText.includes('@rhizome ask')) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\t// Get available personas\n\t\t\t\tconst personas = await getAvailablePersonas();\n\t\t\t\tconst items: vscode.CompletionItem[] = [];\n\n\t\t\t\tfor (const [name, role] of personas.entries()) {\n\t\t\t\t\tconst item = new vscode.CompletionItem(name, vscode.CompletionItemKind.User);\n\t\t\t\t\titem.detail = role;\n\t\t\t\t\titem.documentation = new vscode.MarkdownString(`**${name}**: ${role}`);\n\t\t\t\t\titem.insertText = name;\n\t\t\t\t\titems.push(item);\n\t\t\t\t}\n\n\t\t\t\treturn items;\n\t\t\t}\n\t\t},\n\t\t' ' // Trigger on space (after \"@rhizome ask \")\n\t);\n\n\tcontext.subscriptions.push(completionProvider);\n\n\t// ======================================\n\t// COMMAND: ask any persona (dynamic picker)\n\t// ======================================\n\tlet askPersonaDisposable = vscode.commands.registerCommand('vscode-rhizome.askPersona', async () => {\n\t\tconst selection = getActiveSelection();\n\t\tif (!selection) return;\n\n\t\t// Get available personas\n\t\tconst personas = await getAvailablePersonas();\n\t\tconst personaOptions = Array.from(personas.entries()).map(([name, role]) => ({\n\t\t\tlabel: name,\n\t\t\tdescription: role,\n\t\t}));\n\n\t\t// Show quick picker\n\t\tconst picked = await vscode.window.showQuickPick(personaOptions, {\n\t\t\tplaceHolder: 'Choose a persona to question your code',\n\t\t\tmatchOnDescription: true,\n\t\t});\n\n\t\tif (!picked) return;\n\n\t\tawait askPersonaAboutSelection(picked.label, picked.label);\n\t});\n\n\tcontext.subscriptions.push(askPersonaDisposable);\n\n\t// ======================================\n\t// COMMAND: voice control preview webview\n\t// ======================================\n\tconst voiceControlDisposable = registerVoiceControlCommand(context);\n\tcontext.subscriptions.push(voiceControlDisposable);\n\n\t// ======================================\n\t// COMMAND: stub generation\n\t// ======================================\n\t// don-socratic asks:\n\t// When someone invokes the stub command, what needs to happen?\n\t// 1. Find the @rhizome stub comment?\n\t// 2. Parse the function signature?\n\t// 3. Generate the stub?\n\t// 4. Insert it into the file?\n\t//\n\t// In what order? And how do you know each step succeeded?\n\t//\n\t// ANSWER (step-by-step workflow):\n\t// 1. Get active editor (vscode.window.activeTextEditor)\n\t// 2. Get the document text (editor.document.getText())\n\t// 3. Find all @rhizome stub comments (findStubComments from stubGenerator)\n\t// 4. If multiple, ask user which one (InputBox)\n\t// 5. For selected stub:\n\t//    a. Extract function signature\n\t//    b. Detect language from file extension\n\t//    c. Call generateStub(functionName, params, returnType, language)\n\t//    d. Call insertStub(code, line, generatedStub, language)\n\t// 6. Apply edit to document (TextEdit)\n\t// 7. Show success/error message\n\t//\n\t// Error handling: Show user what went wrong at each step\n\t//\n\tlet stubDisposable = vscode.commands.registerCommand('vscode-rhizome.stub', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor) {\n\t\t\tvscode.window.showErrorMessage('No active editor');\n\t\t\treturn;\n\t\t}\n\n\t\tconst document = editor.document;\n\t\tconst code = document.getText();\n\n\t\t// Detect language from file extension\n\t\tconst language = detectLanguage(document.languageId);\n\n\t\tif (!language) {\n\t\t\tvscode.window.showErrorMessage(\n\t\t\t\t`Unsupported language: ${document.languageId}. Use TypeScript, JavaScript, or Python.`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// Find @rhizome stub comments in the file\n\t\tconst stubs = findStubComments(code, language);\n\n\t\tif (stubs.length === 0) {\n\t\t\tvscode.window.showWarningMessage('No @rhizome stub comments found in this file');\n\t\t\treturn;\n\t\t}\n\n\t\t// If multiple stubs, ask user which one\n\t\tlet targetStub = stubs[0];\n\t\tif (stubs.length > 1) {\n\t\t\tconst picked = await vscode.window.showQuickPick(\n\t\t\t\tstubs.map((s) => `Line ${s.line}: ${s.functionName}`),\n\t\t\t\t{ placeHolder: 'Which function to stub?' }\n\t\t\t);\n\t\t\tif (!picked) return;\n\t\t\tconst index = stubs.map((s) => `Line ${s.line}: ${s.functionName}`).indexOf(picked);\n\t\t\ttargetStub = stubs[index];\n\t\t}\n\n\t\t// Generate stub code\n\t\tconst stub = generateStub(targetStub.functionName, targetStub.params, targetStub.returnType, language);\n\n\t\t// Insert stub into file\n\t\tconst modifiedCode = insertStub(code, targetStub.line, stub, language);\n\n\t\t// Apply edit to document\n\t\tconst fullRange = new vscode.Range(document.positionAt(0), document.positionAt(code.length));\n\t\tconst edit = new vscode.TextEdit(fullRange, modifiedCode);\n\n\t\t// Create workspace edit and apply\n\t\tconst workspaceEdit = new vscode.WorkspaceEdit();\n\t\tworkspaceEdit.set(document.uri, [edit]);\n\t\tawait vscode.workspace.applyEdit(workspaceEdit);\n\n\t\tvscode.window.showInformationMessage(`Stub created for ${targetStub.functionName}`);\n\t});\n\n\tcontext.subscriptions.push(stubDisposable);\n\n\t/**\n\t * Command: documentWithPersona\n\t *\n\t * don-socratic asks:\n\t * When we ask a persona to document code, what should the output look like?\n\t * Should it be a block comment before the selection? After? Inline?\n\t * Who decides the placement\u2014the persona or the user?\n\t *\n\t * ANSWER:\n\t * We insert persona's response as a comment block ABOVE the selection.\n\t * This follows the pattern of JSDoc/docstring conventions.\n\t * The persona suggests documentation; the user integrates it.\n\t */\n\tlet documentWithPersonaDisposable = vscode.commands.registerCommand(\n\t\t'vscode-rhizome.documentWithPersona',\n\t\tasync () => {\n\t\t\tconsole.log('[documentWithPersona] Command invoked');\n\t\t\tconst selection = getActiveSelection();\n\t\t\tif (!selection) {\n\t\t\t\tconsole.log('[documentWithPersona] No selection found');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { editor, selectedText } = selection;\n\t\t\tconst document = editor.document;\n\t\t\tconsole.log('[documentWithPersona] Selected text:', selectedText.substring(0, 50) + '...');\n\n\t\t\t// Get available personas\n\t\t\tconst personasMap = await getAvailablePersonas();\n\t\t\tconsole.log('[documentWithPersona] Available personas:', Array.from(personasMap.keys()));\n\t\t\tif (personasMap.size === 0) {\n\t\t\t\tconsole.log('[documentWithPersona] No personas available');\n\t\t\t\tvscode.window.showErrorMessage('No personas available. Check rhizome installation.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Show quick pick to choose persona\n\t\t\tconst personaOptions = Array.from(personasMap.entries()).map(([name, role]) => ({\n\t\t\t\tlabel: name,\n\t\t\t\tdescription: role || `Ask ${name} to document this`,\n\t\t\t}));\n\t\t\tconst picked = await vscode.window.showQuickPick(personaOptions, {\n\t\t\t\tplaceHolder: 'Which persona should document this code?',\n\t\t\t});\n\n\t\t\tif (!picked) {\n\t\t\t\tconsole.log('[documentWithPersona] User cancelled persona selection');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('[documentWithPersona] Selected persona:', picked.label);\n\n\t\t\t// Ensure rhizome is initialized\n\t\t\tconst workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\t\t\tif (!workspaceRoot) {\n\t\t\t\tconsole.log('[documentWithPersona] No workspace folder');\n\t\t\t\tvscode.window.showErrorMessage('No workspace folder open');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst initialized = await initializeRhizomeIfNeeded(workspaceRoot);\n\t\t\tif (!initialized) {\n\t\t\t\tconsole.log('[documentWithPersona] Rhizome initialization failed');\n\t\t\t\tvscode.window.showErrorMessage('Could not initialize rhizome.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Build prompt: ask persona to document the code\n\t\t\tconst prompt = `Please provide clear documentation/comments for this code:\\n\\n${selectedText}`;\n\t\t\tconsole.log('[documentWithPersona] Querying persona with prompt length:', prompt.length);\n\n\t\t\ttry {\n\t\t\t\tconst response = await queryPersona(prompt, picked.label, 30000, workspaceRoot);\n\t\t\t\tconsole.log('[documentWithPersona] Got response from persona:', response.substring(0, 100) + '...');\n\n\t\t\t\t// Detect language and format comment\n\t\t\t\tconst language = detectLanguage(document.languageId);\n\t\t\t\tconst commentPrefix = language === 'python' ? '#' : '//';\n\t\t\t\tconsole.log('[documentWithPersona] Language:', document.languageId, 'Prefix:', commentPrefix);\n\n\t\t\t\tconst commentLines = response.split('\\n').map((line) => `${commentPrefix} ${line}`);\n\t\t\t\tconst comment = commentLines.join('\\n');\n\t\t\t\tconsole.log('[documentWithPersona] Formatted comment:', comment.substring(0, 100) + '...');\n\n\t\t\t\t// Get insertion position (above selection)\n\t\t\t\tconst insertPos = editor.selection.start;\n\t\t\t\tconsole.log('[documentWithPersona] Insert position:', insertPos);\n\n\t\t\t\t// Insert comment\n\t\t\t\tconst edit = new vscode.TextEdit(\n\t\t\t\t\tnew vscode.Range(insertPos, insertPos),\n\t\t\t\t\t`${comment}\\n`\n\t\t\t\t);\n\t\t\t\tconst workspaceEdit = new vscode.WorkspaceEdit();\n\t\t\t\tworkspaceEdit.set(document.uri, [edit]);\n\t\t\t\tconsole.log('[documentWithPersona] Applying edit...');\n\t\t\t\tawait vscode.workspace.applyEdit(workspaceEdit);\n\t\t\t\tconsole.log('[documentWithPersona] Edit applied successfully');\n\n\t\t\t\tvscode.window.showInformationMessage(`${picked.label} documentation added above selection`);\n\t\t\t} catch (error: any) {\n\t\t\t\tconsole.log('[documentWithPersona] Error:', (error as Error).message);\n\t\t\t\tvscode.window.showErrorMessage(\n\t\t\t\t\t`Failed to get documentation from ${picked.label}: ${(error as Error).message}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t);\n\n\tcontext.subscriptions.push(documentWithPersonaDisposable);\n}\n\nexport function deactivate() {}\n", "/**\n * Stub Generator\n *\n * don-socratic asks:\n * Before you write a line, answer this: what does \"stub\" actually MEAN?\n * When a developer sees the generated stub, what must be there?\n * What must NOT be there?\n *\n * Think carefully. Write down your answer in the comment below before proceeding.\n *\n * ANSWER (from dev-guide + code-reviewer collaboration):\n * A stub for vscode-rhizome is:\n *\n * MUST HAVE:\n * \u2713 Function signature with available type information\n * \u2713 throw new Error('Not implemented') | raise NotImplementedError()\n * \u2713 TODO comment that mentions the function name\n * \u2713 Optional: ISO 8601 timestamp, user story reference (e.g., \"US-123: As a user...\")\n * \u2713 Language-specific syntax (TS throws Error, Python raises NotImplementedError)\n *\n * MUST NOT HAVE:\n * \u2717 Partial implementation or misleading logic\n * \u2717 Vague TODO (must include function name for context outside editor)\n * \u2717 Assumption about parameter types (infer from signature or mark as unknown)\n *\n * RATIONALE:\n * - Prevents linter errors (undefined function \u2192 defined, throws as expected)\n * - Forces explicit intent (TODO + timestamp = \"I thought about this\")\n * - Supports TODO backlog tracking (searchable by function name)\n * - Integrates with user story workflow (reference in comment)\n * - Language-consistent (developers recognize pattern across TS/JS/Python)\n */\n\n/**\n * Parse a function signature and generate a stub\n *\n * don-socratic asks:\n * What languages are we dealing with? (TS, JS, Python)\n * How do we know where to insert the stub?\n * What's the minimal stub that satisfies your definition above?\n *\n * TODO: Implement stub generation\n * TODO: What's the function signature?\n * TODO: What's the return type?\n * TODO: What error do we throw?\n * TODO: What TODO comment do we add?\n */\nexport function generateStub(\n\tfunctionName: string,\n\tparams: string,           // e.g., \"(x: number, y?: string)\" \u2014 keep as-is from signature\n\treturnType: string | null, // e.g., \"string\" or \"Promise<void>\" or null if untyped\n\tlanguage: 'typescript' | 'javascript' | 'python',\n\toptions?: {\n\t\ttimestamp?: string;   // ISO 8601: \"2025-10-23T21:00:00Z\" (optional)\n\t\tuserStory?: string;   // e.g., \"US-142: As a developer...\"  (optional)\n\t}\n): string {\n\t/**\n\t * BUILD THE TODO COMMENT\n\t * \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\t * This is what appears above the function.\n\t * Must include: function name (for TODO backlog search)\n\t * Optional: timestamp (when was this stubbed?), user story (why?)\n\t */\n\tlet todoComment = `TODO: Implement ${functionName}`;\n\n\tif (options?.timestamp) {\n\t\ttodoComment += ` (stubbed ${options.timestamp}`;\n\t\tif (options?.userStory) {\n\t\t\ttodoComment += `, ${options.userStory}`;\n\t\t}\n\t\ttodoComment += ')';\n\t} else if (options?.userStory) {\n\t\ttodoComment += ` (${options.userStory})`;\n\t}\n\n\t/**\n\t * LANGUAGE-SPECIFIC STUB BODY\n\t * \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\t * Two paths: TypeScript/JavaScript vs Python\n\t * Each throws/raises with function name for debugging\n\t */\n\tlet stubBody: string;\n\n\tif (language === 'python') {\n\t\t// Python uses indentation-relative code; caller will add indentation\n\t\t// Format: raise NotImplementedError('function_name')\n\t\tstubBody = `raise NotImplementedError('${functionName}')`;\n\t} else {\n\t\t// TypeScript/JavaScript: throw new Error(...)\n\t\t// Format: throw new Error('Not implemented: functionName')\n\t\tstubBody = `throw new Error('Not implemented: ${functionName}');`;\n\t}\n\n\t/**\n\t * ASSEMBLE THE STUB\n\t * \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\t * Return just the body (not the function signature).\n\t * Caller (insertStub) handles placing this inside the function.\n\t * Include the TODO comment so it appears above.\n\t */\n\treturn `${todoComment}\\n${stubBody}`;\n}\n\n\n\n/**\n * Find @rhizome stub comments in code\n *\n * don-socratic observes:\n * You asked: why use regex when AST exists?\n *\n * Good question. We use AST now. @babel/parser is a dependency.\n * You get robustness as the default, not an optional upgrade.\n *\n * For Python, we still use regex (the ast module requires execution context).\n * But for TS/JS? We parse it properly.\n *\n * This means:\n * \u2713 Destructured params work: function({a, b})\n * \u2713 Complex generics work: function<T extends Base>(x: T)\n * \u2713 Decorators, multiline sigs, edge cases\u2014all handled\n *\n * No more silent failures on complex code.\n * You get the right tool from the start.\n */\nexport function findStubComments(code: string, language: string): Array<{\n\tline: number;\n\tfunctionName: string;\n\tsignature: string;\n\tparams: string;\n\treturnType: string | null;\n}> {\n\tconst results: Array<{\n\t\tline: number;\n\t\tfunctionName: string;\n\t\tsignature: string;\n\t\tparams: string;\n\t\treturnType: string | null;\n\t}> = [];\n\n\tconst lines = code.split('\\n');\n\tconst markerRegex = /@rhizome\\s+stub/i;\n\n\t// Import parser for TS/JS (required dependency)\n\tlet parser: any = null;\n\tif (language === 'typescript' || language === 'javascript') {\n\t\tparser = require('@babel/parser');\n\t}\n\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tif (markerRegex.test(lines[i])) {\n\t\t\tconst markerLine = i;\n\n\t\t\t// Find next non-blank line\n\t\t\tlet signatureLine = i + 1;\n\t\t\twhile (\n\t\t\t\tsignatureLine < lines.length &&\n\t\t\t\tlines[signatureLine].trim() === ''\n\t\t\t) {\n\t\t\t\tsignatureLine++;\n\t\t\t}\n\n\t\t\tif (signatureLine >= lines.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Try AST first (TS/JS), always fall back to regex\n\t\t\tlet result = null;\n\n\t\t\tif (parser) {\n\t\t\t\ttry {\n\t\t\t\t\tresult = parseWithAST(\n\t\t\t\t\t\tlines,\n\t\t\t\t\t\tsignatureLine,\n\t\t\t\t\t\tmarkerLine,\n\t\t\t\t\t\tparser\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// AST failed, will try regex below\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If AST didn't work (or is Python), use regex\n\t\t\tif (!result) {\n\t\t\t\tresult = parseWithRegex(\n\t\t\t\t\tlines[signatureLine].trim(),\n\t\t\t\t\tmarkerLine,\n\t\t\t\t\tlanguage\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn results;\n}\n\n/**\n * Parse function signature using AST (@babel/parser for TS/JS)\n *\n * This is more robust than regex. It understands:\n * \u2713 Destructured params: function({a, b})\n * \u2713 Complex generics: function<T extends Base>(x: T)\n * \u2713 Arrow functions with multiline params\n * \u2713 Default values and optional params\n *\n * But it's also more complex. We wrap it in try/catch so\n * if the code is malformed, we gracefully fall back to regex.\n */\nfunction parseWithAST(\n\tlines: string[],\n\tsignatureLine: number,\n\tmarkerLine: number,\n\tparser: any\n\t// fullCode: not used in current impl, but kept in signature for future AST context needs\n): {\n\tline: number;\n\tfunctionName: string;\n\tsignature: string;\n\tparams: string;\n\treturnType: string | null;\n} | null {\n\ttry {\n\t\t// Reconstruct multi-line function signature\n\t\t// (signatures can span multiple lines)\n\t\tlet signatureText = '';\n\t\tlet currentLine = signatureLine;\n\n\t\t// Scan until we find the opening brace\n\t\twhile (currentLine < lines.length) {\n\t\t\tsignatureText += lines[currentLine];\n\t\t\tif (signatureText.includes('{')) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsignatureText += '\\n';\n\t\t\tcurrentLine++;\n\t\t}\n\n\t\t// Parse just the function declaration\n\t\t// Wrap in a scope to make it valid JavaScript\n\t\tconst wrapped = `function _wrapper() { ${signatureText}; }`;\n\n\t\tconst ast = parser.parse(wrapped, {\n\t\t\tsourceType: 'module',\n\t\t\tplugins: ['typescript'],\n\t\t});\n\n\t\t// Extract the function node from the AST\n\t\t// This is a deep dive\u2014but it's worth seeing how AST works\n\t\tconst wrapper = ast.program.body[0]?.body?.body[0];\n\t\tif (!wrapper || wrapper.type !== 'FunctionDeclaration') {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst func = wrapper;\n\t\tconst name = func.id.name;\n\t\tconst params = signatureText\n\t\t\t.substring(signatureText.indexOf('('), signatureText.indexOf(')') + 1)\n\t\t\t.trim();\n\n\t\t// Extract return type if present (TS annotation)\n\t\tconst returnTypeMatch = signatureText.match(\n\t\t\t/\\):\\s*([\\w<>\\[\\]\\s|&,]+)\\s*[{]/\n\t\t);\n\t\tconst returnType = returnTypeMatch\n\t\t\t? returnTypeMatch[1].trim()\n\t\t\t: null;\n\n\t\treturn {\n\t\t\tline: markerLine,\n\t\t\tfunctionName: name,\n\t\t\tsignature: signatureText.split('\\n')[0],\n\t\t\tparams,\n\t\t\treturnType,\n\t\t};\n\t} catch (e) {\n\t\t// AST parsing failed. Will fall through to regex.\n\t\treturn null;\n\t}\n}\n\n/**\n * Parse function signature using regex (fallback)\n *\n * Simple, no dependencies. But fragile.\n * Handles 90% of real code. The other 10%? Silent failure.\n *\n * This is the constraint you feel when regex breaks.\n * When you hit it, you'll know exactly why we offer AST as an alternative.\n */\nfunction parseWithRegex(\n\tsig: string,\n\tmarkerLine: number,\n\tlanguage: string\n): {\n\tline: number;\n\tfunctionName: string;\n\tsignature: string;\n\tparams: string;\n\treturnType: string | null;\n} | null {\n\tlet match;\n\tlet name, params, returnType;\n\n\tif (language === 'python') {\n\t\tconst pythonFunctionRegex =\n\t\t\t/^(?:async\\s+)?def\\s+(\\w+)\\s*(\\([^)]*\\))(?:\\s*->\\s*([\\w\\[\\]]+))?:/;\n\t\tmatch = sig.match(pythonFunctionRegex);\n\t\tif (match) {\n\t\t\tname = match[1];\n\t\t\tparams = match[2];\n\t\t\treturnType = match[3] || null;\n\t\t}\n\t} else {\n\t\t// TypeScript / JavaScript\n\t\tconst tsJsFunctionRegex =\n\t\t\t/^(?:export\\s+)?(?:const\\s+)?(?:async\\s+)?(?:function\\s+)?(\\w+)\\s*(\\([^)]*\\))(?:\\s*:\\s*([\\w<>\\[\\]|\\s]+))?/;\n\t\tmatch = sig.match(tsJsFunctionRegex);\n\t\tif (match) {\n\t\t\tname = match[1];\n\t\t\tparams = match[2];\n\t\t\treturnType = match[3]?.trim() || null;\n\t\t}\n\t}\n\n\tif (name && params) {\n\t\treturn {\n\t\t\tline: markerLine,\n\t\t\tfunctionName: name,\n\t\t\tsignature: sig,\n\t\t\tparams,\n\t\t\treturnType: returnType ?? null,\n\t\t};\n\t}\n\n\treturn null;\n}\n\n/**\n * Insert stub into code at specified location\n *\n * don-socratic observes:\n * You've found the stub marker. You know the function signature.\n * Now: where does the body live? How do you know where one function ends and the next begins?\n *\n * Here's the honest answer: we use heuristics. String manipulation, not AST.\n * This works for 95% of real code. The 5% edge cases? We don't handle them.\n * Why? Because parsing scope is hard. Building an AST is overkill for a v1.\n *\n * But you'll feel the constraint. When it works, you'll wonder why.\n * When it breaks, you'll know exactly what to fix.\n */\nexport function insertStub(\n\tcode: string,\n\tline: number,           // 0-indexed line number where @rhizome stub comment is\n\tstub: string,           // Generated stub code from generateStub()\n\tlanguage: string,\n): string {\n\tconst lineEnding = code.includes('\\r\\n') ? '\\r\\n' : '\\n';\n\tconst lines = code.split('\\n');\n\n\tif (line < 0 || line >= lines.length) {\n\t\tthrow new Error(`Invalid line number: ${line}`);\n\t}\n\n\t// Find the function signature (next non-blank line after marker)\n\tlet signatureLine = line + 1;\n\twhile (signatureLine < lines.length && lines[signatureLine].trim() === '') {\n\t\tsignatureLine++;\n\t}\n\tif (signatureLine >= lines.length) {\n\t\tthrow new Error('No function signature found after @rhizome stub marker');\n\t}\n\n\tconst signatureText = lines[signatureLine];\n\tconst indentation = signatureText.match(/^\\s*/)?.[0] || '';\n\n\t/**\n\t * DECISION: How do we find where the function body starts?\n\t *\n\t * We look for opening brace (TS/JS) or colon (Python).\n\t * If not on the signature line, we scan forward line-by-line.\n\t *\n\t * CONSTRAINT: This fails if:\n\t * - { or : appears in a string literal on the signature line\n\t * - Function signature spans 10+ lines (we'd scan too far)\n\t * - Comments contain { or :\n\t *\n\t * TRADE-OFF: We chose simplicity over bulletproof parsing.\n\t * If you need to handle complex signatures, you'll want a real parser (@babel/parser or ast module).\n\t * For now, this works for 95% of function declarations.\n\t */\n\tlet openingBraceLine = signatureLine;\n\n\tif (language === 'python') {\n\t\t// Python: find the line ending with ':'\n\t\tif (!signatureText.trimEnd().endsWith(':')) {\n\t\t\topeningBraceLine = signatureLine + 1;\n\t\t\twhile (\n\t\t\t\topeningBraceLine < lines.length &&\n\t\t\t\t!lines[openingBraceLine].trimEnd().endsWith(':')\n\t\t\t) {\n\t\t\t\topeningBraceLine++;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// TypeScript/JavaScript: find the line containing '{'\n\t\tif (signatureText.indexOf('{') === -1) {\n\t\t\topeningBraceLine = signatureLine + 1;\n\t\t\twhile (\n\t\t\t\topeningBraceLine < lines.length &&\n\t\t\t\tlines[openingBraceLine].indexOf('{') === -1\n\t\t\t) {\n\t\t\t\topeningBraceLine++;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Prepare the stub with indentation\n\tconst stubLines = stub.split('\\n');\n\tconst bodyIndentation = indentation + '\\t';\n\tconst indentedStub = stubLines.map((l) => (l === '' ? '' : bodyIndentation + l));\n\n\t/**\n\t * DECISION: Where do we insert the stub?\n\t *\n\t * TS/JS: Right after the opening brace {\n\t * Python: Right after the colon :\n\t *\n\t * CONSTRAINT: We assume the function body is empty (or we're inserting at the start).\n\t * If there's existing code, we insert above it (which is correct for stubs).\n\t *\n\t * We add a closing brace for TS/JS, but ONLY if one doesn't already exist nearby.\n\t * This heuristic is fragile. If a function has existing code, we might not add the brace.\n\t * But for stub generation (empty functions), it works.\n\t */\n\tif (language === 'python') {\n\t\tlines.splice(openingBraceLine + 1, 0, ...indentedStub);\n\t} else {\n\t\t// TypeScript/JavaScript\n\t\tlines.splice(openingBraceLine + 1, 0, ...indentedStub);\n\n\t\t// Check if we need to add a closing brace\n\t\tconst nextLineAfterStub = openingBraceLine + indentedStub.length + 1;\n\t\tconst hasClosingBrace =\n\t\t\tnextLineAfterStub < lines.length &&\n\t\t\tlines[nextLineAfterStub].trim().startsWith('}');\n\n\t\tif (!hasClosingBrace) {\n\t\t\tlines.splice(nextLineAfterStub, 0, indentation + '}');\n\t\t}\n\t}\n\n\treturn lines.join(lineEnding);\n}\n", "import * as vscode from 'vscode';\nimport { VoiceTranscriber } from './voiceTranscriber';\nimport { VoiceUsageTracker, UsageTotals } from './voiceUsageTracker';\n\nexport interface VoiceTranscriptPayload {\n\ttext: string;\n\tdurationSec?: number;\n\tsizeBytes?: number;\n}\n\nexport interface VoicePanelHandlerTools {\n\tappendOutput(line: string): void;\n\tshowOutput(): void;\n}\n\nexport interface VoicePanelHandlers {\n\tonTranscript?: (payload: VoiceTranscriptPayload, tools: VoicePanelHandlerTools) => Promise<void> | void;\n}\n\n/**\n * VoiceControlPanel manages the lifecycle of the Rhizome voice webview.\n * The panel is responsible for presenting the UI and relaying messages\n * back to the extension host.\n */\nexport class VoiceControlPanel {\n\tprivate panel: vscode.WebviewPanel | undefined;\n\tprivate readonly outputChannel = vscode.window.createOutputChannel('Rhizome Voice Preview');\n\tprivate readonly usageTracker = new VoiceUsageTracker();\n\tprivate readonly transcriber: VoiceTranscriber;\n\n\tconstructor(private readonly context: vscode.ExtensionContext, private readonly handlers: VoicePanelHandlers = {}) {\n\t\tthis.transcriber = new VoiceTranscriber(\n\t\t\t{\n\t\t\t\toutputChannel: this.outputChannel,\n\t\t\t\tonTranscript: (transcript) => {\n\t\t\t\t\tvscode.window.setStatusBarMessage(`Voice transcript ready: ${truncate(transcript, 60)}`, 5000);\n\t\t\t\t},\n\t\t\t\tonResult: async (result) => {\n\t\t\t\t\tawait this.handleTranscriptionResult(result);\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n    public show(): void {\n        if (this.panel) {\n            this.panel.reveal();\n            return;\n        }\n\n        this.panel = vscode.window.createWebviewPanel(\n            'rhizomeVoiceControl',\n            'Rhizome Voice Control (Preview)',\n            vscode.ViewColumn.One,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.joinPath(this.context.extensionUri, 'media'),\n                ],\n            }\n        );\n\n        this.panel.webview.html = this.getHtmlForWebview(this.panel.webview);\n\n        this.panel.onDidDispose(() => {\n            this.panel = undefined;\n        });\n\n\t\tthis.panel.webview.onDidReceiveMessage((message) => {\n\t\t\tswitch (message.type) {\n\t\t\t\tcase 'voiceStatus':\n\t\t\t\t\tvscode.window.setStatusBarMessage(message.value, 3000);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'audioChunk':\n\t\t\t\t\tthis.handleAudioChunk(message.rawAudioBase64, message.size);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'error':\n\t\t\t\t\tvscode.window.showErrorMessage(message.value);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handleAudioChunk(base64Audio: string, sizeBytes?: number) {\n\t\tif (!base64Audio) {\n\t\t\tvscode.window.showErrorMessage('Received empty audio payload from webview');\n\t\t\treturn;\n\t\t}\n\t\tthis.transcriber.handleChunk(base64Audio, { sizeBytes });\n\t}\n\n\tprivate async handleTranscriptionResult(result: { text: string; durationSec?: number; sizeBytes?: number }) {\n\t\tconst transcript = result.text.trim();\n\t\tconst totals = this.usageTracker.record({\n\t\t\tsizeBytes: result.sizeBytes,\n\t\t\tdurationSec: result.durationSec,\n\t\t});\n\t\tthis.outputChannel.appendLine(\n\t\t\t`[usage] chunks=${totals.chunks} bytes=${totals.totalBytes} duration=${totals.totalDurationSec.toFixed(2)}s cost=$${totals.estimatedCostUSD.toFixed(4)}`\n\t\t);\n\t\tthis.postUsageUpdate(totals);\n\t\tthis.postTranscriptToWebview(transcript);\n\t\tif (this.handlers.onTranscript) {\n\t\t\tawait this.handlers.onTranscript(\n\t\t\t\t{\n\t\t\t\t\ttext: transcript,\n\t\t\t\t\tdurationSec: result.durationSec,\n\t\t\t\t\tsizeBytes: result.sizeBytes,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tappendOutput: (line) => {\n\t\t\t\t\t\tthis.outputChannel.appendLine(line);\n\t\t\t\t\t},\n\t\t\t\t\tshowOutput: () => this.outputChannel.show(true),\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate postUsageUpdate(totals: UsageTotals) {\n\t\tthis.panel?.webview.postMessage({\n\t\t\ttype: 'usageUpdate',\n\t\t\ttotals: {\n\t\t\t\tchunks: totals.chunks,\n\t\t\t\ttotalBytes: totals.totalBytes,\n\t\t\t\ttotalDurationSec: totals.totalDurationSec,\n\t\t\t\testimatedCostUSD: totals.estimatedCostUSD,\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate postTranscriptToWebview(transcript: string) {\n\t\tthis.panel?.webview.postMessage({\n\t\t\ttype: 'transcript',\n\t\t\ttext: transcript,\n\t\t});\n\t}\n\n    private getHtmlForWebview(webview: vscode.Webview): string {\n        const scriptUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this.context.extensionUri, 'media', 'voicePanel.js')\n        );\n\n        const styleUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this.context.extensionUri, 'media', 'voicePanel.css')\n        );\n\n        const nonce = getNonce();\n\n        return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}'; connect-src ${webview.cspSource} https://api.openai.com;\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"${styleUri}\" />\n    <title>Rhizome Voice Control</title>\n</head>\n<body>\n    <main>\n        <h1>Rhizome Voice Control (Preview)</h1>\n        <p>Opt-in to microphone access to experiment with voice-driven Rhizome prompts.</p>\n        <div class=\"controls\">\n            <button id=\"startButton\">Start Listening</button>\n            <button id=\"stopButton\" disabled>Stop</button>\n        </div>\n        <section class=\"status\" id=\"status\">Idle</section>\n        <section class=\"usage\" id=\"usage\">Usage: 0 chunks \u00B7 0.00s \u00B7 $0.0000</section>\n        <section class=\"transcript\" id=\"transcript\"></section>\n    </main>\n    <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n</body>\n</html>`;\n    }\n}\n\nfunction getNonce(): string {\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\treturn Array.from({ length: 16 }, () => possible[Math.floor(Math.random() * possible.length)]).join('');\n}\n\nfunction truncate(text: string, maxLength: number): string {\n\tif (text.length <= maxLength) {\n\t\treturn text;\n\t}\n\treturn `${text.slice(0, maxLength - 1)}\u2026`;\n}\n\nexport function registerVoiceControlCommand(\n\tcontext: vscode.ExtensionContext,\n\thandlers: VoicePanelHandlers = {}\n): vscode.Disposable {\n\tconst panel = new VoiceControlPanel(context, handlers);\n\treturn vscode.commands.registerCommand('vscode-rhizome.openVoiceControl', () => {\n\t\tpanel.show();\n\t});\n}\n", "import * as https from 'https';\nimport { Buffer } from 'buffer';\nimport { randomBytes } from 'crypto';\n\nexport interface TranscriptionOptions {\n\tmodel?: string;\n}\n\nexport interface TranscriptionResult {\n\ttext: string;\n\tdurationSec?: number;\n\tmodel?: string;\n}\n\nexport async function transcribeAudioChunk(\n\tbase64Audio: string,\n\toptions: TranscriptionOptions = {}\n): Promise<TranscriptionResult> {\n\tconst apiKey = process.env.OPENAI_API_KEY;\n\tif (!apiKey) {\n\t\tthrow new Error('OpenAI API key not configured. Run the Rhizome init flow or set OPENAI_API_KEY.');\n\t}\n\n\tif (!base64Audio || base64Audio.length === 0) {\n\t\tthrow new Error('Empty audio payload received');\n\t}\n\n\tconst audioBuffer = Buffer.from(base64Audio, 'base64');\n\tconst boundary = `----rhizome-voice-${randomBytes(8).toString('hex')}`;\n\tconst model = options.model ?? 'gpt-4o-transcribe';\n\n\tconst parts: Buffer[] = [];\n\tconst push = (content: string) => {\n\t\tparts.push(Buffer.from(content, 'utf-8'));\n\t};\n\n\tpush(`--${boundary}\\r\\n`);\n\tpush('Content-Disposition: form-data; name=\"model\"\\r\\n\\r\\n');\n\tpush(`${model}\\r\\n`);\n\n\tpush(`--${boundary}\\r\\n`);\n\tpush('Content-Disposition: form-data; name=\"response_format\"\\r\\n\\r\\n');\n\tpush('json\\r\\n');\n\n\tpush(`--${boundary}\\r\\n`);\n\tpush('Content-Disposition: form-data; name=\"file\"; filename=\"chunk.webm\"\\r\\n');\n\tpush('Content-Type: audio/webm\\r\\n\\r\\n');\n\tparts.push(audioBuffer);\n\tpush('\\r\\n');\n\tpush(`--${boundary}--\\r\\n`);\n\n\tconst body = Buffer.concat(parts);\n\n\tconst requestOptions: https.RequestOptions = {\n\t\thostname: 'api.openai.com',\n\t\tpath: '/v1/audio/transcriptions',\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${apiKey}`,\n\t\t\t'Content-Type': `multipart/form-data; boundary=${boundary}`,\n\t\t\t'Content-Length': body.length,\n\t\t},\n\t};\n\n\tconst responseBody = await new Promise<string>((resolve, reject) => {\n\t\tconst req = https.request(requestOptions, (res) => {\n\t\t\tconst chunks: Buffer[] = [];\n\n\t\t\tres.on('data', (chunk: Buffer) => chunks.push(chunk));\n\t\t\tres.on('error', reject);\n\t\t\tres.on('end', () => {\n\t\t\t\tconst payload = Buffer.concat(chunks).toString('utf-8');\n\t\t\t\tif (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n\t\t\t\t\tresolve(payload);\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error(`OpenAI transcription failed (${res.statusCode ?? 'unknown'}): ${payload}`));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treq.on('error', reject);\n\t\treq.write(body);\n\t\treq.end();\n\t});\n\n\ttry {\n\t\tconst parsed = JSON.parse(responseBody);\n\t\tconst text = typeof parsed.text === 'string' ? parsed.text : String(responseBody).trim();\n\t\tconst duration = typeof parsed.duration === 'number' ? parsed.duration : undefined;\n\t\treturn {\n\t\t\ttext: text.trim(),\n\t\t\tdurationSec: duration,\n\t\t\tmodel: parsed.model ?? model,\n\t\t};\n\t} catch {\n\t\treturn {\n\t\t\ttext: responseBody.trim(),\n\t\t\tmodel,\n\t\t};\n\t}\n}\n", "import type * as vscode from 'vscode';\nimport { transcribeAudioChunk, TranscriptionResult } from './openaiSpeechClient';\n\nexport interface OutputChannelLike {\n\tappendLine(value: string): void;\n\tshow(preserveFocus?: boolean): void;\n}\n\nexport interface TranscriptHandlerOptions {\n\toutputChannel?: OutputChannelLike;\n\tonTranscript?: (transcript: string) => void;\n\tonResult?: (result: TranscriptionResult & { sizeBytes?: number }) => void;\n}\n\ntype TranscribeFn = (base64: string) => Promise<TranscriptionResult>;\n\nexport class VoiceTranscriber {\n\tprivate readonly outputChannel: OutputChannelLike;\n\tprivate readonly onTranscript: (transcript: string) => void;\n\tprivate readonly onResult?: (result: TranscriptionResult & { sizeBytes?: number }) => void;\n\tprivate pending: Promise<void> = Promise.resolve();\n\n\tconstructor(options: TranscriptHandlerOptions = {}, private readonly transcribe: TranscribeFn = transcribeAudioChunk) {\n\t\tthis.outputChannel = options.outputChannel ?? createOutputChannel();\n\t\tthis.onTranscript = options.onTranscript ?? (() => {});\n\t\tthis.onResult = options.onResult;\n\t}\n\n\tpublic handleChunk(base64Audio: string, metadata: { sizeBytes?: number } = {}): void {\n\t\tthis.pending = this.pending.then(async () => {\n\t\t\tawait this.processChunk(base64Audio, metadata);\n\t\t}).catch((error) => {\n\t\t\tthis.reportError(error as Error);\n\t\t});\n\t}\n\n\tprivate async processChunk(base64Audio: string, metadata: { sizeBytes?: number }): Promise<void> {\n\t\tthis.outputChannel.appendLine('Transcribing audio chunk\u2026');\n\t\tconst result = await this.transcribe(base64Audio);\n\t\tconst transcript = result.text;\n\t\tif (!transcript || transcript.trim().length === 0) {\n\t\t\tthis.outputChannel.appendLine('Received empty transcript');\n\t\t\treturn;\n\t\t}\n\t\tthis.outputChannel.appendLine(`[${new Date().toLocaleTimeString()}] ${transcript.trim()}`);\n\t\tthis.outputChannel.show(true);\n\t\tthis.onTranscript(transcript.trim());\n\t\tif (this.onResult) {\n\t\t\tthis.onResult({ ...result, ...metadata });\n\t\t}\n\t}\n\n\tprivate reportError(error: Error): void {\n\t\tconst message = `Voice transcription error: ${error.message}`;\n\t\tthis.outputChannel.appendLine(message);\n\t\tif (vscodeApi) {\n\t\t\tvscodeApi.window.showErrorMessage(message);\n\t\t}\n\t}\n}\n\nlet vscodeApi: typeof import('vscode') | undefined;\ntry {\n\tvscodeApi = require('vscode');\n} catch {\n\tvscodeApi = undefined;\n}\n\nfunction createOutputChannel(): OutputChannelLike {\n\tif (vscodeApi) {\n\t\treturn vscodeApi.window.createOutputChannel('Rhizome Voice Preview');\n\t}\n\tthrow new Error('VS Code API unavailable: provide an OutputChannel in TranscriptHandlerOptions');\n}\n", "const DEFAULT_COST_PER_MINUTE_USD = 0.006; // Whisper pricing as of Oct 2024\nconst BYTES_PER_SECOND_FALLBACK = 32000; // Approx. 256 kbps stream when duration unavailable\n\nexport interface UsageTotals {\n\tchunks: number;\n\ttotalBytes: number;\n\ttotalDurationSec: number;\n\testimatedCostUSD: number;\n}\n\nexport interface UsageSample {\n\tsizeBytes?: number;\n\tdurationSec?: number;\n}\n\nexport class VoiceUsageTracker {\n\tprivate chunks = 0;\n\tprivate totalBytes = 0;\n\tprivate totalDurationSec = 0;\n\n\tconstructor(private readonly costPerMinuteUsd = DEFAULT_COST_PER_MINUTE_USD) {}\n\n\trecord(sample: UsageSample): UsageTotals {\n\t\tthis.chunks += 1;\n\t\tif (sample.sizeBytes) {\n\t\t\tthis.totalBytes += sample.sizeBytes;\n\t\t}\n\t\tconst duration = sample.durationSec ?? this.estimateDuration(sample.sizeBytes);\n\t\tthis.totalDurationSec += duration;\n\t\treturn this.getTotals();\n\t}\n\n\tgetTotals(): UsageTotals {\n\t\tconst minutes = this.totalDurationSec / 60;\n\t\tconst estimatedCostUSD = minutes * this.costPerMinuteUsd;\n\t\treturn {\n\t\t\tchunks: this.chunks,\n\t\t\ttotalBytes: this.totalBytes,\n\t\t\ttotalDurationSec: this.totalDurationSec,\n\t\t\testimatedCostUSD,\n\t\t};\n\t}\n\n\tprivate estimateDuration(sizeBytes?: number): number {\n\t\tif (!sizeBytes || sizeBytes <= 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn sizeBytes / BYTES_PER_SECOND_FALLBACK;\n\t}\n}\n\n", "import * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\nconst RHIZOME_BINARY_NAME = 'rhizome';\n\nexport const DEFAULT_RHIZOME_LOCATIONS: string[] = [\n\tpath.join(os.homedir(), '.local', 'bin', RHIZOME_BINARY_NAME),\n\tpath.join(os.homedir(), 'bin', RHIZOME_BINARY_NAME),\n\tpath.join(os.homedir(), '.rhizome', 'bin', RHIZOME_BINARY_NAME),\n\t'/usr/local/bin/rhizome',\n\t'/usr/bin/rhizome',\n];\n\nfunction parseCustomLocations(): string[] {\n\tconst envPaths = process.env.RHIZOME_CUSTOM_PATHS;\n\tif (!envPaths) {\n\t\treturn [];\n\t}\n\treturn envPaths\n\t\t.split(path.delimiter)\n\t\t.map((entry) => entry.trim())\n\t\t.filter((entry) => entry.length > 0);\n}\n\nexport function getCandidateLocations(): string[] {\n\tconst combined = [...parseCustomLocations(), ...DEFAULT_RHIZOME_LOCATIONS];\n\tconst seen = new Set<string>();\n\tconst deduped: string[] = [];\n\tfor (const location of combined) {\n\t\tconst normalized = path.normalize(location);\n\t\tif (!seen.has(normalized)) {\n\t\t\tseen.add(normalized);\n\t\t\tdeduped.push(normalized);\n\t\t}\n\t}\n\treturn deduped;\n}\n\nexport function findRhizomeOnDisk(pathExists: (candidate: string) => boolean = fs.existsSync): string | null {\n\tfor (const candidate of getCandidateLocations()) {\n\t\tif (pathExists(candidate)) {\n\t\t\treturn candidate;\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * dev-guide reflection:\n * We expect rhizome to live in a handful of predictable locations. Rather than\n * assuming the user's PATH is configured, we check disk first (covers ~/.local/bin)\n * and only fall back to PATH resolution via `rhizome --version` as a final resort.\n * This keeps the experience frictionless for CLI installs that do not export PATH.\n */\nexport function isRhizomeInstalled(): boolean {\n\tif (findRhizomeOnDisk()) {\n\t\treturn true;\n\t}\n\n\ttry {\n\t\texecSync(`${RHIZOME_BINARY_NAME} --version`, {\n\t\t\tencoding: 'utf-8',\n\t\t\ttimeout: 2000,\n\t\t\tstdio: 'pipe',\n\t\t});\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\nexport function ensureLocalBinOnPath(): void {\n\tconst localBin = path.join(os.homedir(), '.local', 'bin');\n\tconst pathValue = process.env.PATH ?? '';\n\tconst segments = pathValue.length > 0 ? pathValue.split(path.delimiter) : [];\n\tif (!segments.includes(localBin)) {\n\t\tsegments.unshift(localBin);\n\t\tprocess.env.PATH = segments.join(path.delimiter);\n\t}\n}\n"],
  "mappings": "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AAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,IAAG,MAAK,GAAE,KAAI,MAAK,IAAG,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,MAAK,IAAG,IAAG,IAAG,KAAI,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,KAAI,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,G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",
  "names": ["Position", "constructor", "line", "col", "index", "column", "SourceLocation", "start", "end", "filename", "identifierName", "createPositionWithColumnOffset", "position", "columnOffset", "code", "ModuleErrors", "ImportMetaOutsideModule", "message", "ImportOutsideModule", "NodeDescriptions", "ArrayPattern", "AssignmentExpression", "AssignmentPattern", "ArrowFunctionExpression", "ConditionalExpression", "CatchClause", "ForOfStatement", "ForInStatement", "ForStatement", "FormalParameters", "Identifier", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ObjectPattern", "ParenthesizedExpression", "RestElement", "UpdateExpression", "true", "false", "VariableDeclarator", "YieldExpression", "toNodeDescription", "node", "type", "prefix", "StandardErrors", "AccessorIsGenerator", "kind", "ArgumentsInClass", "AsyncFunctionInSingleStatementContext", "AwaitBindingIdentifier", "AwaitBindingIdentifierInStaticBlock", "AwaitExpressionFormalParameter", "AwaitUsingNotInAsyncContext", "AwaitNotInAsyncContext", "BadGetterArity", "BadSetterArity", "BadSetterRestParameter", "ConstructorClassField", "ConstructorClassPrivateField", "ConstructorIsAccessor", "ConstructorIsAsync", "ConstructorIsGenerator", "DeclarationMissingInitializer", "DecoratorArgumentsOutsideParentheses", "DecoratorBeforeExport", "DecoratorsBeforeAfterExport", "DecoratorConstructor", "DecoratorExportClass", "DecoratorSemicolon", "DecoratorStaticBlock", "DeferImportRequiresNamespace", "DeletePrivateField", "DestructureNamedImport", "DuplicateConstructor", "DuplicateDefaultExport", "DuplicateExport", "exportName", "DuplicateProto", "DuplicateRegExpFlags", "ElementAfterRest", "EscapedCharNotAnIdentifier", "ExportBindingIsString", "localName", "ExportDefaultFromAsIdentifier", "ForInOfLoopInitializer", "ForInUsing", "ForOfAsync", "ForOfLet", "GeneratorInSingleStatementContext", "IllegalBreakContinue", "IllegalLanguageModeDirective", "IllegalReturn", "ImportAttributesUseAssert", "ImportBindingIsString", "importName", "ImportCallArity", "ImportCallNotNewExpression", "ImportCallSpreadArgument", "ImportJSONBindingNotDefault", "ImportReflectionHasAssertion", "ImportReflectionNotBinding", "IncompatibleRegExpUVFlags", "InvalidBigIntLiteral", "InvalidCodePoint", "InvalidCoverDiscardElement", "InvalidCoverInitializedName", "InvalidDecimal", "InvalidDigit", "radix", "InvalidEscapeSequence", "InvalidEscapeSequenceTemplate", "InvalidEscapedReservedWord", "reservedWord", "InvalidIdentifier", "InvalidLhs", "ancestor", "InvalidLhsBinding", "InvalidLhsOptionalChaining", "InvalidNumber", "InvalidOrMissingExponent", "InvalidOrUnexpectedToken", "unexpected", "InvalidParenthesizedAssignment", "InvalidPrivateFieldResolution", "InvalidPropertyBindingPattern", "InvalidRecordProperty", "InvalidRestAssignmentPattern", "LabelRedeclaration", "labelName", "LetInLexicalBinding", "LineTerminatorBeforeArrow", "MalformedRegExpFlags", "MissingClassName", "MissingEqInAssignment", "MissingSemicolon", "MissingPlugin", "missingPlugin", "map", "name", "JSON", "stringify", "join", "MissingOneOfPlugins", "MissingUnicodeEscape", "MixingCoalesceWithLogical", "ModuleAttributeDifferentFromType", "ModuleAttributeInvalidValue", "ModuleAttributesWithDuplicateKeys", "key", "ModuleExportNameHasLoneSurrogate", "surrogateCharCode", "toString", "ModuleExportUndefined", "MultipleDefaultsInSwitch", "NewlineAfterThrow", "NoCatchOrFinally", "NumberIdentifier", "NumericSeparatorInEscapeSequence", "ObsoleteAwaitStar", "OptionalChainingNoNew", "OptionalChainingNoTemplate", "OverrideOnConstructor", "ParamDupe", "PatternHasAccessor", "PatternHasMethod", "PrivateInExpectedIn", "PrivateNameRedeclaration", "RecordExpressionBarIncorrectEndSyntaxType", "RecordExpressionBarIncorrectStartSyntaxType", "RecordExpressionHashIncorrectStartSyntaxType", "RecordNoProto", "RestTrailingComma", "SloppyFunction", "SloppyFunctionAnnexB", "SourcePhaseImportRequiresDefault", "StaticPrototype", "SuperNotAllowed", "SuperPrivateField", "TrailingDecorator", "TupleExpressionBarIncorrectEndSyntaxType", "TupleExpressionBarIncorrectStartSyntaxType", "TupleExpressionHashIncorrectStartSyntaxType", "UnexpectedArgumentPlaceholder", "UnexpectedAwaitAfterPipelineBody", "UnexpectedDigitAfterHash", "UnexpectedImportExport", "UnexpectedKeyword", "keyword", "UnexpectedLeadingDecorator", "UnexpectedLexicalDeclaration", "UnexpectedNewTarget", "UnexpectedNumericSeparator", "UnexpectedPrivateField", "UnexpectedReservedWord", "UnexpectedSuper", "UnexpectedToken", "expected", "UnexpectedTokenUnaryExponentiation", "UnexpectedUsingDeclaration", "UnexpectedVoidPattern", "UnsupportedBind", "UnsupportedDecoratorExport", "UnsupportedDefaultExport", "UnsupportedImport", "UnsupportedMetaProperty", "target", "onlyValidPropertyName", "UnsupportedParameterDecorator", "UnsupportedPropertyDecorator", "UnsupportedSuper", "UnterminatedComment", "UnterminatedRegExp", "UnterminatedString", "UnterminatedTemplate", "UsingDeclarationExport", "UsingDeclarationHasBindingPattern", "VarRedeclaration", "VoidPatternCatchClauseParam", "VoidPatternInitializer", "YieldBindingIdentifier", "YieldInParameter", "YieldNotInGeneratorFunction", "ZeroDigitNumericSeparator", "StrictModeErrors", "StrictDelete", "StrictEvalArguments", "referenceName", "StrictEvalArgumentsBinding", "bindingName", "StrictFunction", "StrictNumericEscape", "StrictOctalLiteral", "StrictWith", "ParseExpressionErrors", "ParseExpressionEmptyInput", "ParseExpressionExpectsEOF", "String", "fromCodePoint", "UnparenthesizedPipeBodyDescriptions", "Set", "Object", "assign", "PipeBodyIsTighter", "PipeTopicRequiresHackPipes", "PipeTopicUnbound", "PipeTopicUnconfiguredToken", "token", "PipeTopicUnused", "PipeUnparenthesizedBody", "PipelineBodyNoArrow", "PipelineBodySequenceExpression", "PipelineHeadSequenceExpression", "PipelineTopicUnused", "PrimaryTopicNotAllowed", "PrimaryTopicRequiresSmartPipeline", "defineHidden", "obj", "value", "defineProperty", "enumerable", "configurable", "toParseErrorConstructor", "toMessage", "reasonCode", "syntaxPlugin", "hasMissingPlugin", "oldReasonCodes", "AccessorCannotDeclareThisParameter", "AccessorCannotHaveTypeParameters", "ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference", "SetAccessorCannotHaveOptionalParameter", "SetAccessorCannotHaveRestParameter", "SetAccessorCannotHaveReturnType", "loc", "details", "error", "SyntaxError", "pos", "clone", "overrides", "_overrides$loc", "get", "set", "writable", "ParseErrorEnum", "argument", "Array", "isArray", "parseErrorTemplates", "ParseErrorConstructors", "keys", "template", "_ref", "rest", "_objectWithoutPropertiesLoose", "_excluded", "Errors", "PipelineOperatorErrors", "createDefaultOptions", "sourceType", "sourceFilename", "undefined", "startIndex", "startColumn", "startLine", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowNewTargetOutsideFunction", "allowImportExportEverywhere", "allowSuperOutsideMethod", "allowUndeclaredExports", "allowYieldOutsideFunction", "plugins", "strictMode", "ranges", "tokens", "createImportExpressions", "createParenthesizedExpressions", "errorRecovery", "attachComment", "annexB", "getOptions", "opts", "options", "Error", "toUnenumerable", "object", "toESTreeLocation", "estree", "superClass", "ESTreeParserMixin", "parse", "file", "optionFlags", "parseRegExpLiteral", "pattern", "flags", "regex", "RegExp", "_", "estreeParseLiteral", "parseBigIntLiteral", "bigInt", "BigInt", "_unused", "bigint", "parseDecimalLiteral", "decimal", "parseLiteral", "parseStringLiteral", "parseNumericLiteral", "parseNullLiteral", "parseBooleanLiteral", "estreeParseChainExpression", "endLoc", "chain", "startNodeAtNode", "expression", "finishNodeAt", "directiveToStmt", "directive", "castNodeTo", "raw", "extra", "expressionValue", "stmt", "rawValue", "fillOptionalPropertiesForTSESLint", "cloneEstreeStringLiteral", "range", "cloned", "create", "prototype", "initFunction", "isAsync", "checkDeclaration", "isObjectProperty", "getObjectOrClassMethodParams", "method", "params", "isValidDirective", "_stmt$expression$extr", "parenthesized", "parseBlockBody", "allowDirectives", "topLevel", "afterBlockParse", "directiveStatements", "directives", "d", "body", "concat", "parsePrivateName", "getPluginOption", "convertPrivateNameToPrivateIdentifier", "getPrivateNameSV", "id", "isPrivateName", "parseFunctionBody", "allowExpression", "isMethod", "parseMethod", "isGenerator", "isConstructor", "allowDirectSuper", "inClassScope", "funcNode", "startNode", "typeParameters", "resetStartLocationFromNode", "valueNode", "computed", "shorthand", "finishNode", "nameIsConstructor", "parseClassProperty", "args", "propertyNode", "parseClassPrivateProperty", "parseClassAccessorProperty", "accessorPropertyNode", "abstract", "hasPlugin", "parseObjectProperty", "prop", "startLoc", "isPattern", "refExpressionErrors", "finishObjectProperty", "isValidLVal", "disallowCallExpression", "isUnparenthesizedInAssign", "binding", "isAssignable", "isBinding", "toAssignable", "isLHS", "classScope", "usePrivateName", "toAssignableObjectExpressionProp", "isLast", "raise", "finishCallExpression", "unfinished", "optional", "callee", "source", "arguments", "_ref2", "attributes", "toReferencedArguments", "parseExport", "decorators", "exportStartLoc", "state", "lastTokStartLoc", "exported", "specifiers", "length", "_declaration$decorato", "declaration", "resetStartLocation", "stopParseSubscript", "base", "optionalChainMember", "parseMember", "isOptionalMemberExpression", "hasPropertyAsPrivateName", "isObjectMethod", "result", "cloneIdentifier", "cloneStringLiteral", "resetEndLocation", "lastTokEndLoc", "TokContext", "preserveSpace", "types", "brace", "j_oTag", "j_cTag", "j_expr", "beforeExpr", "startsExpr", "isLoop", "isAssign", "postfix", "ExportedTokenType", "label", "conf", "rightAssociative", "binop", "updateContext", "keywords", "Map", "createKeyword", "createToken", "createBinop", "tokenTypeCounter", "tokenTypes", "tokenLabels", "tokenBinops", "tokenBeforeExprs", "tokenStartsExprs", "tokenPrefixes", "_options$binop", "_options$beforeExpr", "_options$startsExpr", "_options$prefix", "push", "createKeywordLike", "_options$binop2", "_options$beforeExpr2", "_options$startsExpr2", "_options$prefix2", "tt", "bracketL", "bracketHashL", "bracketBarL", "bracketR", "bracketBarR", "braceL", "braceBarL", "braceHashL", "braceR", "braceBarR", "parenL", "parenR", "comma", "semi", "colon", "doubleColon", "dot", "question", "questionDot", "arrow", "ellipsis", "backQuote", "dollarBraceL", "templateTail", "templateNonTail", "at", "hash", "interpreterDirective", "eq", "slashAssign", "xorAssign", "moduloAssign", "incDec", "bang", "tilde", "doubleCaret", "doubleAt", "pipeline", "nullishCoalescing", "logicalOR", "logicalAND", "bitwiseOR", "bitwiseXOR", "bitwiseAND", "equality", "lt", "gt", "relational", "bitShift", "bitShiftL", "bitShiftR", "plusMin", "modulo", "star", "slash", "exponent", "_in", "_instanceof", "_break", "_case", "_catch", "_continue", "_debugger", "_default", "_else", "_finally", "_function", "_if", "_return", "_switch", "_throw", "_try", "_var", "_const", "_with", "_new", "_this", "_super", "_class", "_extends", "_export", "_import", "_null", "_true", "_false", "_typeof", "_void", "_delete", "_do", "_for", "_while", "_as", "_assert", "_async", "_await", "_defer", "_from", "_get", "_let", "_meta", "_of", "_sent", "_set", "_source", "_static", "_using", "_yield", "_asserts", "_checks", "_exports", "_global", "_implements", "_intrinsic", "_infer", "_is", "_mixins", "_proto", "_require", "_satisfies", "_keyof", "_readonly", "_unique", "_abstract", "_declare", "_enum", "_module", "_namespace", "_interface", "_type", "_opaque", "placeholder", "string", "num", "regexp", "privateName", "eof", "jsxName", "jsxText", "jsxTagStart", "jsxTagEnd", "tokenIsIdentifier", "tokenKeywordOrIdentifierIsKeyword", "tokenIsKeywordOrIdentifier", "tokenIsLiteralPropertyName", "tokenComesBeforeExpression", "tokenCanStartExpression", "tokenIsAssignment", "tokenIsFlowInterfaceOrTypeOrOpaque", "tokenIsLoop", "tokenIsKeyword", "tokenIsOperator", "tokenIsPostfix", "tokenIsPrefix", "tokenIsTSTypeOperator", "tokenIsTSDeclarationStart", "tokenLabelName", "tokenOperatorPrecedence", "tokenIsRightAssociative", "tokenIsTemplate", "getExportedToken", "context", "pop", "tc", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "i", "isIdentifierStart", "test", "fromCharCode", "isIdentifierChar", "reservedWords", "strict", "strictBind", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isIteratorStart", "current", "next", "next2", "reservedWordLikeSet", "canBeReservedWord", "Scope", "names", "firstLexicalName", "ScopeHandler", "parser", "scopeStack", "undefinedExports", "inTopLevel", "currentScope", "inFunction", "currentVarScopeFlags", "allowSuper", "currentThisScopeFlags", "allowNewTarget", "inClass", "inClassAndNotInNonArrowFunction", "inStaticBlock", "ScopeFlag", "inNonArrowFunction", "inBareCaseStatement", "treatFunctionsAsVar", "treatFunctionsAsVarInScope", "createScope", "enter", "exit", "scope", "declareName", "bindingType", "checkRedeclarationInScope", "maybeExportDefined", "delete", "isRedeclaredInScope", "checkLocalExport", "topLevelScope", "FlowScope", "declareFunctions", "FlowScopeHandler", "add", "reservedTypes", "FlowErrors", "AmbiguousConditionalArrow", "AmbiguousDeclareModuleKind", "AssignReservedType", "reservedType", "DeclareClassElement", "DeclareClassFieldInitializer", "DuplicateDeclareModuleExports", "EnumBooleanMemberNotInitialized", "memberName", "enumName", "EnumDuplicateMemberName", "EnumInconsistentMemberValues", "EnumInvalidExplicitType", "invalidEnumType", "EnumInvalidExplicitTypeUnknownSupplied", "EnumInvalidMemberInitializerPrimaryType", "explicitType", "EnumInvalidMemberInitializerSymbolType", "EnumInvalidMemberInitializerUnknownType", "EnumInvalidMemberName", "suggestion", "EnumNumberMemberNotInitialized", "EnumStringMemberInconsistentlyInitialized", "GetterMayNotHaveThisParam", "ImportReflectionHasImportType", "ImportTypeShorthandOnlyInPureImport", "InexactInsideExact", "InexactInsideNonObject", "InexactVariance", "InvalidNonTypeImportInDeclareModule", "MissingTypeParamDefault", "NestedDeclareModule", "NestedFlowComment", "PatternIsOptional", "SetterMayNotHaveThisParam", "SpreadVariance", "ThisParamAnnotationRequired", "ThisParamBannedInConstructor", "ThisParamMayNotBeOptional", "ThisParamMustBeFirst", "ThisParamNoDefault", "TypeBeforeInitializer", "TypeCastInPattern", "UnexpectedExplicitInexactInObject", "UnexpectedReservedType", "UnexpectedReservedUnderscore", "UnexpectedSpaceBetweenModuloChecks", "UnexpectedSpreadType", "UnexpectedSubtractionOperand", "UnexpectedTokenAfterTypeParameter", "UnexpectedTypeParameterBeforeAsyncArrowFunction", "UnsupportedDeclareExportKind", "unsupportedExportKind", "UnsupportedStatementInDeclareModule", "UnterminatedFlowComment", "isEsModuleType", "bodyElement", "hasTypeImportKind", "importKind", "exportSuggestions", "const", "let", "interface", "partition", "list", "list1", "list2", "FLOW_PRAGMA_REGEX", "flow", "FlowParserMixin", "flowPragma", "getScopeHandler", "shouldParseTypes", "finishToken", "val", "addComment", "comment", "matches", "exec", "flowParseTypeInitialiser", "tok", "oldInType", "inType", "expect", "flowParseType", "flowParsePredicate", "moduloLoc", "expectContextual", "eat", "parseExpression", "flowParseTypeAndPredicateInitialiser", "predicate", "match", "flowParseDeclareClass", "flowParseInterfaceish", "flowParseDeclareFunction", "parseIdentifier", "typeNode", "typeContainer", "flowParseTypeParameterDeclaration", "tmp", "flowParseFunctionTypeParams", "this", "returnType", "typeAnnotation", "semicolon", "flowParseDeclare", "insideModule", "flowParseDeclareVariable", "eatContextual", "flowParseDeclareModuleExports", "flowParseDeclareModule", "isContextual", "flowParseDeclareTypeAlias", "flowParseDeclareOpaqueType", "flowParseDeclareInterface", "flowParseDeclareExportDeclaration", "flowParseTypeAnnotatableIdentifier", "parseExprAtom", "bodyNode", "parseImport", "hasModuleExport", "forEach", "default", "isLet", "exportKind", "flowParseTypeAnnotation", "finished", "flowParseTypeAlias", "flowParseOpaqueType", "isClass", "flowParseRestrictedIdentifier", "extends", "flowParseInterfaceExtends", "implements", "mixins", "flowParseObjectType", "allowStatic", "allowExact", "allowSpread", "allowProto", "allowInexact", "flowParseQualifiedTypeIdentifier", "flowParseTypeParameterInstantiation", "flowParseInterface", "checkNotUnderscore", "checkReservedType", "liberal", "right", "declare", "supertype", "impltype", "flowParseTypeParameter", "requireDefault", "nodeStartLoc", "variance", "flowParseVariance", "ident", "bound", "defaultRequired", "typeParameter", "flowInTopLevelContext", "cb", "curContext", "oldContext", "flowParseTypeParameterInstantiationInExpression", "reScan_lt", "oldNoAnonFunctionType", "noAnonFunctionType", "reScan_lt_gt", "flowParseTypeParameterInstantiationCallOrNew", "flowParseTypeOrImplicitInstantiation", "flowParseInterfaceType", "flowParseObjectPropertyKey", "flowParseObjectTypeIndexer", "isStatic", "static", "lookahead", "flowParseObjectTypeInternalSlot", "flowParseObjectTypeMethodish", "startNodeAt", "flowParseFunctionTypeParam", "flowParseObjectTypeCallProperty", "nodeStart", "callProperties", "properties", "indexers", "internalSlots", "endDelim", "exact", "inexact", "protoStartLoc", "inexactStartLoc", "propOrInexact", "flowParseObjectTypeProperty", "flowObjectTypeSemicolon", "out", "isInexactToken", "proto", "flowCheckGetterSetterParams", "property", "paramCount", "node2", "qualification", "flowParseGenericType", "flowParseTypeofType", "flowParsePrimaryType", "flowParseTupleType", "first", "lh", "isThis", "reinterpretTypeAsFunctionTypeParam", "flowIdentToTypeAnnotation", "isGroupedType", "parseLiteralAtNode", "createIdentifier", "flowParsePostfixType", "seenOptionalIndexedAccess", "canInsertSemicolon", "elementType", "objectType", "indexType", "flowParsePrefixType", "flowParseAnonFunctionWithoutParens", "param", "flowParseIntersectionType", "flowParseUnionType", "allowPrimitiveOverride", "typeCastToParameter", "allowExpressionBody", "forwardNoArrowParamsConversionAt", "parseFunctionBodyAndFinish", "parseStatementLike", "flowParseEnumDeclaration", "parseExpressionStatement", "expr", "shouldParseExportDeclaration", "containsEsc", "isExportDefaultSpecifier", "parseExportDefaultExpression", "parseConditional", "maybeInArrowParameters", "nextCh", "lookaheadCharCode", "setOptionalParametersError", "originalNoArrowAt", "noArrowAt", "consequent", "failed", "tryParseConditionalConsequent", "valid", "invalid", "getArrowLikeExpressions", "alternate", "parseMaybeAssign", "noArrowParamsConversionAt", "parseMaybeAssignAllowIn", "disallowInvalid", "stack", "arrows", "finishArrowValidation", "every", "_node$extra", "toAssignableList", "trailingCommaLoc", "checkParams", "includes", "offsetToSourcePos", "parseParenItem", "newNode", "typeCastNode", "assertModuleNodeAllowed", "parseExportDeclaration", "declarationNode", "parseExportSpecifiers", "parseExportFrom", "eatExportStar", "maybeParseExportNamespaceSpecifier", "hasNamespace", "parseClassId", "isStatement", "optionalId", "parseClassMember", "classBody", "member", "parseClassMemberFromModifier", "isIterator", "readIterator", "readWord1", "fullWord", "curPosition", "getTokenFromCode", "input", "charCodeAt", "finishOp", "left", "exprList", "toReferencedList", "isParenthesizedExpr", "_expr$extra", "parseArrayLike", "close", "isTuple", "elements", "isParenthesized", "isClassMethod", "isClassProperty", "isNonstaticConstructor", "pushClassMethod", "allowsDirectSuper", "isThisParam", "pushClassPrivateMethod", "parseClassSuper", "superTypeParameters", "implemented", "checkGetterSetterParams", "parsePropertyNamePrefixOperator", "parseObjPropValue", "isAccessor", "parseFunctionParamType", "parseMaybeDefault", "checkImportReflection", "module", "parseImportSpecifierLocal", "specifier", "local", "finishImportSpecifier", "isPotentialImportPhase", "isExport", "ch", "applyImportPhase", "phase", "parseImportSpecifier", "importedIsString", "isInTypeOnlyImport", "isMaybeTypeOnly", "firstIdent", "imported", "specifierTypeKind", "isLookaheadContextual", "as_ident", "specifierIsTypeImport", "checkReservedWord", "parseBindingAtom", "parseFunctionParams", "parseVarId", "decl", "parseAsyncArrowFromCallExpression", "call", "shouldParseAsyncArrow", "afterLeftParse", "_jsx", "jsx", "tryParse", "currentContext", "_jsx2", "_jsx3", "abort", "_arrowExpression$extr", "arrowExpression", "maybeUnwrapTypeCastExpression", "aborted", "async", "failState", "thrown", "parseArrow", "shouldParseArrow", "setArrowFunctionParameters", "allowDuplicates", "isArrowFunction", "strictModeChanged", "parseParenAndDistinguishExpression", "canBeArrow", "sourceToOffsetPos", "parseSubscripts", "noCalls", "parseCallExpressionArguments", "parseAsyncArrowWithTypeParameters", "parseSubscript", "subscriptState", "isLookaheadToken_lt", "stop", "typeArguments", "parseNewCallee", "targs", "parseArrowExpression", "readToken_mult_modulo", "hasFlowComment", "nextToken", "readToken_pipe_amp", "parseTopLevel", "program", "fileNode", "skipBlockComment", "skipFlowComment", "hasFlowCommentCompletion", "commentSkip", "shiftToFirstNonWhiteSpace", "ch2", "ch3", "slice", "indexOf", "flowEnumErrorBooleanMemberNotInitialized", "flowEnumErrorInvalidMemberInitializer", "enumContext", "flowEnumErrorNumberMemberNotInitialized", "flowEnumErrorStringMemberInconsistentlyInitialized", "flowEnumMemberInit", "endOfInit", "literal", "flowEnumMemberRaw", "init", "flowEnumCheckExplicitTypeMismatch", "expectedType", "flowEnumMembers", "seenNames", "members", "booleanMembers", "numberMembers", "stringMembers", "defaultedMembers", "hasUnknownMembers", "memberNode", "toUpperCase", "flowEnumStringMembers", "initializedMembers", "flowEnumParseExplicitType", "flowEnumBody", "nameLoc", "empty", "boolsLen", "numsLen", "strsLen", "defaultedLen", "jsxParseOpeningElementAfterName", "nextTokenStart", "afterNext", "readToken_lt", "readToken_gt", "entities", "__proto__", "quot", "amp", "apos", "nbsp", "iexcl", "cent", "pound", "curren", "yen", "brvbar", "sect", "uml", "copy", "ordf", "laquo", "not", "shy", "reg", "macr", "deg", "plusmn", "sup2", "sup3", "acute", "micro", "para", "middot", "cedil", "sup1", "ordm", "raquo", "frac14", "frac12", "frac34", "iquest", "Agrave", "Aacute", "Acirc", "Atilde", "Auml", "Aring", "AElig", "Ccedil", "Egrave", "Eacute", "Ecirc", "Euml", "Igrave", "Iacute", "Icirc", "Iuml", "ETH", "Ntilde", "Ograve", "Oacute", "Ocirc", "Otilde", "Ouml", "times", "Oslash", "Ugrave", "Uacute", "Ucirc", "Uuml", "Yacute", "THORN", "szlig", "agrave", "aacute", "acirc", "atilde", "auml", "aring", "aelig", "ccedil", "egrave", "eacute", "ecirc", "euml", "igrave", "iacute", "icirc", "iuml", "eth", "ntilde", "ograve", "oacute", "ocirc", "otilde", "ouml", "divide", "oslash", "ugrave", "uacute", "ucirc", "uuml", "yacute", "thorn", "yuml", "OElig", "oelig", "Scaron", "scaron", "Yuml", "fnof", "circ", "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho", "sigmaf", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "thetasym", "upsih", "piv", "ensp", "emsp", "thinsp", "zwnj", "zwj", "lrm", "rlm", "ndash", "mdash", "lsquo", "rsquo", "sbquo", "ldquo", "rdquo", "bdquo", "dagger", "Dagger", "bull", "hellip", "permil", "prime", "Prime", "lsaquo", "rsaquo", "oline", "frasl", "euro", "image", "weierp", "real", "trade", "alefsym", "larr", "uarr", "rarr", "darr", "harr", "crarr", "lArr", "uArr", "rArr", "dArr", "hArr", "forall", "part", "exist", "nabla", "isin", "notin", "ni", "prod", "sum", "minus", "lowast", "radic", "infin", "ang", "and", "or", "cap", "cup", "int", "there4", "sim", "cong", "asymp", "ne", "equiv", "le", "ge", "sub", "sup", "nsub", "sube", "supe", "oplus", "otimes", "perp", "sdot", "lceil", "rceil", "lfloor", "rfloor", "lang", "rang", "loz", "spades", "clubs", "hearts", "diams", "lineBreak", "lineBreakG", "isNewLine", "hasNewLine", "skipWhiteSpace", "skipWhiteSpaceInLine", "isWhitespace", "JsxErrors", "AttributeIsEmpty", "MissingClosingTagElement", "openingTagName", "MissingClosingTagFragment", "UnexpectedSequenceExpression", "HTMLEntity", "UnsupportedJsxValue", "UnterminatedJsxContent", "UnwrappedAdjacentJSXElements", "isFragment", "getQualifiedJSXName", "namespace", "JSXParserMixin", "jsxReadToken", "chunkStart", "canStartJSXElement", "jsxReadEntity", "jsxReadNewLine", "normalizeCRLF", "curLine", "lineStart", "jsxReadString", "quote", "startPos", "codePointAtPos", "codePoint", "readInt", "count", "desc", "entity", "XHTMLEntities", "jsxReadWord", "jsxParseIdentifier", "jsxParseNamespacedName", "jsxParseElementName", "jsxParseAttributeValue", "setContext", "jsxParseExpressionContainer", "jsxParseEmptyExpression", "jsxParseSpreadChild", "previousContext", "jsxParseAttribute", "jsxParseOpeningElementAt", "selfClosing", "jsxParseClosingElementAt", "jsxParseElementAt", "children", "openingElement", "closingElement", "contents", "openingFragment", "closingFragment", "jsxParseElement", "newContext", "replaceToken", "skipSpace", "prevType", "splice", "TypeScriptScope", "tsNames", "TypeScriptScopeHandler", "importsStack", "hasImport", "allowShadow", "len", "isConst", "wasConst", "ProductionParameterHandler", "stacks", "currentFlags", "hasAwait", "hasYield", "hasReturn", "hasIn", "functionFlags", "BaseParser", "sawUnambiguousESM", "ambiguousScriptDifferentAst", "sourcePos", "offsetPos", "pluginConfig", "pluginName", "pluginOptions", "actualOptions", "plugin", "_this$plugins$get", "setTrailingComments", "comments", "trailingComments", "unshift", "setLeadingComments", "leadingComments", "setInnerComments", "innerComments", "adjustInnerComments", "commentWS", "lastElement", "CommentsParser", "commentsLen", "processComment", "commentStack", "commentStackLength", "lastCommentWS", "leadingNode", "commentEnd", "containingNode", "finalizeComment", "trailingNode", "_node$options", "commentStart", "finalizeRemainingComments", "resetPreviousNodeTrailingComments", "takeSurroundingComments", "State", "errors", "potentialArrowAt", "topicContext", "maxNumOfResolvableTopics", "maxTopicIndex", "labels", "ct", "firstInvalidTemplateEscapePos", "strictErrors", "tokensLength", "v", "isAmbientContext", "inAbstractClass", "inDisallowConditionalTypesContext", "soloAwait", "inFSharpPipelineDirectBody", "hasTopLevelAwait", "isDigit", "forbiddenNumericSeparatorSiblings", "decBinOct", "hex", "isAllowedNumericSeparatorSibling", "bin", "oct", "dec", "readStringContents", "initialPos", "initialLineStart", "initialCurLine", "firstInvalidLoc", "unterminated", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "readCodePoint", "strictNumericEscape", "octalStr", "octal", "parseInt", "forceLen", "n", "invalidEscapeSequence", "allowNumSeparator", "bailOnError", "forbiddenSiblings", "isAllowedSibling", "total", "e", "Infinity", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "invalidCodePoint", "buildPosition", "VALID_REGEX_FLAGS", "Token", "Tokenizer", "isLookahead", "errorHandlers_readInt", "errorBuilder", "errorHandlers_readCodePoint", "errorHandlers_readStringContents_string", "recordStrictModeErrors", "errorHandlers_readStringContents_template", "pushToken", "checkKeywordEscapes", "createLookaheadState", "old", "curr", "nextTokenStartSince", "lastIndex", "lookaheadCharCodeSince", "nextTokenInLineStart", "nextTokenInLineStartSince", "lookaheadInLineCharCode", "cp", "trail", "setStrict", "toParseError", "clear", "skipLineComment", "startSkip", "spaceStart", "loop", "commentWhitespace", "readToken_numberSign", "readToken_interpreter", "nextPos", "expectPlugin", "readToken_dot", "readNumber", "readToken_slash", "width", "readToken_caret", "proposal", "topicToken", "lookaheadCh", "codePointAt", "readToken_atSign", "readToken_plus_min", "size", "readToken_eq_excl", "readToken_question", "readTemplateToken", "readRadixNumber", "readString", "readWord", "readRegexp", "escaped", "content", "mods", "char", "isBigInt", "replace", "startsWithDot", "isFloat", "hasExponent", "isOctal", "hasLeadingZero", "integer", "underscorePos", "isDecimal", "parseFloat", "readTemplateContinuation", "opening", "firstCode", "escStart", "identifierCheck", "esc", "keywordTypes", "raiseOverwrite", "expectOnePlugin", "pluginNames", "some", "ClassScope", "privateNames", "loneAccessors", "undefinedPrivateNames", "ClassScopeHandler", "oldClassScope", "from", "declarePrivateName", "redefined", "accessor", "oldStatic", "newStatic", "oldKind", "newKind", "ExpressionScope", "canBeArrowParameterDeclaration", "isCertainlyParameterDeclaration", "ArrowHeadParsingScope", "declarationErrors", "recordDeclarationError", "ParsingErrorClass", "clearDeclarationError", "iterateErrors", "iterator", "ExpressionScopeHandler", "recordParameterInitializerError", "origin", "recordArrowParameterBindingError", "recordAsyncArrowParametersError", "validateAsPattern", "newParameterDeclarationScope", "newArrowHeadScope", "newAsyncArrowScope", "newExpressionScope", "UtilParser", "addExtra", "isUnparsedContextual", "nameStart", "startsWith", "hasPrecedingLineBreak", "hasFollowingLineBreak", "isLineTerminator", "allowAsi", "fn", "oldState", "abortSignal", "checkExpressionErrors", "andThrow", "shorthandAssignLoc", "doubleProtoLoc", "privateKeyLoc", "optionalParametersLoc", "voidPatternLoc", "hasErrors", "isLiteralPropertyName", "initializeScopes", "oldLabels", "oldExportedIdentifiers", "exportedIdentifiers", "oldInModule", "oldScope", "oldProdParam", "prodParam", "oldExpressionScope", "expressionScope", "enterInitialScopes", "paramFlags", "isCommonJS", "scopeFlags", "checkDestructuringPrivate", "ExpressionErrors", "Node", "NodePrototype", "__clone", "NodeUtils", "locationNode", "unwrapParenthesizedExpression", "LValParser", "_node$extra3", "last", "_node$extra2", "operator", "arg", "checkToRestConversion", "elt", "toAssignableListItem", "element", "toReferencedListDeep", "parseSpread", "parseRestBinding", "parseBindingList", "ParseBindingListFlags", "parseObjectLike", "parseVoidPattern", "closeCharCode", "allowEmpty", "elts", "checkCommaAfterRest", "parseDecorator", "parseBindingElement", "parseBindingRestProperty", "parseBindingProperty", "parsePropertyName", "checkLVal", "checkClashes", "hasParenthesizedAncestor", "_expression$extra", "checkIdentifier", "unwrappedExpression", "validity", "ParseErrorClass", "isParenthesizedExpression", "nextAncestor", "child", "declareNameFromIdentifier", "identifier", "allowPattern", "keywordAndTSRelationalOperator", "nonNull", "x", "assert", "TSErrors", "AbstractMethodHasImplementation", "methodName", "AbstractPropertyHasInitializer", "propertyName", "AccessorCannotBeOptional", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "ConstructorHasTypeParameters", "DeclareAccessor", "DeclareClassFieldHasInitializer", "DeclareFunctionHasImplementation", "DuplicateAccessibilityModifier", "modifier", "DuplicateModifier", "EmptyHeritageClauseType", "EmptyTypeArguments", "EmptyTypeParameters", "ExpectedAmbientAfterExportDeclare", "ImportAliasHasImportType", "IncompatibleModifiers", "modifiers", "IndexSignatureHasAbstract", "IndexSignatureHasAccessibility", "IndexSignatureHasDeclare", "IndexSignatureHasOverride", "IndexSignatureHasStatic", "InitializerNotAllowedInAmbientContext", "InvalidHeritageClauseType", "InvalidModifierOnAwaitUsingDeclaration", "InvalidModifierOnTypeMember", "InvalidModifierOnTypeParameter", "InvalidModifierOnTypeParameterPositions", "InvalidModifierOnUsingDeclaration", "InvalidModifiersOrder", "orderedModifiers", "InvalidPropertyAccessAfterInstantiationExpression", "InvalidTupleMemberLabel", "MissingInterfaceName", "NonAbstractClassHasAbstractMethod", "NonClassMethodPropertyHasAbstractModifier", "OptionalTypeBeforeRequired", "OverrideNotInSubClass", "PrivateElementHasAbstract", "PrivateElementHasAccessibility", "ReadonlyForMethodSignature", "ReservedArrowTypeParam", "ReservedTypeAssertion", "SingleTypeParameterWithoutTrailingComma", "typeParameterName", "StaticBlockCannotHaveModifier", "TupleOptionalAfterType", "TypeAnnotationAfterAssign", "TypeImportCannotSpecifyDefaultAndNamed", "TypeModifierIsUsedInTypeExports", "TypeModifierIsUsedInTypeImports", "UnexpectedParameterModifier", "UnexpectedReadonly", "UnexpectedTypeAnnotation", "UnexpectedTypeCastInParameter", "UnsupportedImportTypeArgument", "UnsupportedParameterPropertyKind", "UnsupportedSignatureParameterKind", "UsingDeclarationInAmbientContext", "keywordTypeFromName", "tsIsAccessModifier", "tsIsVarianceAnnotations", "typescript", "TypeScriptParserMixin", "tsParseInOutModifiers", "tsParseModifiers", "bind", "allowedModifiers", "disallowedModifiers", "errorTemplate", "tsParseConstModifier", "tsParseInOutConstModifiers", "tsIsIdentifier", "tsTokenCanFollowModifier", "tsNextTokenOnSameLineAndCanFollowModifier", "tsNextTokenCanFollowModifier", "tsParseModifier", "stopOnStartOfClassStaticBlock", "hasSeenStaticModifier", "tsIsStartOfStaticBlocks", "tsTryParse", "modified", "enforceOrder", "before", "after", "incompatible", "mod1", "mod2", "accessibility", "hasOwnProperty", "tsIsListTerminator", "tsParseList", "parseElement", "tsParseDelimitedList", "refTrailingCommaPos", "tsParseDelimitedListWorker", "expectSuccess", "trailingCommaPos", "tsParseBracketedList", "bracket", "skipFirstToken", "tsParseImportType", "tsParseImportTypeOptions", "qualifier", "tsParseEntityName", "tsParseEntityNameFlags", "tsParseTypeArguments", "withProperty", "tsParseImportTypeWithPropertyValue", "parsePropertyDefinition", "tsParseTypeReference", "typeName", "tsParseThisTypePredicate", "lhs", "parameterName", "tsParseTypeAnnotation", "asserts", "tsParseThisTypeNode", "tsParseTypeQuery", "exprName", "tsParseTypeParameter", "parseModifiers", "tsParseTypeParameterName", "constraint", "tsEatThenParseType", "tsTryParseTypeParameters", "tsParseTypeParameters", "tsFillSignature", "returnToken", "signature", "returnTokenRequired", "paramsKey", "returnTypeKey", "tsParseBindingListForSignature", "tsParseTypeOrTypePredicateAnnotation", "tsParseTypeMemberSemicolon", "tsParseSignatureMember", "tsIsUnambiguouslyIndexSignature", "tsTryParseIndexSignature", "tsLookAhead", "parameters", "tsTryParseTypeAnnotation", "tsParsePropertyOrMethodSignature", "readonly", "firstParameter", "tsParseTypeMember", "idx", "tsParseTypeLiteral", "tsParseObjectTypeMembers", "tsIsStartOfMappedType", "tsParseMappedType", "tsExpectThenParseType", "nameType", "tsParseType", "tsTryParseType", "tsParseTupleType", "elementTypes", "tsParseTupleElementType", "seenOptionalElement", "elementNode", "restStartLoc", "labeled", "isWord", "chAfterWord", "wordName", "typeOrLabel", "tsParseNonArrayType", "labeledNode", "optionalTypeNode", "restNode", "tsParseParenthesizedType", "tsParseFunctionOrConstructorType", "tsInAllowConditionalTypesContext", "tsParseLiteralTypeNode", "tsParseTemplateLiteralType", "parseTemplate", "parseTemplateSubstitution", "tsParseThisTypeOrThisTypePredicate", "thisKeyword", "parseMaybeUnary", "nodeType", "tsParseArrayTypeOrHigher", "tsParseTypeOperator", "tsParseTypeOperatorOrHigher", "tsCheckTypeAnnotationForReadOnly", "tsParseInferType", "tsParseConstraintForInferType", "tsInDisallowConditionalTypesContext", "isTypeOperator", "tsParseUnionOrIntersectionType", "parseConstituentType", "hasLeadingOperator", "tsParseIntersectionTypeOrHigher", "tsParseUnionTypeOrHigher", "tsIsStartOfFunctionType", "tsIsUnambiguouslyStartOfFunctionType", "tsSkipParameterStart", "previousErrorCount", "_unused2", "tsInType", "t", "tsParseTypePredicateAsserts", "thisTypePredicate", "typePredicateVariable", "tsParseTypePredicatePrefix", "tsTryParseTypeOrTypePredicateAnnotation", "eatColon", "tsParseNonConditionalType", "checkType", "extendsType", "trueType", "falseType", "isAbstractConstructorSignature", "tsParseTypeAssertion", "tsParseHeritageClause", "originalStartLoc", "delimitedList", "tsParseInterfaceDeclaration", "tsParseTypeAliasDeclaration", "tsInTopLevelContext", "oldInDisallowConditionalTypesContext", "tsNextThenParseType", "tsParseEnumMember", "initializer", "tsParseEnumDeclaration", "tsParseEnumBody", "tsParseModuleBlock", "parseBlockOrModuleBlockBody", "tsParseModuleOrNamespaceDeclaration", "nested", "inner", "tsParseAmbientExternalModuleDeclaration", "global", "tsParseImportEqualsDeclaration", "maybeDefaultIdentifier", "moduleReference", "tsParseModuleReference", "tsIsExternalModuleReference", "tsParseExternalModuleReference", "f", "tsTryParseAndCatch", "tsTryParseDeclare", "startType", "tsInAmbientContext", "parseFunctionStatement", "parseClass", "parseVarStatement", "isUsing", "isAwaitUsing", "tsParseDeclaration", "tsTryParseExportDeclaration", "tsCheckLineTerminator", "tsParseAbstractDeclaration", "tsTryParseGenericAsyncArrowFunction", "oldMaybeInArrowParameters", "tsParseTypeArgumentsInExpression", "tsIsDeclarationStart", "override", "pp", "parameter", "isSimpleParameter", "tsDisallowOptionalPattern", "bodilessType", "registerFunctionStatementId", "tsCheckForInvalidTypeCasts", "items", "isInParens", "nonNullExpression", "isOptionalCall", "missingParenErrorLoc", "atPossibleAsyncArrow", "asyncArrowFn", "parseTaggedTemplateExpression", "tokenType", "_callee$extra", "parseExprOp", "leftStartLoc", "minPrec", "isSatisfies", "checkKeywords", "checkDuplicateExports", "importNode", "parseMaybeImportPhase", "parseImportSpecifiersAndAfter", "nodeImportEquals", "isAbstractClass", "cls", "allowMissingInitializer", "declarations", "isValidAmbientConstInitializer", "parseStatementContent", "nextTokenIsIdentifierAndNotTSRelationalOperatorOnSameLine", "nextTokenIsIdentifierOrStringLiteralOnSameLine", "nextTokenIsIdentifierOnSameLine", "parseAccessModifier", "tsHasSomeModifiers", "callParseClassMemberWithIsStatic", "parseClassStaticBlock", "parseClassMemberWithIsStatic", "hadSuperClass", "parsePostMemberNameModifiers", "methodOrProp", "isDeclare", "isIdentifier", "parseClassPropertyAnnotation", "definite", "declareClassPrivateMethodInScope", "_typeCast", "_typeCast2", "typeCast", "_typeParameters", "reportReservedArrowTypeParam", "trailingComma", "sawUnary", "toAssignableParenthesizedExpression", "parseMaybeDecoratorArguments", "canHaveLeadingDecorator", "getGetterSetterExpectedParamCount", "baseCount", "firstParam", "hasContextParam", "parseCatchClauseParam", "oldIsAmbientContext", "oldStrict", "oldInAbstractClass", "maybeTakeDecorators", "hasEstreePlugin", "methodFn", "shouldParseAsAmbientContext", "getExpression", "parseExportSpecifier", "isString", "isInTypeExport", "parseTypeOnlyImportExportSpecifier", "isImport", "isInTypeOnlyImportExport", "leftOfAsKey", "rightOfAsKey", "leftOfAs", "rightOfAs", "hasTypeSpecifier", "canParseAsKeyword", "firstAs", "secondAs", "parseModuleExportName", "kindKey", "_node$directive", "_node$decorators", "_node$optional", "_node$typeAnnotation", "_node$accessibility", "_node$decorators2", "_node$override", "_node$readonly", "_node$static", "_node$declare", "_node$returnType", "_node$typeParameters", "_node$optional2", "_node$optional3", "_node$accessibility2", "_node$readonly2", "_node$static2", "_node$declare2", "_node$definite", "_node$readonly3", "_node$typeAnnotation2", "_node$accessibility3", "_node$decorators3", "_node$override2", "_node$optional4", "_node$id", "_node$abstract", "_node$declare3", "_node$decorators4", "_node$implements", "_node$superTypeArgume", "_node$typeParameters2", "_node$declare4", "_node$definite2", "_node$const", "_node$declare5", "_node$computed", "_node$qualifier", "_node$declare6", "_node$extends", "_node$optional5", "_node$readonly4", "_node$declare7", "_node$global", "_node$const2", "_node$in", "_node$out", "superTypeArguments", "in", "chStartsBindingIdentifierAndNotRelationalOperator", "endCh", "chStartsBindingIdentifier", "isPossiblyLiteralEnum", "expressions", "isUncomputedMemberExpressionChain", "isNumber", "isNegativeNumber", "PlaceholderErrors", "ClassNameIsRequired", "UnexpectedSpace", "placeholders", "PlaceholdersParserMixin", "parsePlaceholder", "expectedNode", "assertNoSpace", "finishPlaceholder", "verifyBreakContinue", "isBreak", "parseStatementOrSloppyAnnexBFunctionDeclaration", "stmtPlaceholder", "parseBlock", "createNewLexicalScope", "parseFunctionId", "requireId", "parseClassBody", "maybeParseExportDefaultSpecifier", "_specifiers", "checkExport", "filter", "hasStarImport", "maybeParseStarImportSpecifier", "parseNamedImportSpecifiers", "parseImportSource", "v8intrinsic", "V8IntrinsicMixin", "parseV8Intrinsic", "v8IntrinsicStartLoc", "parseIdentifierName", "PIPELINE_PROPOSALS", "TOPIC_TOKENS", "validatePlugins", "pluginsMap", "decoratorsBeforeExport", "allowCallParenthesized", "_pluginsMap$get2", "proposalList", "p", "tokenList", "_pluginsMap$get", "syntaxType", "moduleAttributesVersionPluginOption", "version", "deprecatedAssertSyntax", "RECORD_AND_TUPLE_SYNTAX_TYPES", "missingPlugins", "mixinPlugins", "mixinPluginNames", "ExpressionParser", "checkProto", "isRecord", "sawProto", "shouldExitDescending", "disallowIn", "disallowInAnd", "parseExpressionBase", "allowInAnd", "parseMaybeAssignDisallowIn", "isYield", "parseYield", "ownExpressionErrors", "parseMaybeConditional", "isAmbiguousPrefixOrIdentifier", "parseExprOps", "parseMaybeUnaryOrPrivate", "op", "prec", "checkPipelineAtInfixOperator", "logical", "coalesce", "parseExprOpRightExpr", "finishedNode", "nextOp", "withTopicBindingContext", "parseHackPipeBody", "withSoloAwaitPermittingContext", "parseFSharpPipelineBody", "parseSmartPipelineBodyInStyle", "parseExprOpBaseRightExpr", "_body$extra", "requiredParentheses", "topicReferenceWasUsedInCurrentContext", "checkExponentialAfterUnary", "isAwait", "recordAwaitIfAllowed", "parseAwait", "update", "isDelete", "parseUpdate", "updateExpressionNode", "parseExprSubscripts", "maybeAsyncArrow", "parseBind", "parseCoverCallAndAsyncArrowHead", "parseNoCallExpr", "tag", "quasi", "allowPlaceholder", "nodeForExtra", "oldInFSharpPipelineDirectBody", "addTrailingCommaExtraToNode", "parseExprListItem", "_call$extra", "parseSuper", "parseImportMetaPropertyOrPhaseCall", "parseImportCall", "parseDo", "parseFunctionOrFunctionSent", "parseDecorators", "parseNewOrNewTarget", "parseTopicReferenceThenEqualsSign", "parseTopicReference", "pipeProposal", "parseModuleExpression", "parseAsyncFunctionExpression", "parseAsyncArrowUnaryFunction", "topicTokenType", "topicTokenValue", "finishTopicReference", "testTopicReferenceConfiguration", "topicReferenceIsAllowedInCurrentContext", "registerTopicReference", "meta", "parseMetaProperty", "parseFunction", "isSource", "createIdentifierAt", "innerStartLoc", "spreadStartLoc", "optionalCommaStartLoc", "spreadNodeStartLoc", "parseMaybeAssignAllowInOrVoidPattern", "innerEndLoc", "arrowNode", "wrapParenthesis", "parenExpression", "metaProp", "parseNew", "parseExprList", "parseTemplateElement", "isTagged", "elemStart", "elem", "isTail", "endOffset", "elemEnd", "cooked", "tail", "curElt", "quasis", "substitutions", "maybeAsyncOrAccessorProp", "keyName", "_params", "parseObjectMethod", "finishedProp", "generator", "isExpression", "hasStrictModeDirective", "nonSimple", "isSimpleParamList", "formalParameters", "reservedTest", "isAwaitAllowed", "delegating", "delegate", "childExpr", "isSimpleReference", "checkSmartPipeTopicBodyEarlyErrors", "callback", "outerContextTopicState", "withSmartMixTopicForbiddingContext", "outerContextSoloAwaitState", "prodParamToSet", "ParamKind", "prodParamToClear", "ret", "revertScopes", "parseProgram", "nextCode", "loopLabel", "switchLabel", "loneSurrogate", "keywordRelationalOperator", "babel7CompatTokens", "hashEndPos", "hashEndLoc", "backquoteEnd", "backquoteEndLoc", "startToken", "templateValue", "templateElementEnd", "templateElementEndLoc", "endToken", "StatementParser", "interpreter", "parseInterpreterDirective", "finishedProgram", "stmtToDirective", "directiveLiteral", "hasFollowingBindingAtom", "isForUsing", "nextCharAfterOf", "chStartsBindingPattern", "hasInLineFollowingBindingIdentifierOrBrace", "allowsUsing", "parseModuleItem", "ParseStatementFlag", "parseStatementListItem", "allowLabeledFunction", "parseStatement", "allowDeclaration", "allowFunctionDeclaration", "parseBreakContinueStatement", "parseDebuggerStatement", "parseDoWhileStatement", "parseForStatement", "parseIfStatement", "parseReturnStatement", "parseSwitchStatement", "parseThrowStatement", "parseTryStatement", "parseWhileStatement", "parseWithStatement", "parseEmptyStatement", "nextTokenCharCode", "isAsyncFunction", "maybeName", "parseLabeledStatement", "decoratorsEnabledBeforeExport", "maybeDecorators", "classNode", "exportNode", "_classNode$decorators", "allowExport", "paramsStartLoc", "lab", "parseHeaderExpression", "awaitAt", "parseFor", "startsWithLet", "startsWithAwaitUsing", "starsWithUsingDeclaration", "isLetOrUsing", "initNode", "parseVar", "isForIn", "parseForIn", "startsWithAsync", "isForOf", "isHangingDeclaration", "ParseFunctionFlag", "discriminant", "cases", "cur", "sawDefault", "isCase", "block", "handler", "clause", "finalizer", "statementStart", "parsedNonDirective", "await", "isFor", "hangingDeclaration", "isDeclaration", "hadConstructor", "publicMethod", "privateMethod", "publicProp", "privateProp", "accessorProp", "publicMember", "parseClassElementName", "maybeContextualKw", "isPrivate", "maybeQuestionTokenStartLoc", "pushClassPrivateProperty", "pushClassProperty", "pushClassAccessorProperty", "_member$decorators", "parseInitializer", "hasDefault", "parseAfterDefault", "hasStar", "parseAfterNamespace", "isFromRequired", "hasSpecifiers", "maybeParseExportNamedSpecifiers", "hasDeclaration", "maybeParseExportDeclaration", "_node2$declaration", "_ref$specifiers", "isTypeExport", "assertions", "nextChar", "hasFrom", "nextAfterFrom", "maybeParseImportAttributes", "checkJSONModuleImport", "checkNames", "isDefault", "isFrom", "_node$specifiers", "_declaration$extra", "nodes", "surrogate", "isJSONModuleImport", "singleBindingType", "_node$assertions", "nonDefaultNamedSpecifier", "find", "phaseIdentifier", "phaseIdentifierName", "isImportPhase", "isPrecedingIdImportPhase", "parseImportSourceAndAttributes", "maybeParseDefaultImportSpecifier", "parseNext", "_node$specifiers2", "parseImportAttributes", "attrs", "attrNames", "parseModuleAttributes", "useWith", "importSpecifier", "Parser", "normalizedOptions", "_options", "getParser", "ast", "moduleError", "generateExportedTokenTypes", "internalTokenTypes", "tokTypes", "getParserClass", "parserClassCache", "pluginList", "vscode", "execSync", "fs", "configPath"]
}
