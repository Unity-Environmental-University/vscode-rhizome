{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/commands/personaCommands.ts", "../src/services/personaService.ts", "../src/services/rhizomeService.ts", "../src/services/initService.ts", "../src/utils/rhizomePath.ts", "../src/utils/helpers.ts", "../src/commands/commentParser.ts"],
  "sourcesContent": ["/**\n * extension.ts \u2014 vscode-rhizome minimal entry point\n *\n * ONLY registers two inline persona commands:\n * 1. askPersona - right-click to ask any persona\n * 2. redPenReview - right-click for don-socratic review\n *\n * Everything else gutted for clarity and focus.\n */\n\nimport * as vscode from 'vscode';\nimport { askPersonaCommand, redPenReviewCommand, redPenReviewFileCommand, disposeCommands } from './commands/personaCommands';\nimport { ensureLocalBinOnPath } from './utils/rhizomePath';\nimport { getAvailablePersonas } from './services/rhizomeService';\n\n/**\n * Activate extension on startup\n */\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('[vscode-rhizome] ACTIVATION START');\n\tensureLocalBinOnPath();\n\n\t// Cleanup on deactivation\n\tcontext.subscriptions.push(\n\t\tnew vscode.Disposable(() => {\n\t\t\tdisposeCommands();\n\t\t})\n\t);\n\n\t// Log available personas on startup\n\t(async () => {\n\t\ttry {\n\t\t\tconst personas = await getAvailablePersonas();\n\t\t\tconsole.log(`[vscode-rhizome] ${personas.size} personas available`);\n\t\t} catch (error) {\n\t\t\tconsole.log('[vscode-rhizome] ERROR fetching personas:', (error as Error).message);\n\t\t}\n\t})();\n\n\t// ======================================\n\t// COMMAND: Ask any persona\n\t// ======================================\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('vscode-rhizome.askPersona', askPersonaCommand)\n\t);\n\n\t// ======================================\n\t// COMMAND: Red Pen Review (don-socratic)\n\t// ======================================\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('vscode-rhizome.redPenReview', redPenReviewCommand)\n\t);\n\n\t// ======================================\n\t// COMMAND: Red Pen Review File (entire file)\n\t// ======================================\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('vscode-rhizome.redPenReviewFile', redPenReviewFileCommand)\n\t);\n\n\tconsole.log('[vscode-rhizome] ACTIVATION COMPLETE');\n}\n\n/**\n * Deactivate extension on shutdown\n */\nexport function deactivate() {\n\tconsole.log('[vscode-rhizome] DEACTIVATION');\n}\n", "/**\n * personaCommands.ts - Minimal inline persona interactions\n *\n * Two commands:\n * 1. inlineComment - Right-click to add inline persona response\n * 2. redPenReview - Right-click for don-socratic review (adds comments)\n */\n\nimport * as vscode from 'vscode';\nimport { askPersonaWithPrompt } from '../services/personaService';\nimport { getAvailablePersonas } from '../services/rhizomeService';\nimport { detectLanguage } from '../utils/helpers';\nimport { parseCommentInsertion, formatInsertionPreview } from './commentParser';\n\n/**\n * Command: Add inline comment from persona\n *\n * Right-click menu: Get a persona's response to selected code, inserted as comment\n */\nexport const askPersonaCommand = async () => {\n\tconst editor = vscode.window.activeTextEditor;\n\tif (!editor || editor.selection.isEmpty) {\n\t\tvscode.window.showErrorMessage('Please select code');\n\t\treturn;\n\t}\n\n\tconst selectedText = editor.document.getText(editor.selection).trim();\n\tconst personas = await getAvailablePersonas();\n\n\tif (personas.size === 0) {\n\t\tvscode.window.showErrorMessage('No personas available');\n\t\treturn;\n\t}\n\n\tconst personaOptions = Array.from(personas.entries()).map(([name, role]) => ({\n\t\tlabel: name,\n\t\tdescription: role,\n\t}));\n\n\tconst picked = await vscode.window.showQuickPick(personaOptions, {\n\t\tplaceHolder: 'Choose a persona',\n\t});\n\n\tif (!picked) {\n\t\treturn;\n\t}\n\n\tconst question = await vscode.window.showInputBox({\n\t\ttitle: `Ask ${picked.label}`,\n\t\tprompt: 'What would you like to ask?',\n\t\tignoreFocusOut: true,\n\t});\n\n\tif (!question) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait vscode.window.withProgress(\n\t\t\t{\n\t\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\t\ttitle: `${picked.label} is thinking...`,\n\t\t\t\tcancellable: false,\n\t\t\t},\n\t\t\tasync (progress) => {\n\t\t\t\tprogress.report({ message: 'Waiting for response...' });\n\n\t\t\t\tconst prompt = `${question}\\n\\n${selectedText}`;\n\t\t\t\tconst response = await askPersonaWithPrompt(picked.label, picked.label, prompt);\n\n\t\t\t\tconst language = detectLanguage(editor.document.languageId);\n\t\t\t\tconst commentPrefix = language === 'python' ? '#' : '//';\n\t\t\t\tconst commentLines = response.split('\\n').map(line => `${commentPrefix} ${line}`);\n\t\t\t\tconst comment = commentLines.join('\\n');\n\n\t\t\t\t// Insert above selection (interlinear)\n\t\t\t\tconst insertPos = editor.selection.start;\n\t\t\t\tconst edit = new vscode.TextEdit(\n\t\t\t\t\tnew vscode.Range(insertPos, insertPos),\n\t\t\t\t\t`${commentPrefix} === ${picked.label} says:\\n${comment}\\n`\n\t\t\t\t);\n\t\t\t\tconst workspaceEdit = new vscode.WorkspaceEdit();\n\t\t\t\tworkspaceEdit.set(editor.document.uri, [edit]);\n\t\t\t\tawait vscode.workspace.applyEdit(workspaceEdit);\n\n\t\t\t\tprogress.report({ message: 'Response inserted! \u2713' });\n\t\t\t}\n\t\t);\n\t} catch (error: any) {\n\t\tvscode.window.showErrorMessage(`Failed: ${(error as Error).message}`);\n\t}\n};\n\n/**\n * Command: DEPRECATED - Animate (removed)\n *\n * Replaced by redPenReview. Keep for backwards compatibility but skip.\n */\nexport const documentWithPersonaCommand = async () => {\n\tvscode.window.showWarningMessage(\n\t\t'Animate command is deprecated. Use \"Red Pen Review\" instead.'\n\t);\n};\n\n/**\n * Command: Red Pen Review\n *\n * Right-click: Don-socratic persona reviews selected code, adds critique as comments\n */\nexport const redPenReviewCommand = async () => {\n\tconst editor = vscode.window.activeTextEditor;\n\tif (!editor || editor.selection.isEmpty) {\n\t\tvscode.window.showErrorMessage('Please select code to review');\n\t\treturn;\n\t}\n\n\tconst selectedText = editor.document.getText(editor.selection);\n\n\ttry {\n\t\t// Detect file language and set appropriate comment syntax\n\t\t// This ensures personas format feedback with correct syntax (// for TS, # for Python)\n\t\tconst language = detectLanguage(editor.document.languageId);\n\t\tconst commentPrefix = language === 'python' ? '#' : '//';\n\n\t\tawait vscode.window.withProgress(\n\t\t\t{\n\t\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\t\ttitle: 'Red pen review (don-socratic)...',\n\t\t\t\tcancellable: false,\n\t\t\t},\n\t\t\tasync (progress) => {\n\t\t\t\tprogress.report({ message: 'Analyzing code...' });\n\n\t\t\t\tconst prompt = `You are the don-socratic. Your role is not to give answers, but to ask questions that make the developer examine their assumptions.\n\nRead this code carefully. What questions does it raise? What assumptions might be hidden? What would happen at the edges?\n\nFor each line or section that invites questioning, write a comment (in ${commentPrefix} syntax). Start with what you observe, then ask the harder question. Make the developer think, not tell them what to do.\n\nFormat: \"${commentPrefix} Line X: [What you observe]. [What's the question beneath this?]\"\n\nExamples (in ${commentPrefix} comment format):\n${commentPrefix} Line 5: User could be undefined here. What happens then?\n${commentPrefix} Lines 12-15: You're checking membership in an array. Have you measured the cost?\n${commentPrefix} Line 20: This handles the error. But what was it, exactly?\n\nRemember: Question, don't instruct. Observe, then ask why.\n\nHere is the code:\\n\\n${selectedText}`;\n\t\t\t\tconst response = await askPersonaWithPrompt('don-socratic', 'don-socratic', prompt);\n\n\t\t\t\t// Parse response into structured insertions\n\t\t\t\tconst fileLines = editor.document.getText().split('\\n');\n\t\t\t\tconst insertions = parseCommentInsertion(response, fileLines, commentPrefix);\n\n\t\t\t\t// Show preview\n\t\t\t\tconst preview = formatInsertionPreview(insertions, fileLines);\n\t\t\t\tconst approved = await vscode.window.showInformationMessage(\n\t\t\t\t\t`Found ${insertions.length} suggested comments. Insert them?`,\n\t\t\t\t\t'Show Preview',\n\t\t\t\t\t'Insert All',\n\t\t\t\t\t'Cancel'\n\t\t\t\t);\n\n\t\t\t\tif (approved === 'Cancel') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (approved === 'Show Preview') {\n\t\t\t\t\tconst doc = await vscode.workspace.openTextDocument({\n\t\t\t\t\t\tlanguage: language === 'python' ? 'python' : 'typescript',\n\t\t\t\t\t\tcontent: preview,\n\t\t\t\t\t});\n\t\t\t\t\tawait vscode.window.showTextDocument(doc);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Insert all approved comments (in reverse order to avoid line number drift)\n\t\t\t\tconst sortedInsertions = [...insertions].sort((a, b) => b.lineNumber - a.lineNumber);\n\t\t\t\tconst edits = sortedInsertions.map(ins => {\n\t\t\t\t\tconst insertPos = new vscode.Position(ins.lineNumber, 0);\n\t\t\t\t\treturn new vscode.TextEdit(\n\t\t\t\t\t\tnew vscode.Range(insertPos, insertPos),\n\t\t\t\t\t\t`${commentPrefix} \uD83D\uDD34 ${ins.comment}\\n`\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconst workspaceEdit = new vscode.WorkspaceEdit();\n\t\t\t\tworkspaceEdit.set(editor.document.uri, edits);\n\t\t\t\tawait vscode.workspace.applyEdit(workspaceEdit);\n\n\t\t\t\tprogress.report({ message: `${insertions.length} reviews inserted! \u2713` });\n\t\t\t}\n\t\t);\n\t} catch (error: any) {\n\t\tvscode.window.showErrorMessage(`Failed: ${(error as Error).message}`);\n\t}\n};\n\n/**\n * Command: Red Pen Review entire file\n *\n * Right-click on file in explorer: Review whole file, append to file\n */\nexport const redPenReviewFileCommand = async (fileUri?: vscode.Uri) => {\n\tlet targetUri = fileUri;\n\n\t// If not called from explorer context, use active editor\n\tif (!targetUri) {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (!editor) {\n\t\t\tvscode.window.showErrorMessage('No file open');\n\t\t\treturn;\n\t\t}\n\t\ttargetUri = editor.document.uri;\n\t}\n\n\ttry {\n\t\tconst fileContent = await vscode.workspace.fs.readFile(targetUri);\n\t\tconst fileText = new TextDecoder().decode(fileContent);\n\n\t\tconst doc = await vscode.workspace.openTextDocument(targetUri);\n\t\t// Detect file language and set appropriate comment syntax for persona response formatting\n\t\tconst language = detectLanguage(doc.languageId);\n\t\tconst commentPrefix = language === 'python' ? '#' : '//';\n\n\t\tawait vscode.window.withProgress(\n\t\t\t{\n\t\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\t\ttitle: 'Red pen review (entire file)...',\n\t\t\t\tcancellable: false,\n\t\t\t},\n\t\t\tasync (progress) => {\n\t\t\t\tprogress.report({ message: 'Analyzing entire file...' });\n\n\t\t\t\tconst prompt = `You are the don-socratic, examining this entire file. Not to judge it, but to question it.\n\nWhat does the structure tell you? Where are the seams? What would break? What assumptions are baked in?\n\nLook at:\n- How the pieces fit together. Do they? Why arranged this way?\n- Error cases. What happens when things go wrong? Did the author think about it?\n- The names and patterns. What story do they tell?\n- The edges and boundaries. What lives there?\n\nFor each section that raises a question\u2014write a comment (in ${commentPrefix} syntax). Start with what you see. Then ask the question that matters.\n\nFormat: \"${commentPrefix} Line X: [What you observe]. [What's the real question here?]\"\n\nExamples (in ${commentPrefix} comment format):\n${commentPrefix} Line 12: This function imports from three places. Why those three? What would break if one changed?\n${commentPrefix} Lines 45-50: You handle the happy path. What about the sad one?\n${commentPrefix} Line 88: This pattern appears three times. Three times means something. What does it mean?\n\nQuestion the code. Question the choices. Make the developer see what they built, and ask themselves why.\n\nHere is the file:\\n\\n${fileText}`;\n\t\t\t\tconst response = await askPersonaWithPrompt('don-socratic', 'don-socratic', prompt);\n\n\t\t\t\t// Parse response into structured insertions\n\t\t\t\tconst fileLines = fileText.split('\\n');\n\t\t\t\tconst insertions = parseCommentInsertion(response, fileLines, commentPrefix);\n\n\t\t\t\t// Show preview\n\t\t\t\tconst preview = formatInsertionPreview(insertions, fileLines);\n\t\t\t\tconst approved = await vscode.window.showInformationMessage(\n\t\t\t\t\t`Found ${insertions.length} suggested comments. Insert them?`,\n\t\t\t\t\t'Show Preview',\n\t\t\t\t\t'Insert All',\n\t\t\t\t\t'Cancel'\n\t\t\t\t);\n\n\t\t\t\tif (approved === 'Cancel') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (approved === 'Show Preview') {\n\t\t\t\t\tconst previewDoc = await vscode.workspace.openTextDocument({\n\t\t\t\t\t\tlanguage: language === 'python' ? 'python' : 'typescript',\n\t\t\t\t\t\tcontent: preview,\n\t\t\t\t\t});\n\t\t\t\t\tawait vscode.window.showTextDocument(previewDoc);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Show file and insert comments\n\t\t\t\tconst editor = await vscode.window.showTextDocument(doc);\n\n\t\t\t\t// Insert all approved comments (in reverse order to avoid line number drift)\n\t\t\t\tconst sortedInsertions = [...insertions].sort((a, b) => b.lineNumber - a.lineNumber);\n\t\t\t\tconst edits = sortedInsertions.map(ins => {\n\t\t\t\t\tconst insertPos = new vscode.Position(ins.lineNumber, 0);\n\t\t\t\t\treturn new vscode.TextEdit(\n\t\t\t\t\t\tnew vscode.Range(insertPos, insertPos),\n\t\t\t\t\t\t`${commentPrefix} \uD83D\uDD34 ${ins.comment}\\n`\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconst workspaceEdit = new vscode.WorkspaceEdit();\n\t\t\t\tworkspaceEdit.set(targetUri, edits);\n\t\t\t\tawait vscode.workspace.applyEdit(workspaceEdit);\n\n\t\t\t\tprogress.report({ message: `${insertions.length} reviews inserted! \u2713` });\n\t\t\t}\n\t\t);\n\t} catch (error: any) {\n\t\tvscode.window.showErrorMessage(`Failed: ${(error as Error).message}`);\n\t}\n};\n\n/**\n * Dispose resources when extension deactivates\n */\nexport function disposeCommands(): void {\n\t// Placeholder for cleanup if needed\n}\n", "/**\n * personaService.ts\n *\n * @rhizome: What's the responsibility of a persona service?\n * High-level persona workflows: picking personas, building prompts, extracting suggestions.\n * Not I/O (that's rhizomeService), not UI rendering (that's outputFormatter).\n * Just the logic of \"persona interaction.\"\n */\n\nimport * as vscode from 'vscode';\nimport { queryPersona, getAvailablePersonas } from './rhizomeService';\nimport { initializeRhizomeIfNeeded } from './initService';\n\n/**\n * Execute persona query and return response\n *\n * @param persona - Persona name\n * @param personaDisplayName - Display name for persona\n * @param prompt - Prompt text\n * @param context - Optional context (question, selectedText)\n * @returns Response from persona\n */\nexport async function askPersonaWithPrompt(\n\tpersona: string,\n\tpersonaDisplayName: string,\n\tprompt: string,\n\tcontext?: { question?: string; selectedText?: string }\n): Promise<string> {\n\tconst workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\tif (!workspaceRoot) {\n\t\tvscode.window.showErrorMessage('No workspace folder open');\n\t\tthrow new Error('No workspace folder');\n\t}\n\n\tconst initialized = await initializeRhizomeIfNeeded(workspaceRoot);\n\tif (!initialized) {\n\t\tvscode.window.showErrorMessage('Could not initialize rhizome. Check workspace permissions.');\n\t\tthrow new Error('Rhizome initialization failed');\n\t}\n\n\treturn await queryPersona(prompt, persona, 30000, workspaceRoot);\n}\n\n/**\n * Infer a question from selected text\n *\n * @param selection - Selected code\n * @param languageId - Language identifier\n * @returns Inferred question\n */\nexport function inferQuestionFromSelection(selection: string, languageId?: string): string {\n\tconst descriptor = languageId?.includes('markdown') || languageId === 'plaintext' ? 'content' : 'code';\n\tconst trimmed = selection.replace(/\\s+/g, ' ').trim();\n\tconst snippet = trimmed.slice(0, 90);\n\tconst ellipsis = trimmed.length > 90 ? '\u2026' : '';\n\treturn `What should we improve in this ${descriptor}? (${snippet}${ellipsis})`;\n}\n\n/**\n * Extract suggested commands from persona response\n *\n * @param response - Persona response text\n * @returns List of suggested commands\n */\nexport function extractAgenticCommands(response: string): string[] {\n\tconst commands = new Set<string>();\n\n\t// Extract from fenced code blocks\n\tconst codeBlockRegex = /```[a-zA-Z0-9+\\-_.]*\\s*([\\s\\S]*?)```/g;\n\tlet match: RegExpExecArray | null;\n\twhile ((match = codeBlockRegex.exec(response)) !== null) {\n\t\tconst block = match[1]\n\t\t\t.split('\\n')\n\t\t\t.map((line) => line.trim())\n\t\t\t.filter((line) => line.length > 0);\n\t\tfor (const line of block) {\n\t\t\tconst cleaned = line.startsWith('$') ? line.slice(1).trim() : line;\n\t\t\tif (isLikelyCommand(cleaned)) {\n\t\t\t\tcommands.add(cleaned);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Extract from inline \"Command:\" or \"Action:\" lines\n\tconst inlineRegex = /^\\s*(?:-|\\*|\u2022)?\\s*(?:Command|Action|Run|Execute)\\s*[:\uFF1A]\\s*`?([^`\\n]+)`?/gim;\n\tlet inlineMatch: RegExpExecArray | null;\n\twhile ((inlineMatch = inlineRegex.exec(response)) !== null) {\n\t\tconst cleaned = inlineMatch[1].trim();\n\t\tif (isLikelyCommand(cleaned)) {\n\t\t\tcommands.add(cleaned);\n\t\t}\n\t}\n\n\treturn Array.from(commands.values());\n}\n\n/**\n * Check if text is likely a shell command\n */\nfunction isLikelyCommand(text: string): boolean {\n\tif (!text) return false;\n\tconst lower = text.toLowerCase();\n\treturn (\n\t\tlower.startsWith('rhizome ') ||\n\t\tlower.startsWith('npm ') ||\n\t\tlower.startsWith('pip ') ||\n\t\tlower.startsWith('python ') ||\n\t\tlower.startsWith('node ') ||\n\t\tlower.startsWith('bash ') ||\n\t\tlower.startsWith('./') ||\n\t\tlower.startsWith('gh ')\n\t);\n}\n\n/**\n * Show agentic action suggestions to user\n *\n * @param commands - Commands to suggest\n * @returns true if user confirmed execution\n */\nexport async function promptAgenticActions(commands: string[]): Promise<void> {\n\tconst items = commands.map((command) => ({\n\t\tlabel: command,\n\t\tdescription: 'Send to terminal',\n\t}));\n\n\tconst picked = await vscode.window.showQuickPick(items, {\n\t\tcanPickMany: true,\n\t\ttitle: 'Rhizome suggested actions',\n\t\tplaceHolder: 'Select commands to run (Esc to skip)',\n\t});\n\n\tif (!picked || picked.length === 0) {\n\t\treturn;\n\t}\n\n\tconst confirmation = await vscode.window.showWarningMessage(\n\t\t`Run ${picked.length} command${picked.length > 1 ? 's' : ''} in terminal?`,\n\t\t{ modal: true },\n\t\t'Run',\n\t\t'Cancel'\n\t);\n\n\tif (confirmation !== 'Run') {\n\t\treturn;\n\t}\n\n\tconst terminal = getOrCreateTerminal();\n\tterminal.show(true);\n\tfor (const { label } of picked) {\n\t\tterminal.sendText(label, true);\n\t}\n\n\tvscode.window.showInformationMessage(`Sent ${picked.length} command${picked.length > 1 ? 's' : ''} to terminal.`);\n}\n\nlet agenticTerminal: vscode.Terminal | undefined;\n\nfunction getOrCreateTerminal(): vscode.Terminal {\n\tif (!agenticTerminal) {\n\t\tagenticTerminal = vscode.window.createTerminal({\n\t\t\tname: 'Rhizome Agentic Actions',\n\t\t});\n\t}\n\treturn agenticTerminal;\n}\n\n/**\n * Dispose agentic terminal (call from extension deactivation)\n */\nexport function disposeAgenticTerminal(): void {\n\tif (agenticTerminal) {\n\t\tagenticTerminal.dispose();\n\t\tagenticTerminal = undefined;\n\t}\n}\n", "/**\n * rhizomeService.ts\n *\n * @rhizome: What belongs in a service layer?\n * Pure I/O with rhizome CLI. No UI, no side effects, just I/O + error handling.\n * Other files depend ON this, not the other way around.\n *\n * Question: When you call out to an external tool, what should you encapsulate?\n * Answer: The subprocess call + error parsing. That's it.\n */\n\nimport * as vscode from 'vscode';\n\nconst { execSync } = require('child_process');\n\n/**\n * Query a persona via rhizome CLI\n *\n * @param text - The prompt text to send\n * @param persona - The persona name to query\n * @param timeoutMs - Timeout in milliseconds\n * @param workspaceRoot - Workspace root directory\n * @returns The response from the persona\n * @throws Error if query fails or times out\n */\nexport async function queryPersona(\n\ttext: string,\n\tpersona: string,\n\ttimeoutMs: number = 30000,\n\tworkspaceRoot?: string\n): Promise<string> {\n\tconst cwd = workspaceRoot || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\n\t// Wrap execSync in a promise with explicit timeout\n\tconst queryPromise = new Promise<string>((resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = execSync(`rhizome query --persona ${persona}`, {\n\t\t\t\tinput: text,\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: timeoutMs,\n\t\t\t\tcwd: cwd,\n\t\t\t\tstdio: ['pipe', 'pipe', 'pipe'],\n\t\t\t\tmaxBuffer: 10 * 1024 * 1024,\n\t\t\t});\n\t\t\tresolve(response);\n\t\t} catch (error: any) {\n\t\t\treject(error);\n\t\t}\n\t});\n\n\tconst timeoutPromise = new Promise<string>((_, reject) => {\n\t\tsetTimeout(() => {\n\t\t\treject(new Error(`${persona} timed out after ${timeoutMs}ms`));\n\t\t}, timeoutMs + 1000);\n\t});\n\n\treturn Promise.race([queryPromise, timeoutPromise]);\n}\n\n/**\n * Get list of available personas from rhizome\n *\n * @returns Map of persona name to description\n * @throws Error if rhizome command fails\n */\nexport async function getAvailablePersonas(): Promise<Map<string, string>> {\n\tconst cwd = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\n\ttry {\n\t\t// Try JSON format first\n\t\ttry {\n\t\t\tconst jsonOutput = execSync('rhizome persona list --json', {\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 5000,\n\t\t\t\tstdio: 'pipe',\n\t\t\t\tcwd: cwd,\n\t\t\t});\n\n\t\t\tconst personasObj = JSON.parse(jsonOutput);\n\t\t\tconst personas = new Map<string, string>();\n\n\t\t\tfor (const [name, data] of Object.entries(personasObj)) {\n\t\t\t\tconst role = (data as any).role || '-';\n\t\t\t\tpersonas.set(name, role);\n\t\t\t}\n\n\t\t\treturn personas;\n\t\t} catch (jsonError: any) {\n\t\t\t// Fall back to text parsing\n\t\t\tconst output = execSync('rhizome persona list', {\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 5000,\n\t\t\t\tstdio: 'pipe',\n\t\t\t\tcwd: cwd,\n\t\t\t});\n\n\t\t\tconst personas = new Map<string, string>();\n\t\t\tconst lines = output.split('\\n');\n\n\t\t\tfor (const line of lines) {\n\t\t\t\tif (!line.trim()) continue;\n\t\t\t\tconst match = line.match(/^\\s*(\\S+)\\s+\\|\\s+role:\\s+(.+?)\\s+\\|\\s+source:/);\n\t\t\t\tif (match) {\n\t\t\t\t\tconst name = match[1].trim();\n\t\t\t\t\tconst role = match[2].trim();\n\t\t\t\t\tpersonas.set(name, role);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn personas;\n\t\t}\n\t} catch (error: any) {\n\t\t// Return hardcoded fallback\n\t\treturn new Map([\n\t\t\t['don-socratic', 'Socratic questioning'],\n\t\t\t['dev-guide', 'Mentor: What were you trying to accomplish?'],\n\t\t\t['code-reviewer', 'Skeptic: What\\'s your evidence?'],\n\t\t\t['ux-advocate', 'Curator: Have we watched someone use this?'],\n\t\t\t['dev-advocate', 'Strategist: What trade-off are we making?'],\n\t\t]);\n\t}\n}\n\n/**\n * Check if API key is available (env vars or config file)\n *\n * @param workspaceRoot - Workspace root directory\n * @returns true if API key found, false otherwise\n */\nexport async function checkApiKeyAvailable(workspaceRoot?: string): Promise<boolean> {\n\tconst fs = require('fs');\n\tconst path = require('path');\n\n\tconst cwd = workspaceRoot || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\n\t// Check environment variables\n\tconst envKeys = ['OPENAI_API_KEY', 'ANTHROPIC_API_KEY', 'RHIZOME_API_KEY'];\n\tfor (const key of envKeys) {\n\t\tif (process.env[key]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Check rhizome config file\n\ttry {\n\t\tconst configPath = path.join(cwd, '.rhizome', 'config.json');\n\t\tif (fs.existsSync(configPath)) {\n\t\t\tconst config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));\n\t\t\tif (config.ai?.openai_key || config.ai?.key || config.openai_api_key) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch {\n\t\t// Config file doesn't exist, continue\n\t}\n\n\t// Try rhizome config command\n\ttry {\n\t\tconst configOutput = execSync('rhizome config get ai', {\n\t\t\tencoding: 'utf-8',\n\t\t\tcwd: cwd,\n\t\t\tstdio: ['pipe', 'pipe', 'pipe'],\n\t\t\ttimeout: 5000,\n\t\t});\n\t\tif (configOutput && configOutput.includes('key')) {\n\t\t\treturn true;\n\t\t}\n\t} catch {\n\t\t// Config command failed, continue\n\t}\n\n\treturn false;\n}\n", "/**\n * initService.ts\n *\n * @rhizome: What does \"initialization\" mean?\n * Setting up the state required before the extension can work.\n * Questions: Is rhizome installed? Is the workspace set up? Is the API key configured?\n * This service answers those questions and guides setup.\n */\n\nimport * as vscode from 'vscode';\nimport { isRhizomeInstalled, getCandidateLocations } from '../utils/rhizomePath';\n\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Initialize rhizome in workspace if needed\n *\n * @param workspaceRoot - Workspace root directory\n * @returns true if initialized successfully\n */\nexport async function initializeRhizomeIfNeeded(workspaceRoot: string): Promise<boolean> {\n\t// Check if rhizome is installed\n\tif (!isRhizomeInstalled()) {\n\t\tconst isMember = await isUEUMember();\n\n\t\tif (isMember) {\n\t\t\tconst response = await vscode.window.showErrorMessage(\n\t\t\t\t'rhizome CLI not found. You are a member of Unity-Environmental-University. Install rhizome now?',\n\t\t\t\t'Install rhizome',\n\t\t\t\t'View Guide'\n\t\t\t);\n\n\t\t\tif (response === 'Install rhizome') {\n\t\t\t\ttry {\n\t\t\t\t\tvscode.window.showInformationMessage('Installing rhizome...');\n\t\t\t\t\texecSync('npm install -g @rhizome/cli', {\n\t\t\t\t\t\tencoding: 'utf-8',\n\t\t\t\t\t\ttimeout: 60000,\n\t\t\t\t\t\tstdio: 'inherit',\n\t\t\t\t\t});\n\t\t\t\t\tvscode.window.showInformationMessage('rhizome installed successfully!');\n\n\t\t\t\t\tif (!isRhizomeInstalled()) {\n\t\t\t\t\t\tvscode.window.showWarningMessage(\n\t\t\t\t\t\t\t'Installation completed but rhizome still not found in PATH. You may need to restart VSCode.'\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn await initializeRhizomeIfNeeded(workspaceRoot);\n\t\t\t\t} catch (error: any) {\n\t\t\t\t\tvscode.window.showErrorMessage(`Failed to install rhizome: ${(error as Error).message}`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (response === 'View Guide') {\n\t\t\t\tvscode.env.openExternal(vscode.Uri.parse('https://github.com/your-rhizome-repo#installation'));\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\n\t\t\tconst response = await vscode.window.showWarningMessage(\n\t\t\t\t'rhizome CLI not found. Please install it to use vscode-rhizome.',\n\t\t\t\t'View Installation Guide'\n\t\t\t);\n\t\t\tif (response === 'View Installation Guide') {\n\t\t\t\tvscode.env.openExternal(vscode.Uri.parse('https://github.com/your-rhizome-repo#installation'));\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tconst rhizomePath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.rhizome');\n\ttry {\n\t\tawait vscode.workspace.fs.stat(rhizomePath);\n\t\t// .rhizome exists, check for key config\n\t\tconst keyConfigured = await ensureOpenAIKeyConfigured(workspaceRoot);\n\t\treturn keyConfigured;\n\t} catch {\n\t\t// .rhizome doesn't exist, try to initialize\n\t\ttry {\n\t\t\tvscode.window.showInformationMessage('Initializing rhizome in workspace...');\n\t\t\texecSync('rhizome init --force', {\n\t\t\t\tcwd: workspaceRoot,\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 10000,\n\t\t\t});\n\t\t\tvscode.window.showInformationMessage('Rhizome initialized in workspace');\n\n\t\t\tconst keyConfigured = await ensureOpenAIKeyConfigured(workspaceRoot);\n\t\t\treturn keyConfigured;\n\t\t} catch (error: any) {\n\t\t\tvscode.window.showErrorMessage(`Failed to initialize rhizome: ${(error as Error).message}`);\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Ensure OpenAI API key is configured\n *\n * @param workspaceRoot - Workspace root directory\n * @returns true if key is configured, false otherwise\n */\nexport async function ensureOpenAIKeyConfigured(workspaceRoot: string): Promise<boolean> {\n\tconst configPath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.rhizome', 'config.json');\n\n\ttry {\n\t\tif (process.env.OPENAI_API_KEY) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst configExists = await vscode.workspace.fs.stat(configPath);\n\t\tif (configExists) {\n\t\t\tconst configContent = await vscode.workspace.fs.readFile(configPath);\n\t\t\tconst config = JSON.parse(new TextDecoder().decode(configContent));\n\t\t\tif (config.ai?.openai_key) {\n\t\t\t\tprocess.env.OPENAI_API_KEY = config.ai.openai_key;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch {\n\t\t// Config doesn't exist\n\t}\n\n\t// No key found, ask user\n\tconst key = await vscode.window.showInputBox({\n\t\tprompt: 'Enter your OpenAI API key (stored locally in .rhizome/config.json)',\n\t\tpassword: true,\n\t\tignoreFocusOut: true,\n\t});\n\n\tif (!key) {\n\t\tvscode.window.showWarningMessage('OpenAI API key is required for don-socratic');\n\t\treturn false;\n\t}\n\n\tconst sanitizedKey = key.trim();\n\tif (/^\\s*OPENAI_API_KEY\\s*=/i.test(sanitizedKey) || sanitizedKey.includes('=')) {\n\t\tvscode.window.showErrorMessage('Please enter only the OpenAI secret value (omit any \"OPENAI_API_KEY=\" prefix).');\n\t\treturn false;\n\t}\n\n\tconst keyPattern = /^sk-(proj-)?[A-Za-z0-9_-]{20,}$/;\n\tif (!keyPattern.test(sanitizedKey)) {\n\t\tvscode.window.showErrorMessage('That doesn\\'t look like an OpenAI API key (expected to start with \"sk-\" and contain letters, numbers, \"-\" or \"_\").');\n\t\treturn false;\n\t}\n\n\tconst validationOk = await validateOpenAIKey(sanitizedKey);\n\tif (!validationOk) {\n\t\treturn false;\n\t}\n\n\t// Save key to local config\n\ttry {\n\t\tconst rhizomePath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.rhizome');\n\t\tconst configPath = vscode.Uri.joinPath(rhizomePath, 'config.json');\n\n\t\tlet config: any = {};\n\t\ttry {\n\t\t\tconst existing = await vscode.workspace.fs.readFile(configPath);\n\t\t\tconfig = JSON.parse(new TextDecoder().decode(existing));\n\t\t} catch {\n\t\t\t// File doesn't exist\n\t\t}\n\n\t\tif (!config.ai) config.ai = {};\n\t\tconfig.ai.openai_key = sanitizedKey;\n\n\t\tconst configContent = new TextEncoder().encode(JSON.stringify(config, null, 2));\n\t\tawait vscode.workspace.fs.writeFile(configPath, configContent);\n\t\tprocess.env.OPENAI_API_KEY = sanitizedKey;\n\n\t\tawait addToGitignore(workspaceRoot, '.rhizome/config.json');\n\n\t\tvscode.window.showInformationMessage('OpenAI API key configured and stored securely');\n\t\treturn true;\n\t} catch (error: any) {\n\t\tvscode.window.showErrorMessage(`Failed to save API key: ${(error as Error).message}`);\n\t\treturn false;\n\t}\n}\n\n/**\n * Validate OpenAI key by making a minimal API call\n */\nexport async function validateOpenAIKey(key: string): Promise<boolean> {\n\ttry {\n\t\tconst response = await fetch('https://api.openai.com/v1/models', {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${key}`,\n\t\t\t},\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst errorText = await response.text();\n\t\tlet message = 'OpenAI rejected the provided API key.';\n\n\t\ttry {\n\t\t\tconst parsed = JSON.parse(errorText);\n\t\t\tif (parsed?.error?.message) {\n\t\t\t\tmessage += ` ${parsed.error.message}`;\n\t\t\t}\n\t\t} catch {\n\t\t\tif (errorText) {\n\t\t\t\tmessage += ` ${errorText}`;\n\t\t\t}\n\t\t}\n\n\t\tvscode.window.showErrorMessage(message.trim());\n\t\treturn false;\n\t} catch (error: any) {\n\t\tvscode.window.showErrorMessage(`Failed to validate OpenAI API key: ${(error as Error).message}`);\n\t\treturn false;\n\t}\n}\n\n/**\n * Add entry to .gitignore if not already there\n */\nexport async function addToGitignore(workspaceRoot: string, entry: string): Promise<void> {\n\tconst gitignorePath = vscode.Uri.joinPath(vscode.Uri.file(workspaceRoot), '.gitignore');\n\n\tlet content = '';\n\ttry {\n\t\tconst existing = await vscode.workspace.fs.readFile(gitignorePath);\n\t\tcontent = new TextDecoder().decode(existing);\n\t} catch {\n\t\t// .gitignore doesn't exist\n\t}\n\n\tif (!content.includes(entry)) {\n\t\tcontent += (content.endsWith('\\n') ? '' : '\\n') + entry + '\\n';\n\t\tconst encoded = new TextEncoder().encode(content);\n\t\tawait vscode.workspace.fs.writeFile(gitignorePath, encoded);\n\t}\n}\n\n/**\n * Check if user is member of Unity-Environmental-University\n */\nasync function isUEUMember(): Promise<boolean> {\n\ttry {\n\t\texecSync('gh auth status', {\n\t\t\tencoding: 'utf-8',\n\t\t\ttimeout: 2000,\n\t\t\tstdio: 'pipe',\n\t\t});\n\t} catch {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tconst org = execSync('git config user.organization', {\n\t\t\tencoding: 'utf-8',\n\t\t\ttimeout: 2000,\n\t\t\tstdio: 'pipe',\n\t\t})\n\t\t\t.trim();\n\t\tif (org === 'Unity-Environmental-University') {\n\t\t\treturn true;\n\t\t}\n\t} catch {\n\t\t// Config value not set\n\t}\n\n\ttry {\n\t\tconst orgs = execSync('gh org list', {\n\t\t\tencoding: 'utf-8',\n\t\t\ttimeout: 5000,\n\t\t})\n\t\t\t.split('\\n')\n\t\t\t.map((line: string) => line.trim())\n\t\t\t.filter((line: string) => line.length > 0);\n\n\t\treturn orgs.includes('Unity-Environmental-University');\n\t} catch {\n\t\treturn false;\n\t}\n}\n", "import * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\nconst RHIZOME_BINARY_NAME = 'rhizome';\n\nexport const DEFAULT_RHIZOME_LOCATIONS: string[] = [\n\tpath.join(os.homedir(), '.local', 'bin', RHIZOME_BINARY_NAME),\n\tpath.join(os.homedir(), 'bin', RHIZOME_BINARY_NAME),\n\tpath.join(os.homedir(), '.rhizome', 'bin', RHIZOME_BINARY_NAME),\n\t'/usr/local/bin/rhizome',\n\t'/usr/bin/rhizome',\n];\n\nfunction parseCustomLocations(): string[] {\n\tconst envPaths = process.env.RHIZOME_CUSTOM_PATHS;\n\tif (!envPaths) {\n\t\treturn [];\n\t}\n\treturn envPaths\n\t\t.split(path.delimiter)\n\t\t.map((entry) => entry.trim())\n\t\t.filter((entry) => entry.length > 0);\n}\n\nexport function getCandidateLocations(): string[] {\n\tconst combined = [...parseCustomLocations(), ...DEFAULT_RHIZOME_LOCATIONS];\n\tconst seen = new Set<string>();\n\tconst deduped: string[] = [];\n\tfor (const location of combined) {\n\t\tconst normalized = path.normalize(location);\n\t\tif (!seen.has(normalized)) {\n\t\t\tseen.add(normalized);\n\t\t\tdeduped.push(normalized);\n\t\t}\n\t}\n\treturn deduped;\n}\n\nexport function findRhizomeOnDisk(pathExists: (candidate: string) => boolean = fs.existsSync): string | null {\n\tfor (const candidate of getCandidateLocations()) {\n\t\tif (pathExists(candidate)) {\n\t\t\treturn candidate;\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * dev-guide reflection:\n * We expect rhizome to live in a handful of predictable locations. Rather than\n * assuming the user's PATH is configured, we check disk first (covers ~/.local/bin)\n * and only fall back to PATH resolution via `rhizome --version` as a final resort.\n * This keeps the experience frictionless for CLI installs that do not export PATH.\n */\nexport function isRhizomeInstalled(): boolean {\n\tif (findRhizomeOnDisk()) {\n\t\treturn true;\n\t}\n\n\ttry {\n\t\texecSync(`${RHIZOME_BINARY_NAME} --version`, {\n\t\t\tencoding: 'utf-8',\n\t\t\ttimeout: 2000,\n\t\t\tstdio: 'pipe',\n\t\t});\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\nexport function ensureLocalBinOnPath(): void {\n\tconst localBin = path.join(os.homedir(), '.local', 'bin');\n\tconst pathValue = process.env.PATH ?? '';\n\tconst segments = pathValue.length > 0 ? pathValue.split(path.delimiter) : [];\n\tif (!segments.includes(localBin)) {\n\t\tsegments.unshift(localBin);\n\t\tprocess.env.PATH = segments.join(path.delimiter);\n\t}\n}\n", "/**\n * helpers.ts\n *\n * @rhizome: What belongs in helpers?\n * Small, reusable utilities that don't warrant a full service.\n * Language detection, selection validation, etc.\n */\n\nimport * as vscode from 'vscode';\n\n/**\n * Get active selection, validate it exists\n */\nexport function getActiveSelection(): { editor: vscode.TextEditor; selectedText: string } | null {\n\tconst editor = vscode.window.activeTextEditor;\n\tif (!editor) {\n\t\tvscode.window.showErrorMessage('No active editor');\n\t\treturn null;\n\t}\n\n\tconst selectedText = editor.document.getText(editor.selection);\n\tif (!selectedText) {\n\t\tvscode.window.showErrorMessage('Please select code to question');\n\t\treturn null;\n\t}\n\n\treturn { editor, selectedText };\n}\n\n/**\n * Detect language from VSCode languageId\n */\nexport function detectLanguage(languageId: string): 'typescript' | 'javascript' | 'python' | null {\n\tif (languageId === 'typescript' || languageId === 'javascript') {\n\t\treturn 'typescript';\n\t}\n\tif (languageId === 'python') {\n\t\treturn 'python';\n\t}\n\treturn null;\n}\n\n/**\n * Perform health check for rhizome integration\n */\nexport async function performHealthCheck(workspaceRoot: string): Promise<{ healthy: boolean; details: string[] }> {\n\tconst details: string[] = [];\n\tconst { execSync } = require('child_process');\n\tconst fs = require('fs');\n\n\ttry {\n\t\t// Check 1: rhizome installed\n\t\ttry {\n\t\t\tconst version = execSync('rhizome --version', {\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 5000,\n\t\t\t\tstdio: 'pipe',\n\t\t\t}).trim();\n\t\t\tdetails.push(`\u2713 rhizome installed: ${version}`);\n\t\t} catch {\n\t\t\tdetails.push(`\u2717 rhizome not found in PATH`);\n\t\t\treturn { healthy: false, details };\n\t\t}\n\n\t\t// Check 2: workspace has .rhizome\n\t\tconst rhizomeDir = `${workspaceRoot}/.rhizome`;\n\t\tif (fs.existsSync(rhizomeDir)) {\n\t\t\tdetails.push(`\u2713 .rhizome directory exists at ${rhizomeDir}`);\n\t\t} else {\n\t\t\tdetails.push(`\u26A0 .rhizome directory not found. Run: vscode-rhizome.init`);\n\t\t}\n\n\t\t// Check 3: personas available\n\t\ttry {\n\t\t\tconst personaOutput = execSync('rhizome persona list', {\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 5000,\n\t\t\t\tstdio: 'pipe',\n\t\t\t\tcwd: workspaceRoot,\n\t\t\t});\n\t\t\tconst personaCount = personaOutput.split('\\n').filter((line: string) => line.includes('|')).length;\n\t\t\tdetails.push(`\u2713 ${personaCount} personas available`);\n\t\t} catch {\n\t\t\tdetails.push(`\u2717 Could not list personas`);\n\t\t\treturn { healthy: false, details };\n\t\t}\n\n\t\t// Check 4: test a simple query\n\t\ttry {\n\t\t\texecSync('rhizome query --persona don-socratic', {\n\t\t\t\tinput: 'hello',\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\ttimeout: 10000,\n\t\t\t\tstdio: ['pipe', 'pipe', 'pipe'],\n\t\t\t\tcwd: workspaceRoot,\n\t\t\t});\n\t\t\tdetails.push(`\u2713 test query succeeded`);\n\t\t} catch (error: any) {\n\t\t\tconst errorMsg = error.stderr?.toString() || error.message;\n\t\t\tdetails.push(`\u2717 test query failed: ${errorMsg.split('\\n')[0]}`);\n\t\t\treturn { healthy: false, details };\n\t\t}\n\n\t\treturn { healthy: true, details };\n\t} catch (error: any) {\n\t\tdetails.push(`\u2717 Health check error: ${(error as Error).message}`);\n\t\treturn { healthy: false, details };\n\t}\n}\n", "/**\n * commentParser.ts\n *\n * Parse persona responses into structured line-by-line comments.\n * Converts natural language feedback into insertion points with line numbers.\n */\n\nexport interface CommentInsertion {\n\tlineNumber: number;\n\tcomment: string;\n\tcontext?: string; // The code snippet being commented on\n}\n\n/**\n * Parse persona response into structured insertions.\n *\n * Expects response format like:\n * Line 5: Missing null check here. What if user is undefined?\n * Line 12-15: This loop could be optimized with a Set instead of array lookup\n * Line 20: Good error handling, but consider logging the error\n *\n * The commentPrefix parameter (// for TypeScript, # for Python) is prepended to each\n * parsed comment. This ensures comments use the correct syntax for the file type.\n *\n * Falls back to inserting at logical points if no line numbers detected.\n */\nexport function parseCommentInsertion(\n\tresponse: string,\n\tfileLines: string[],\n\tcommentPrefix: string = '//'\n): CommentInsertion[] {\n\tconst insertions: CommentInsertion[] = [];\n\n\t// Try to extract line number references\n\tconst linePattern = /(?:line|lines?)\\s*(\\d+)(?:-(\\d+))?:?\\s*(.+?)(?=line|\\n|$)/gi;\n\tlet match;\n\n\twhile ((match = linePattern.exec(response)) !== null) {\n\t\tconst startLine = parseInt(match[1], 10) - 1; // Convert to 0-indexed\n\t\tconst endLine = match[2] ? parseInt(match[2], 10) - 1 : startLine;\n\t\tconst comment = match[3].trim();\n\n\t\t// Extract context from file\n\t\tconst context = fileLines\n\t\t\t.slice(Math.max(0, startLine), Math.min(fileLines.length, endLine + 1))\n\t\t\t.join('\\n');\n\n\t\tif (startLine >= 0 && startLine < fileLines.length) {\n\t\t\tinsertions.push({\n\t\t\t\tlineNumber: startLine,\n\t\t\t\tcomment: `${commentPrefix} ${comment}`,\n\t\t\t\tcontext,\n\t\t\t});\n\t\t}\n\t}\n\n\t// If no line numbers found, try to match against code snippets in response\n\tif (insertions.length === 0) {\n\t\tinsertions.push({\n\t\t\tlineNumber: 0,\n\t\t\tcomment: `${commentPrefix}\\n${commentPrefix} REVIEW:\\n${response\n\t\t\t\t.split('\\n')\n\t\t\t\t.map(line => `${commentPrefix} ${line}`)\n\t\t\t\t.join('\\n')}`,\n\t\t});\n\t}\n\n\treturn insertions;\n}\n\n/**\n * Format insertions as a preview for user approval\n */\nexport function formatInsertionPreview(insertions: CommentInsertion[], fileLines: string[]): string {\n\treturn insertions\n\t\t.map((ins, idx) => {\n\t\t\tconst lineNum = ins.lineNumber + 1;\n\t\t\treturn `[${idx + 1}] Line ${lineNum}:\\n${ins.comment}\\n${ins.context ? `    Context: ${ins.context}\\n` : ''}\\n`;\n\t\t})\n\t\t.join('\\n');\n}\n"],
  "mappings": "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",
  "names": ["vscode", "vscode", "vscode", "vscode", "execSync", "fs", "path", "configPath", "vscode"]
}
